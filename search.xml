<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL进阶教程</title>
      <link href="/post/ee5ab589.html"/>
      <url>/post/ee5ab589.html</url>
      
        <content type="html"><![CDATA[<h2 id="CASE-表达式"><a href="#CASE-表达式" class="headerlink" title="CASE 表达式"></a><code>CASE</code> 表达式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简单 case 表达式</span></span><br><span class="line"><span class="keyword">CASE</span> sex</span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span> <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 搜索 case 表达式</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line"> <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `PopTbl` (</span><br><span class="line">  `pref_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `population` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`pref_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;德岛&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;香川&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;爱媛&#x27;</span>, <span class="number">150</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;高知&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;福冈&#x27;</span>, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;佐贺&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;长崎&#x27;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;东京&#x27;</span>, <span class="number">400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl <span class="keyword">VALUES</span>(<span class="string">&#x27;群马&#x27;</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h3 id="练习1：统计不同地区的人口总数"><a href="#练习1：统计不同地区的人口总数" class="headerlink" title="练习1：统计不同地区的人口总数"></a>练习1：统计不同地区的人口总数</h3><p>说明：德岛、香川、爱媛、高知归为四国地区，福冈、佐贺、长崎归为九州地区，剩下的归为其他。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">pref_name </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;德岛&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;四国&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;香川&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;四国&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;爱媛&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;四国&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;高知&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;四国&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;福冈&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;九州&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;佐贺&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;九州&#x27;</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;长崎&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;九州&#x27;</span> </span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span> </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> district,</span><br><span class="line"><span class="built_in">SUM</span>( population ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">PopTbl </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">district; # 严格来讲，这里使用district是不规范的，因为<span class="keyword">group</span> <span class="keyword">by</span>先于<span class="keyword">select</span>执行</span><br></pre></td></tr></table></figure><h3 id="练习2：统计不同人口等级的县府个数"><a href="#练习2：统计不同人口等级的县府个数" class="headerlink" title="练习2：统计不同人口等级的县府个数"></a>练习2：统计不同人口等级的县府个数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> population <span class="operator">&lt;</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> population <span class="operator">&lt;</span> <span class="number">200</span> <span class="keyword">THEN</span> <span class="string">&#x27;02&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> population <span class="operator">&lt;</span> <span class="number">300</span> <span class="keyword">THEN</span> <span class="string">&#x27;03&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> population <span class="operator">&gt;=</span> <span class="number">300</span> <span class="keyword">THEN</span> <span class="string">&#x27;04&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">NULL</span> <span class="keyword">END</span> <span class="keyword">AS</span> pop_class,</span><br><span class="line"><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt</span><br><span class="line"><span class="keyword">FROM</span> PopTbl</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pop_class;</span><br></pre></td></tr></table></figure><p>数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PopTbl2</span><br><span class="line">(pref_name <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line"> sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> population <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(pref_name, sex));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;德岛&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">60</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;德岛&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">40</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;香川&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;香川&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;爱媛&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;爱媛&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">50</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;高知&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;高知&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;福冈&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;福冈&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;佐贺&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">20</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;佐贺&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">80</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;长崎&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">125</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;长崎&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">125</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;东京&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="number">250</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> PopTbl2 <span class="keyword">VALUES</span>(<span class="string">&#x27;东京&#x27;</span>, <span class="string">&#x27;2&#x27;</span>,<span class="number">150</span>);</span><br></pre></td></tr></table></figure><h3 id="练习3：统计各县男女人数"><a href="#练习3：统计各县男女人数" class="headerlink" title="练习3：统计各县男女人数"></a>练习3：统计各县男女人数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pref_name,</span><br><span class="line">       <span class="comment">-- 男性人口</span></span><br><span class="line">       <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> population <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> cnt_m,</span><br><span class="line">       <span class="comment">-- 女性人口</span></span><br><span class="line">       <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex<span class="operator">=</span><span class="string">&#x27;2&#x27;</span> <span class="keyword">THEN</span> population <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> cnt_f</span><br><span class="line"><span class="keyword">FROM</span> PopTbl2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pref_name;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题清单</title>
      <link href="/post/be632046.html"/>
      <url>/post/be632046.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-高频面试题"><a href="#1-高频面试题" class="headerlink" title="1. 高频面试题"></a>1. 高频面试题</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="Redis为什么快？单线程如何处理高并发？"><a href="#Redis为什么快？单线程如何处理高并发？" class="headerlink" title="Redis为什么快？单线程如何处理高并发？"></a>Redis为什么快？单线程如何处理高并发？</h4><p>对于Redis的高性能设计，我的理解主要得益于以下几点：</p><ul><li>内存操作：Redis数据存储在内存，相比于磁盘数据库，减少了IO开销</li><li>高效的数据结构：Redis针对不同场景设计了不同的数据结构，优化了空间和访问效率</li><li>单线程：Redis使用单线程处理命令，避免了多线程之间的竞争和上下文切换的开销</li><li>IO多路复用：Redis基于epoll&#x2F;kqueue实现了非阻塞的网络模型，通过事件机制循环处理请求</li></ul><p><strong>追问1：单线程如何利用多核CPU</strong></p><p>可以部署分片集群，每个Redis实例绑定一个CPU核（&#x3D;&#x3D;如何部署和绑定？&#x3D;&#x3D;）</p><p><strong>追问2：为什么选用单线程而不是多线程</strong></p><ul><li>避免锁竞争</li><li>避免上下文切换开销</li><li>多线程内存管理复杂</li></ul><p><strong>追问3： 什么场景下单线程会成为瓶颈</strong></p><ul><li>超大 Value 操作（如10MB的string）（&#x3D;&#x3D;什么操作，普通读写就会阻塞吗&#x3D;&#x3D;）</li><li>复杂 Lua 脚本执行（阻塞其他命令）</li></ul><hr><h4 id="Redis有哪些数据结构，分别有哪些使用场景场景？"><a href="#Redis有哪些数据结构，分别有哪些使用场景场景？" class="headerlink" title="Redis有哪些数据结构，分别有哪些使用场景场景？"></a>Redis有哪些数据结构，分别有哪些使用场景场景？</h4><p>Redis的基础数据结构包括string、hash、list、set、zset，高级数据结构包括hyperloglog、geo、bitmap、stream</p><hr><h4 id="缓存穿透-雪崩-击穿解决方案"><a href="#缓存穿透-雪崩-击穿解决方案" class="headerlink" title="缓存穿透&#x2F;雪崩&#x2F;击穿解决方案"></a>缓存穿透&#x2F;雪崩&#x2F;击穿解决方案</h4><p><strong>缓存穿透</strong>是指查询数据库中不存在的数据，导致请求每次都穿过缓存查询数据库。</p><p>解决方案：</p><ul><li><strong>布隆过滤器（Bloom Filter）</strong></li></ul><p>服务启动时加载全量有效key，标记数据是否存在；新增数据时同步更新过滤器</p><p>缺点：存在一定的误判率</p><ul><li><strong>缓存空值</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> redis.get(key);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> NullValue) &#123; <span class="comment">// 空值标记</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    value = db.query(key);</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        redis.setex(key, <span class="number">300</span>, <span class="keyword">new</span> <span class="title class_">NullValue</span>()); <span class="comment">// 缓存空值5分钟</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redis.setex(key, <span class="number">3600</span>, value); <span class="comment">// 正常缓存1小时</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增强请求参数的复杂度，避免被猜测，同时做好数据的基础格式校验</li></ul><p><strong>缓存雪崩</strong>是指<strong>大量key</strong>同时失效，导致大量请求都去查询数据库，造成数据库压力骤增。</p><p>解决方案：</p><ul><li><strong>差异化过期时间</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础过期时间，1小时</span></span><br><span class="line"><span class="type">int</span> <span class="variable">baseExpire</span> <span class="operator">=</span> <span class="number">3600</span>;</span><br><span class="line"><span class="comment">// 随机0-5分钟</span></span><br><span class="line"><span class="type">int</span> <span class="variable">randomExpire</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">300</span>);</span><br><span class="line">redis.setex(key, baseExpire + randomExpire, value);</span><br></pre></td></tr></table></figure><ul><li><strong>永不过期+异步更新</strong></li><li><strong>添加降级限流策略</strong></li><li><strong>添加多级缓存</strong></li></ul><p><strong>缓存击穿</strong>是指某个<strong>热点key</strong>失效的瞬间，有大量请求同时访问这个key，导致所有请求都去查询数据库。</p><p>解决方案：</p><ul><li><strong>互斥锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> Redission.getLock(<span class="string">&quot;PREFIX:&quot;</span> + key);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lock.tryLock(<span class="number">3</span>, <span class="number">30</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        <span class="comment">// 查库并重建缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>逻辑过期</strong></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;真实数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expire_ts&quot;</span><span class="punctuation">:</span> <span class="number">1672502400</span> <span class="comment">// 逻辑过期时间戳</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>处理流程：</p><ol><li>判断逻辑过期时间<ol><li>未过期，直接返回数据</li><li>已过期，创建子线程，异步重建缓存</li></ol></li></ol><hr><h4 id="RDB和AOF持久化原理及优劣对比"><a href="#RDB和AOF持久化原理及优劣对比" class="headerlink" title="RDB和AOF持久化原理及优劣对比"></a>RDB和AOF持久化原理及优劣对比</h4><h4 id="Redis集群模式（主从复制-Sentinel-Cluster）"><a href="#Redis集群模式（主从复制-Sentinel-Cluster）" class="headerlink" title="Redis集群模式（主从复制&#x2F;Sentinel&#x2F;Cluster）"></a>Redis集群模式（主从复制&#x2F;Sentinel&#x2F;Cluster）</h4><h4 id="热Key问题处理方案"><a href="#热Key问题处理方案" class="headerlink" title="热Key问题处理方案"></a>热Key问题处理方案</h4><h4 id="Redis事务与MySQL事务的核心区别"><a href="#Redis事务与MySQL事务的核心区别" class="headerlink" title="Redis事务与MySQL事务的核心区别"></a>Redis事务与MySQL事务的核心区别</h4><h4 id="使用Redis实现分布式锁的演进过程"><a href="#使用Redis实现分布式锁的演进过程" class="headerlink" title="使用Redis实现分布式锁的演进过程"></a>使用Redis实现分布式锁的演进过程</h4><h4 id="全量同步和增量同步的区别"><a href="#全量同步和增量同步的区别" class="headerlink" title="全量同步和增量同步的区别"></a>全量同步和增量同步的区别</h4><p>全量同步：master生成当前内存中所有数据的RDB文件，将RDB发送给slave。在此过程中，master将新的命令记录在<code>repl_backlog</code>中，后续再发送给slave。</p><p>执行时机：</p><ol><li>slave第一次连接到master</li><li>slave宕机太久，导致它在<code>repl_backlog</code>中的<code>offset</code>已经被覆盖掉了</li></ol><p>增量同步：salve将自己的<code>offset</code>发送到master，master将<code>repl_backlog</code>中<code>offset</code>之后的命令发送给slave</p><p>执行时机：</p><ol><li>slave断开重连之后，<code>repl_backlog</code>中的<code>offset</code>尚未被覆盖</li></ol><h4 id="ZSet底层实现（跳表-哈希表）"><a href="#ZSet底层实现（跳表-哈希表）" class="headerlink" title="ZSet底层实现（跳表+哈希表）"></a>ZSet底层实现（跳表+哈希表）</h4><h4 id="内存淘汰策略与LRU实现"><a href="#内存淘汰策略与LRU实现" class="headerlink" title="内存淘汰策略与LRU实现"></a>内存淘汰策略与LRU实现</h4><h4 id="Pipeline和Lua脚本的使用场景"><a href="#Pipeline和Lua脚本的使用场景" class="headerlink" title="Pipeline和Lua脚本的使用场景"></a>Pipeline和Lua脚本的使用场景</h4><h4 id="大Key问题检测与处理方案"><a href="#大Key问题检测与处理方案" class="headerlink" title="大Key问题检测与处理方案"></a>大Key问题检测与处理方案</h4><h4 id="Redis6多线程模型实现原理"><a href="#Redis6多线程模型实现原理" class="headerlink" title="Redis6多线程模型实现原理"></a>Redis6多线程模型实现原理</h4><h4 id="Redis和MySQL的区别"><a href="#Redis和MySQL的区别" class="headerlink" title="Redis和MySQL的区别"></a>Redis和MySQL的区别</h4><table><thead><tr><th></th><th>Redis</th><th>MySQL</th></tr></thead><tbody><tr><td>数据结构</td><td>非结构化</td><td>结构化</td></tr><tr><td>持久化</td><td>可选持久化</td><td>默认持久化</td></tr><tr><td>事务支持</td><td>简单支持</td><td>支持完整的ACID</td></tr><tr><td>扩展性</td><td>通过分片水平扩展</td><td>复杂，需分库分表或中间件</td></tr><tr><td>数据一致性</td><td>最终一致性</td><td>强一致性</td></tr></tbody></table><p>总结：</p><ul><li>当需要复杂查询和事务支持，对数据一致性要求较高，需要长期持久化存储的场景，选择MySQL</li><li>当需要超高性能和灵活数据类型，对数据的一致性要求不那么高，且容忍一定的数据丢失的情况下，选择Redis</li></ul><h4 id="Redis和memchahed的区别"><a href="#Redis和memchahed的区别" class="headerlink" title="Redis和memchahed的区别"></a>Redis和memchahed的区别</h4><table><thead><tr><th></th><th>Redis</th><th>Memcached</th></tr></thead><tbody><tr><td>数据类型</td><td>丰富的数据类型：string、hash、list等</td><td>只支持string</td></tr><tr><td>持久化</td><td>支持（RDB、AOF）</td><td>不支持</td></tr><tr><td>事务</td><td>简单支持（MULTI&#x2F;EXEC）</td><td>不支持</td></tr><tr><td>分布式</td><td>支持，集群自动分片</td><td>依赖客户端一致性哈希或第三方工具实现分布式</td></tr><tr><td>命令</td><td>支持丰富的命令</td><td>仅支持SET、GET、ADD、DELTE等基础操作</td></tr><tr><td>内存占用</td><td>复杂数据结构可能导致内存消耗较高</td><td>内存利用率高，但灵活性较低</td></tr></tbody></table><p>总结：</p><ul><li>需要复杂数据结构、持久化、事务支持和高可用性的场景，选择Redis</li><li>追求极致的性能和简单性，数据结构简单且无需持久化的场景，可以选择Memcached</li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="查询语句的执行顺序"><a href="#查询语句的执行顺序" class="headerlink" title="查询语句的执行顺序"></a>查询语句的执行顺序</h4><img src="/post/be632046/1726212535664-4bb3f3ff-704a-4706-84c8-a046a8486657.webp" class="" title="img"><hr><h4 id="InnoDB索引结构"><a href="#InnoDB索引结构" class="headerlink" title="InnoDB索引结构"></a>InnoDB索引结构</h4><p>B树结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">       [10 | 20]</span><br><span class="line">      /    |     \</span><br><span class="line">[5|8]  [12|15|18]  [25|30]</span><br></pre></td></tr></table></figure><p>特征：</p><ul><li>所有节点都存储完整数据</li><li>每个节点最多包涵 m-1 个键值和 m 个子节点</li></ul><p>B+树结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">               [15]</span><br><span class="line">              /    \</span><br><span class="line">     [10|15]          [20|25]</span><br><span class="line">     /     \          /     \ </span><br><span class="line">[10|...]→[15|...]→[20|...]→[25|...]（叶子节点链表）</span><br></pre></td></tr></table></figure><p>特征：</p><ul><li>只有叶子节点存储完整数据，内部节点只存储索引</li><li>叶子节点通过双向链表连接，支持高效范围查询</li><li>相同磁盘页可以存储更多索引，提高查询效率</li></ul><p><strong>InnoDB选择B+树的7大关键原因</strong></p><table><thead><tr><th align="left"><strong>对比维度</strong></th><th align="left"><strong>B树</strong></th><th align="left"><strong>B+树</strong></th><th align="left"><strong>InnoDB优势体现</strong></th></tr></thead><tbody><tr><td align="left"><strong>数据存储位置</strong></td><td align="left">所有节点存储数据</td><td align="left">仅叶子节点存储数据</td><td align="left">减少磁盘IO次数</td></tr><tr><td align="left"><strong>树高度</strong></td><td align="left">较高（数据分散存储）</td><td align="left">较低（内部节点纯索引）</td><td align="left">3层B+树可支撑千万级数据</td></tr><tr><td align="left"><strong>范围查询</strong></td><td align="left">需要回溯父节点</td><td align="left">通过叶子链表顺序扫描</td><td align="left"><code>WHERE id &gt; 100</code> 效率提升10倍+</td></tr><tr><td align="left"><strong>全表扫描</strong></td><td align="left">需遍历整棵树</td><td align="left">直接顺序遍历叶子节点链表</td><td align="left">全表扫描速度接近顺序读</td></tr><tr><td align="left"><strong>磁盘利用率</strong></td><td align="left">节点包含数据导致存储键值数少</td><td align="left">单页可存储更多键值（高分支因子）</td><td align="left">相同数据量减少30%-50%树高度</td></tr><tr><td align="left"><strong>数据更新代价</strong></td><td align="left">可能引起复杂结构调整</td><td align="left">插入删除多数情况只需局部调整</td><td align="left">支持更高并发写入</td></tr><tr><td align="left"><strong>缓存命中率</strong></td><td align="left">热点数据分散在不同层级</td><td align="left">叶子节点集中存储所有数据</td><td align="left">Buffer Pool利用率提升40%+</td></tr></tbody></table><h4 id="为什么MongoDB使用B树而MySQL用B-树"><a href="#为什么MongoDB使用B树而MySQL用B-树" class="headerlink" title="为什么MongoDB使用B树而MySQL用B+树"></a>为什么MongoDB使用B树而MySQL用B+树</h4><p>MongoDB面向文档存储，需快速获取整个文档（B树的内部节点存储完整数据，可以减少寻址次数）</p><p>MySQL侧重范围查询和事务处理（B+树的顺序访问特性更优秀）</p><h4 id="B-树节点分裂的具体过程"><a href="#B-树节点分裂的具体过程" class="headerlink" title="B+树节点分裂的具体过程"></a>B+树节点分裂的具体过程</h4><p>InnoDB优化：预留1&#x2F;16页空间避免频繁分裂</p><p><strong>索引设计原则</strong></p><ul><li>前缀索引优化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> INDEX (name(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><ul><li>覆盖索引优化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建包含所有查询字段的索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_cover <span class="keyword">ON</span> orders(user_id, status, create_time);</span><br></pre></td></tr></table></figure><p><strong>监控工具使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看索引使用情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sys.schema_index_statistics;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析索引效率</span></span><br><span class="line">EXPLAIN ANALYZE <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category_id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>维护策略</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定期优化表（重建索引）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> orders ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 监控页分裂次数</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Innodb_page_splits%&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="EXPLAIN-字段说明"><a href="#EXPLAIN-字段说明" class="headerlink" title="EXPLAIN 字段说明"></a><code>EXPLAIN</code> 字段说明</h4><p>通常<code>EXPALIN</code>查询语句的输出如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment">// 每个select语句对应一个唯一的id</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询类型：</span></span><br><span class="line"><span class="comment">     * SIMPLE：不包含UNION或子查询的select（连接查询的每个查询都是simple查询）</span></span><br><span class="line"><span class="comment">     * PRIMARY：最外层查询</span></span><br><span class="line"><span class="comment">     * UNION</span></span><br><span class="line"><span class="comment">     * ...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">&quot;select_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SIMPLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span> <span class="comment">// 要查询的表</span></span><br><span class="line">    <span class="attr">&quot;partitions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// 分区信息</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对单表的访问方法：</span></span><br><span class="line"><span class="comment">     * system：当表中只有一条记录，并且该表使用的存储引擎的统计数据是精确的，访问方法就是system</span></span><br><span class="line"><span class="comment">     * constant：根据主键或唯一索引列与常数进行等值匹配时，访问方法就是const</span></span><br><span class="line"><span class="comment">     * eq_ref：连接查询中对被驱动表的主键或不允许为NULL的唯一索引进行等值查询时，访问方法就是eq_ref</span></span><br><span class="line"><span class="comment">     * ref：通过普通二级索引列与常量进行等值匹配时，对该表的访问方法就是 ref</span></span><br><span class="line"><span class="comment">     * ref_or_null：select * from single_table where key1 = &#x27;abc&#x27; or key1 is NULL;</span></span><br><span class="line"><span class="comment">     * index_merge：使用多个索引进行等值匹配</span></span><br><span class="line"><span class="comment">     * unique_subquery：在子查询中使用主键或不允许存储NULL值的唯一二级索引进行等值匹配</span></span><br><span class="line"><span class="comment">     * index_subquery：在子查询中使用普通二级索引进行等值匹</span></span><br><span class="line"><span class="comment">     * range：利用索引进行范围查询</span></span><br><span class="line"><span class="comment">     * index：当可以使用索引覆盖，但需要扫描全部索引记录</span></span><br><span class="line"><span class="comment">     * all：全表扫描</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ref&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;possible_keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;idx_composite&quot;</span><span class="punctuation">,</span> <span class="comment">// 可能使用的索引</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;idx_composite&quot;</span><span class="punctuation">,</span> <span class="comment">// 实际使用的索引</span></span><br><span class="line">    <span class="attr">&quot;key_len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;208&quot;</span><span class="punctuation">,</span> <span class="comment">// 实际使用的索引长度</span></span><br><span class="line">    <span class="attr">&quot;ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;const&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用索引列等值查询时，与索引列进行等值匹配的对象信息</span></span><br><span class="line">    <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment">// 预估需要读取的记录行数</span></span><br><span class="line">    <span class="attr">&quot;filtered&quot;</span><span class="punctuation">:</span> <span class="number">100.0</span><span class="punctuation">,</span> <span class="comment">// 过滤后剩余记录行数百分比</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 额外信息：</span></span><br><span class="line"><span class="comment">     * Using index：使用覆盖索引</span></span><br><span class="line"><span class="comment">     * Using index condition：使用索引条件下推</span></span><br><span class="line"><span class="comment">     * Using where：需要在server层判断条件是否成立</span></span><br><span class="line"><span class="comment">     * Using join buffer：执行连接查询时，被驱动表不能有效利用索引加快访问速度时，会分配一块内存用来保存驱动表的查询结果，</span></span><br><span class="line"><span class="comment">       利用join buffer可以减少访问被驱动表的次数</span></span><br><span class="line"><span class="comment">     * Using filesort：</span></span><br><span class="line"><span class="comment">     * Using temporary</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">&quot;Extra&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Using index&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><hr><h4 id="覆盖索引与最左前缀原则实战案例"><a href="#覆盖索引与最左前缀原则实战案例" class="headerlink" title="覆盖索引与最左前缀原则实战案例"></a>覆盖索引与最左前缀原则实战案例</h4><p><strong>回表</strong>：查询需要的字段没有全表包含在索引中，需要根据索引找到主键，再从主键索引中找到数据才能获取所需字段。</p><p><strong>覆盖索引</strong>：查询所需的字段都包含在索引中，无需回表操作。</p><p>优点：</p><ul><li>减少IO操作</li><li>避免回表（减少随机读）</li></ul><p><strong>最左前缀原则</strong>：复合索引 <code>(a, b, c)</code> 的查询条件必须从最左列开始，且不能跳过中间列才能命中索引。</p><p>具体规则：</p><ul><li>等值查询：<code>WHERE a = 1 and b = 2</code> → 命中索引</li><li>范围查询：<code>WHERE a &gt; 1 and b = 2</code> → 仅能命中 <code>a</code> 列</li><li>跳跃查询：<code>WHERE b = 2 and c = 3</code> → 不能能命中索引</li></ul><p>覆盖索引优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">`age` <span class="type">INT</span>,</span><br><span class="line">`city` <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">`created_at` DATETIME,</span><br><span class="line">KEY `idx_composite` (`city`, `age`, `created_at`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>查询需求：统计北京25岁用户的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> city<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> age<span class="operator">=</span><span class="number">25</span>;</span><br></pre></td></tr></table></figure><img src="/post/be632046/image-20250302111116621.png" class="" title="image-20250302111116621"><p>之前的版本<code>Extra</code>中应该是<code>Using where</code>，因为需要回表确认数据是否存在。</p><p>优化方案：添加覆盖索引覆盖统计需要的所有字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> INDEX idx_covering(city, age, id);</span><br></pre></td></tr></table></figure><p>最左前缀索引优化</p><p>查询需求：查询北京地区年龄大于 30 岁的用户，并按注册时间排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> city<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> age<span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><img src="/post/be632046/image-20250302111551681.png" class="" title="image-20250302111551681"><p>从<code>EXPLAIN</code>结果可以看出，这条查询语句需要用到耗时的文件排序，这是因为查询条件中存在范围查询，导致不能完全利用上组合索引。</p><p>优化方案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> INDEX idx_city_created_age(city, created_at, age);</span><br></pre></td></tr></table></figure><img src="/post/be632046/image-20250302112330725.png" class="" title="image-20250302112330725"><p>索引设计规范：</p><ul><li>组合索引字段按区分度从高到低排序</li><li>索引列数≤5列，避免更新开销太大</li><li>禁止<code>SELECT *</code>，尽量查询索引能覆盖的字段</li></ul><p>慢查询优化流程：</p><ol><li>抓取慢日志：<code>long_query_time=1s</code></li><li><code>EXPLAIN</code> 分析执行计划</li><li>检查索引使用情况<ul><li>是否触发覆盖索引</li><li>是否违反最左前缀原则</li></ul></li><li>使用<code>force index</code>验证索引有效性</li><li>调整索引或SQL写法</li></ol><p>监控指标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看索引使用频率</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sys.schema_index_statistics <span class="keyword">WHERE</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检查冗余索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sys.schema_redundant_indexes;</span><br></pre></td></tr></table></figure><hr><h4 id="为什么InnoDB不保存表的总行数"><a href="#为什么InnoDB不保存表的总行数" class="headerlink" title="为什么InnoDB不保存表的总行数"></a>为什么InnoDB不保存表的总行数</h4><p>与MyISAM保存表的总行数不同，InnoDB统计行数需要扫描全表，因为MVCC，同一时刻多个查询返回的行数可能不一致。</p><p>对于需要经常统计表的行数的解决办法：</p><ul><li>在缓存（如 Redis）中保存计数</li><li>在 MySQL 中保存计数</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>count(*)</code></td><td>对于满足条件的数据行按行累加</td></tr><tr><td><code>count(1)</code></td><td>对于满足条件的每一行，放一个 1 进去，按行累加</td></tr><tr><td><code>count(主键)</code></td><td>对于满足条件的每一行，取出主键，判断非 null，按行累加</td></tr><tr><td><code>count(字段)</code></td><td>对于满足条件的每一行，取出字段，判断非 null，按行累加</td></tr></tbody></table><p>性能：<code>count(字段)</code> &lt; <code>count(主键)</code> &lt; <code>count(1)</code> ≈ <code>count(*)</code></p><p><code>count(主键/字段)</code> 的效率更低的原因是需要解析数据行，并拷贝要返回的字段值。</p><hr><h4 id="解释一下事务的基本特性和隔离级别"><a href="#解释一下事务的基本特性和隔离级别" class="headerlink" title="解释一下事务的基本特性和隔离级别"></a>解释一下事务的基本特性和隔离级别</h4><p>事务保证一组操作要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。</p><table><thead><tr><th>基本特性</th><th>说明</th></tr></thead><tbody><tr><td>原子性（<code>atomicity</code>）</td><td>事务中的操作要么全都执行，要么都不执行</td></tr><tr><td>一致性（<code>consistency</code>）</td><td>事务的执行要保证数据的完整性和一致性</td></tr><tr><td>隔离性（<code>isolation</code>）</td><td>事务的执行互不干扰</td></tr><tr><td>持久性（<code>durability</code>）</td><td>事务一旦提交，对数据的修改就永久保存到数据库中，不可撤销</td></tr></tbody></table><table><thead><tr><th>事务可能引发的问题</th><th>说明</th></tr></thead><tbody><tr><td>脏读</td><td>A 事务读取 B 事务尚未提交的修改</td></tr><tr><td>不可重复读</td><td>A 事务多次读取同一数据，结果前后不一致</td></tr><tr><td>幻读</td><td>A 事务多次读取，数据总量前后不一致</td></tr></tbody></table><table><thead><tr><th>隔离级别</th><th>说明</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><code>read uncommitted</code></td><td>一个事务执行过程中，能看到其他未提交事务做的变更</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><code>read committed</code></td><td>一个事务执行过程中，能看到其他已提交事务做的变更（MySQL 会在每个 SQL 语句开始执行时创建一个视图）</td><td></td><td>✓</td><td>✓</td></tr><tr><td><code>repeatable read</code></td><td>一个事务执行过程中，其他事务的变更对它不可见（MySQL 会在事务启动时创建一个视图，整个事务执行期间都使用这个视图）</td><td></td><td></td><td>✓</td></tr><tr><td><code>serializable</code></td><td>事务串行执行，隔离级别最高，不会出现上面所说的问题，但相应的效率也最低</td><td></td><td></td><td></td></tr></tbody></table><hr><h4 id="InnoDB如何解决幻读"><a href="#InnoDB如何解决幻读" class="headerlink" title="InnoDB如何解决幻读"></a>InnoDB如何解决幻读</h4><p>InnoDB解决幻读主要靠以下三大核心机制：</p><ul><li>多版本并发控制（<code>MVCC</code>）</li><li>间隙锁（<code>Gap Lock</code>）</li><li>临键锁（<code>Next-Key Lock</code>）</li></ul><p><strong><code>MVCC</code>实现原理：</strong></p><ul><li><code>Undo log</code>：每条数据维护多个历史版本</li><li><code>ReadView</code>：快照</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReadView结构：</span><br><span class="line">&#123;</span><br><span class="line">  creator_trx_id: 150,      -- 当前事务ID</span><br><span class="line">  m_ids: [100, 120, 140],   -- 活跃事务ID列表</span><br><span class="line">  min_trx_id: 100,          -- 最小活跃事务ID</span><br><span class="line">  max_trx_id: 150           -- 预分配最大事务ID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可见性判断规则</strong>：</p><ol><li>数据版本<code>trx_id</code> &lt; <code>min_trx_id</code> → 可见</li><li><code>trx_id</code>在<code>m_ids</code>中 → 不可见</li><li><code>trx_id</code> &gt;&#x3D; <code>max_trx_id</code> → 不可见</li></ol><p>InnoDB默认会为每行数据生成两个隐藏列：</p><ul><li><code>DB_TRX_ID</code>：最后修改该行的事务ID</li><li><code>DB_ROLL_PTR</code>：指向<code>Undo Log</code>的回滚指针</li></ul><p>不同隔离级别下<code>ReadView</code>的生成时机：</p><ul><li><code>READ COMMITTED(RC)</code>：每次<code>SELECT</code>都会创建新的<code>ReadView</code></li><li><code>REPEATABLE READ(RR)</code>：事务中第一次<code>SELECT</code>时创建<code>ReadView</code></li></ul><p><strong>间隙锁（<code>Gap Lock</code>）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表数据：5, 10, 15</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">AND</span> id <span class="operator">&lt;</span> <span class="number">20</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>这条语句会锁定区间 <code>(10, 15)</code>、<code>(15, +∞)</code>，在事务执行期间，其他事务无法在这两个区间插入数据</p><p><strong>临键锁（<code>Next-Key Lock</code>）</strong></p><p><strong>Q1：RR隔离级别如何既使用MVCC又用锁？</strong></p><ul><li><strong>快照读</strong>（普通SELECT）：依赖MVCC保证一致性</li><li><strong>当前读</strong>（SELECT FOR UPDATE）：使用临键锁保证物理数据一致</li></ul><p><strong>Q2：Gap Lock是否会导致死锁？</strong></p><p>间隙锁是有可能导致死锁的，如：事务A锁(5,10)，事务B锁(10,15)，两者同时请求对方区间的插入</p><p>解决方案：设置<code>innodb_deadlock_detect=ON</code>（默认开启检测）</p><p><strong>Q3：Purge线程的作用是什么？</strong></p><p>清理不再被任何事务需要的<code>Undo Log</code>，回收版本链中的过期数据版本</p><hr><h4 id="InnoDB和MyISAM的区别"><a href="#InnoDB和MyISAM的区别" class="headerlink" title="InnoDB和MyISAM的区别"></a>InnoDB和MyISAM的区别</h4><ol><li>数据的存储方式：MyISAM使用表级锁，而InnoDB使用行级锁。这意味着，在并发访问的情况下，InnoDB的并发性能更好。</li><li>事务支持：MyISAM不支持事务，而InnoDB支持事务，可以保证数据的一致性和完整性。</li><li>索引结构：MyISAM使用B树索引，而InnoDB使用B+树索引。B+树索引相对于B树索引，可以支持更快的范围查询和排序。</li><li>外键约束：MyISAM不支持外键约束，而InnoDB支持外键约束。</li><li>全文检索：MyISAM支持全文检索，而InnoDB不支持。</li><li>表空间管理：MyISAM每张表保存为三个文件（.frm、.MYD、.MYI），而InnoDB每张表只保存为一个文件。</li><li>内存和CPU的使用：MyISAM更注重查询的速度，因此会使用更多的内存和CPU资源，而InnoDB更注重事务的处理，因此会使用更多的磁盘I&#x2F;O资源。</li></ol><p>总体来说，如果需要支持事务、外键约束和高并发访问，那么InnoDB是更好的选择。如果需要进行全文检索，那么MyISAM是更好的选择。但是需要注意的是，MySQL 5.5版本之后，InnoDB已经支持了全文检索。</p><p><font color="red">为什么InnoDB不保存表行数？</font></p><p>InnoDB有个多版本并发控制的概念，这会导致不同的事务查询表的行数会获得不同的结果，因此维护一个表的行数没有意义。</p><p>需要注意的是，在使用InnoDB存储引擎时，通过类似<code>SELECT COUNT(*) FROM table</code>这样的查询来获取表的行数并不是一个好的做法，这种方式会遍历整张表，造成性能问题。如果需要获取准确的表的行数，可以通过查询<code>SHOW TABLE STATUS</code>的结果来获取。</p><hr><h4 id="为什么有时索引会失效或选错索引"><a href="#为什么有时索引会失效或选错索引" class="headerlink" title="为什么有时索引会失效或选错索引"></a>为什么有时索引会失效或选错索引</h4><hr><h4 id="如何优化查询"><a href="#如何优化查询" class="headerlink" title="如何优化查询"></a>如何优化查询</h4><ol><li>编写高效的查询语句：合理编写查询语句是查询优化的基础。避免使用复杂的嵌套查询和子查询，尽量使用简单的查询语句；避免使用过多的通配符，尽量指定具体的查询条件；使用合适的连接方式，如INNER JOIN、LEFT JOIN、RIGHT JOIN等；避免使用不必要的排序和分组。</li><li>使用索引：合理使用索引可以显著提高查询性能。在查询条件中频繁使用的列上创建索引，避免在大表上进行全表扫描。</li><li>避免使用SELECT *：在查询时，避免使用SELECT *，而是只选择需要的列。这样可以减少数据库传输和处理的数据量，提高查询效率。</li><li>优化子查询和嵌套查询：子查询和嵌套查询可能导致查询性能下降，尽量避免在查询中多次嵌套子查询。可以考虑使用连接（JOIN）操作、临时表等替代子查询，从而优化查询性能。</li><li>使用合适的数据类型：在数据库设计和查询中，使用合适的数据类型可以避免数据类型转换和隐式转换，提高查询性能。例如，对于整数类型的列，使用整数类型的数据而不是字符类型的数据，可以提高查询效率。</li></ol><hr><h4 id="为什么有时只查询一行但是很慢"><a href="#为什么有时只查询一行但是很慢" class="headerlink" title="为什么有时只查询一行但是很慢"></a>为什么有时只查询一行但是很慢</h4><ol><li>数据库表中数据量增加：随着表中数据量的增加，查询一行的时间可能会变得更长。</li><li>索引失效：如果查询条件中使用的列没有索引，或者索引失效（例如索引统计信息过期或者索引损坏），数据库可能会执行全表扫描或者其他低效的查询方法，从而导致查询一行的性能下降。</li><li>查询复杂度增加：如果查询的复杂度增加，例如涉及到多个表的联接、子查询、聚合函数等，查询一行的性能可能会受到影响。</li><li>数据库服务器负载增加：如果数据库服务器负载增加，例如同时有大量的查询和写入操作，数据库的性能可能会下降，从而导致查询一行变得很慢。</li></ol><hr><h4 id="慢SQL优化全流程"><a href="#慢SQL优化全流程" class="headerlink" title="慢SQL优化全流程"></a>慢SQL优化全流程</h4><p><strong>阶段1：问题定位与数据采集</strong></p><ul><li>开启慢日志查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 动态开启（重启失效）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 阈值设为1秒</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;/var/log/mysql/slow.log&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 永久配置（my.cnf）</span><br><span class="line">[mysqld]</span><br><span class="line">slow_query_log = 1</span><br><span class="line">long_query_time = 1</span><br><span class="line">log_queries_not_using_indexes = 1  -- 记录未走索引的查询</span><br></pre></td></tr></table></figure><ul><li>实时监测工具</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前运行中的慢查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.PROCESSLIST </span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">TIME</span> <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">AND</span> COMMAND <span class="operator">=</span> <span class="string">&#x27;Query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用Percona Toolkit抓取问题SQL</span></span><br><span class="line">pt<span class="operator">-</span>query<span class="operator">-</span>digest <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysql<span class="operator">/</span>slow.log</span><br></pre></td></tr></table></figure><ul><li>关键性能指标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重点监控项：</span><br><span class="line">- QPS/TPS波动</span><br><span class="line">- CPU使用率（特别是%sys）</span><br><span class="line">- 锁等待时间(Innodb_row_lock_time_avg)</span><br><span class="line">- 缓冲池命中率(Innodb_buffer_pool_reads)</span><br></pre></td></tr></table></figure><ol><li>主从同步原理（binlog格式差异）</li><li>分库分表策略（基因法 vs 时间分片）</li><li>死锁产生条件与排查方法（show engine innodb status）</li><li>大数据量count优化方案</li><li>线上DDL操作风险与pt-osc原理</li><li>索引下推与MRR优化原理</li><li>连接池参数配置与监控要点</li><li>双写一致性保障方案（延迟双删）</li><li>大数据量导出导致OOM的解决方案</li><li>线上事故：误删数据如何快速恢复？</li></ol><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ol><li>对象内存布局（对象头对齐）</li><li>类加载过程（双亲委派破坏场景）</li><li>G1收集器Mixed GC过程解析</li><li>线上Full GC频繁的排查思路</li><li>内存泄漏定位（MAT使用技巧）</li><li>方法区演进（永久代-&gt;元空间）</li><li>四种引用类型与缓存设计应用</li><li>Arthas热更新代码原理</li><li>逃逸分析与栈上分配</li><li>ZGC颜色指针实现原理</li></ol><h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><ol><li>synchronized锁升级过程</li><li>AQS实现原理（以ReentrantLock为例）</li><li>ConcurrentHashMap分段锁演进</li><li>线程池参数动态调整方案</li><li>ThreadLocal内存泄漏问题</li><li>CompletableFuture编排异步任务</li><li>volatile内存屏障实现原理</li><li>如何设计百万级QPS的计数系统？</li><li>限制接口调用次数的5种方案</li><li>Happens-Before规则实战应用</li><li>异步编程的异常处理要点</li><li>无锁队列实现（CAS应用）</li></ol><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ol><li>循环依赖解决原理（三级缓存）</li><li>Spring事务失效的7种场景</li><li>Bean生命周期扩展点实战</li><li>动态代理选择策略（CGLib vs JDK）</li><li>SpringBoot自动配置原理</li><li>自定义Starter开发要点</li><li>如何设计可插拔的功能模块？</li><li>统一异常处理的最佳实践</li><li>配置加载优先级（命令行&gt;环境变量）</li><li>如何实现接口幂等性？</li></ol><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><ol><li>服务注册发现AP与CP架构对比</li><li>熔断降级策略（滑动窗口实现）</li><li>分布式配置中心推拉模式对比</li><li>灰度发布实现方案</li><li>分布式链路追踪原理（Span树）</li><li>Seata AT模式实现原理</li><li>服务网格Sidecar设计理念</li><li>接口性能突增的限流策略</li><li>如何设计服务治理平台？</li><li>跨库事务解决方案</li></ol><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ol><li>分布式ID生成方案（雪花算法优化）</li><li>一致性Hash算法虚拟节点设计</li><li>分布式锁的三种实现方式对比</li><li>分布式Session解决方案</li><li>如何实现最终一致性（消息表+重试）</li><li>分库分表后分页查询方案</li><li>分布式事务最大努力通知型实现</li><li>数据同步方案（canal+MQ）</li><li>高并发下单系统设计（库存扣减）</li><li>分布式缓存更新策略（Cache Aside）</li><li>分布式系统时钟同步问题</li><li>脑裂问题解决方案</li></ol><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ol><li>Kafka高吞吐量实现原理</li><li>消息丢失与重复消费解决方案</li><li>顺序消息实现方案</li><li>延迟消息实现原理</li><li>死信队列应用场景</li><li>消息堆积处理策略</li><li>RocketMQ事务消息流程</li><li>Pulsar分层存储架构优势</li><li>如何设计消息轨迹系统？</li><li>Broker选举机制对比（Kafka vs RocketMQ）</li></ol><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><ol><li>动态代理在RPC中的应用</li><li>如何设计可扩展的序列化协议？</li><li>连接池管理策略（饿汉式 vs 懒汉式）</li><li>超时控制与重试策略设计</li><li>如何实现跨语言调用？</li><li>熔断限流在RPC层的实现</li><li>分布式跟踪上下文传递方案</li><li>服务端线程模型对比（Netty vs Tomcat）</li></ol><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><ol><li>设计微信朋友圈的存储架构</li><li>短链系统如何实现高并发写入？</li><li>分布式唯一ID生成方案（Snowflake优化）</li><li>如何设计一个分布式定时任务系统？</li><li>实现跨数据中心的数据同步方案</li><li>设计支持千万级用户的推送系统</li><li>微博热搜榜实时计算架构设计</li><li>电商库存扣减的防超卖方案</li><li>多级缓存架构设计（本地缓存+Redis+JVM）</li><li>设计支持PB级数据的日志分析系统</li><li>实现一个分布式配置中心</li><li>设计支持动态扩容的分库分表方案</li><li>如何设计API网关的限流熔断功能？</li><li>实时聊天系统的消息可靠投递方案</li><li>设计支持版本回滚的配置管理系统</li><li>实现跨语言服务调用（Thrift&#x2F;gRPC选型）</li><li>设计支持弹性伸缩的微服务架构</li><li>实现分布式Session一致性方案</li><li>设计一个高性能的日志采集系统</li><li>如何设计可追溯的操作日志系统？</li></ol><h3 id="云原生与容器化"><a href="#云原生与容器化" class="headerlink" title="云原生与容器化"></a>云原生与容器化</h3><ol><li>Kubernetes Pod调度策略（亲和性&#x2F;反亲和性）</li><li>Service Mesh中Sidecar模式的工作原理</li><li>Docker镜像分层原理与优化技巧</li><li>如何实现K8s集群的蓝绿发布？</li><li>Ingress与LoadBalancer的使用场景对比</li><li>容器网络模型（CNI）的实现原理</li><li>K8s中ConfigMap的热更新方案</li><li>如何排查容器内Java应用内存泄漏？</li><li>HPA自动扩缩容的指标采集方案</li><li>容器安全扫描与漏洞管理方案</li><li>有状态服务在K8s中的部署实践</li><li>如何实现跨集群的服务发现？</li><li>K8s中PV&#x2F;PVC的动态供给实现</li><li>容器日志收集的EFK架构实践</li><li>如何设计多租户的K8s集群？</li><li>Serverless冷启动优化方案</li><li>K8s中Pod的优雅终止流程</li><li>容器逃逸攻击的原理与防御</li><li>如何实现K8s集群的灾备方案？</li><li>基于Prometheus的自定义监控指标开发</li></ol><h3 id="架构设计模式"><a href="#架构设计模式" class="headerlink" title="架构设计模式"></a>架构设计模式</h3><ol><li>如何实现熔断器模式（Circuit Breaker）？</li><li>CQRS模式在电商系统中的应用</li><li>事件溯源（Event Sourcing）的优缺点分析</li><li>Sidecar模式在服务治理中的应用</li><li>网关模式中的路由策略设计</li><li>防腐层（Anti-Corruption Layer）设计实践</li><li>领域驱动设计（DDD）中的聚合根设计</li><li>重试模式中的指数退避算法实现</li><li>前端的后端模式（BFF）适用场景</li><li>分片模式（Sharding）的数据迁移方案</li><li>管道过滤器模式在ETL中的应用</li><li>物化视图模式优化查询性能案例</li><li>策略模式在支付渠道选择中的应用</li><li>观察者模式实现配置动态更新</li><li>代理模式在缓存穿透防护中的应用</li><li>工厂方法模式在连接池创建中的应用</li><li>装饰器模式实现API限流功能</li><li>状态模式在订单状态流转中的应用</li><li>组合模式实现权限树结构设计</li><li>模板方法模式在事务管理中的应用</li></ol><h3 id="工程实践与软技能"><a href="#工程实践与软技能" class="headerlink" title="工程实践与软技能"></a>工程实践与软技能</h3><ol><li>Git大型二进制文件存储优化方案</li><li>如何设计Code Review流程提升代码质量？</li><li>线上故障的标准化处理流程（SOP）</li><li>技术债务管理与重构策略</li><li>多团队协作中的接口版本管理方案</li><li>如何推动团队落地代码规范？</li><li>技术方案文档的撰写要点（含示例）</li><li>性能压测中的拐点分析方法</li><li>灰度发布中的流量染色方案</li><li>如何设计可观测性体系（Metrics&#x2F;Logs&#x2F;Traces）</li><li>研发流程中的流水线优化（CI&#x2F;CD）</li><li>技术选型的多维评估模型</li><li>遗留系统改造的渐进式方案</li><li>如何设计灾备演练方案？</li><li>容量规划中的峰值估算方法</li><li>生产环境调试的合规性方案</li><li>技术方案评审的常见陷阱</li><li>如何构建开发者体验（DX）体系？</li><li>技术TL的跨团队协作技巧</li><li>技术决策的沟通与推进策略</li></ol><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ol><li>用户态与内核态切换的开销来源？</li><li>进程间通信IPC的5种方式对比</li><li>虚拟内存与物理内存映射原理（页表寻址）</li><li>死锁的必要条件及银行家算法实现</li><li>自旋锁与互斥锁的使用场景差异</li><li>零拷贝技术实现原理（sendfile&#x2F;mmap）</li><li>孤儿进程与僵尸进程的区别及处理</li><li>CPU软中断与硬中断处理机制</li><li>如何用top命令分析CPU负载异常？</li><li>内存泄漏与内存溢出的定位方法</li><li>大页内存（HugePage）优化原理</li><li>协程与线程的调度效率差异</li><li>文件描述符（fd）耗尽如何处理？</li><li>CPU缓存行伪共享问题解决方案</li><li>NUMA架构下的性能调优要点</li><li>系统调用过程详解（int 0x80&#x2F;syscall）</li><li>实时操作系统与非实时系统的调度差异</li><li>容器与虚拟机的资源隔离原理对比</li><li>如何实现一个简单的线程池？</li><li>系统平均负载（Load Average）的深层含义</li></ol><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ol><li>TCP三次握手与四次挥手的状态变迁图</li><li>TIME_WAIT状态过多如何优化？</li><li>HTTPS双向认证流程与中间人攻击防范</li><li>QUIC协议如何解决队头阻塞问题？</li><li>TCP拥塞控制算法（CUBIC&#x2F;BBR）</li><li>HTTP&#x2F;2多路复用与队头阻塞解决方案</li><li>Websocket握手协议与心跳机制实现</li><li>DNS解析过程（递归查询与迭代查询）</li><li>CDN动态加速与静态加速技术原理</li><li>如何设计一个高并发连接的服务端？</li><li>长连接保活策略（TCP Keepalive vs 应用层心跳）</li><li>网络抓包分析实战（Wireshark过滤技巧）</li><li>单机百万连接的实现与优化</li><li>HTTP Range请求与断点续传实现</li><li>5层协议栈中每层的典型设备</li><li>VLAN与VXLAN的区别及使用场景</li><li>如何实现UDP可靠传输？</li><li>MTU与MSS的关系及分片问题</li><li>SYN Flood攻击原理与防御方案</li><li>TLS1.3相比1.2的核心改进点</li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol><li>HTTPS握手过程优化策略</li><li>零拷贝技术实现原理</li><li>百万连接服务器架构设计</li><li>线上CPU飙高排查流程</li><li>设计一个短链系统</li><li>接口性能优化全链路方案</li><li>海量数据判重方案（布隆过滤器）</li><li>如何设计秒杀系统？</li><li>大型项目代码规范落地实践</li><li>线上问题排查工具箱（arthas+prometheus）</li><li>技术方案文档编写要点</li></ol><h2 id="2-关键准备建议"><a href="#2-关键准备建议" class="headerlink" title="2. 关键准备建议"></a>2. 关键准备建议</h2><ol><li><strong>深度优先原则</strong>：每个技术栈准备3-5个可深入讲解的案例</li><li><strong>STAR法则训练</strong>：将项目经历整理成冲突-行动-结果的故事模板</li><li><strong>白板编程练习</strong>：每天1道LeetCode中等难度题（重点：链表&#x2F;树&#x2F;DFS）</li><li><strong>架构图绘制</strong>：准备可手绘的微服务架构图&#x2F;数据库分片图</li><li><strong>压力面试模拟</strong>：找同伴进行”为什么选择这个方案”的连续追问训练</li></ol><p>建议每天拿出2小时进行专题突破+1小时模拟面试。如果需要某个方向的详细解析或答案模板，可以告诉我具体方向，我会提供更深入的材料。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/post/8eda3648.html"/>
      <url>/post/8eda3648.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>OBJECT ENCODING key</code></td><td>查看key的底层数据结构</td></tr><tr><td><code>TYPE key</code></td><td>查看键的类型</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="简单动态字符串"><a href="#简单动态字符串" class="headerlink" title="简单动态字符串"></a>简单动态字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="comment">// SDS字符串长度，记录buf数组中已使用字节的数量</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录buf数组中未使用的字节数量</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字节数组，用于保存字符串</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SDS的作用：</p><ul><li>保存字符串对象的值</li><li>AOF缓冲区</li><li>客户端状态的输入缓冲区</li></ul><p>SDS与C字符串的区别：</p><table><thead><tr><th align="left">SDS</th><th align="left">C字符串</th></tr></thead><tbody><tr><td align="left">获取字符串长度的时间复杂度为 <code>O(1)</code></td><td align="left">获取字符串长度的时间复杂度为 <code>O(N)</code></td></tr><tr><td align="left">不会造成缓冲区溢出</td><td align="left">可能造成缓冲区溢出</td></tr><tr><td align="left">通过预分配和惰性回收策略，减少了修改字符串时内存重分配的次数</td><td align="left">每一次修改字符串都会执行内存重分配</td></tr><tr><td align="left">既可以保存文本数据，也可以保存二进制数据</td><td align="left">只能保存文本数据</td></tr></tbody></table><p>SDS的内存分配策略：</p><ul><li>空间预分配<ul><li>修改之后，SDS的长度小于1MB，预分配与len属性同样大小的未使用空间</li><li>修改之后，SDS的长度大于1MB，预分配1MB大小的未使用空间</li></ul></li><li>空间惰性释放</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="type">void</span> *value;</span><br><span class="line">&#125; listNode;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="comment">// 头节点</span></span><br><span class="line">    listNode *head;</span><br><span class="line">    <span class="comment">// 尾节点</span></span><br><span class="line">    listNode *tail;</span><br><span class="line">    <span class="comment">// 链表包含的节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表的作用：</p><ul><li>list的底层实现之一</li><li>发布和订阅</li><li>慢查询</li><li>监视器</li><li>保存客户端的状态</li><li>客户端输出缓冲区</li></ul><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    <span class="comment">// 键</span></span><br><span class="line">    <span class="type">void</span> *key;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指向下一个节点，用来解决哈希冲突</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="comment">// 哈希表大小</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line">    <span class="comment">// 用于计算索引值，总是等于 size-1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sizemask;</span><br><span class="line">    <span class="comment">// 已有节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字典</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="type">void</span> *privdata;</span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// rehash索引</span></span><br><span class="line">    <span class="comment">// 当rehash不在进行时，值为-1</span></span><br><span class="line">    <span class="type">int</span> rehashidx;</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>字典的作用：</p><ul><li>Redis数据库的底层实现</li><li>hash的底层实现之一</li></ul><p><strong>rehash</strong></p><p><code>ht[1]</code>空间大小分配策略：</p><ul><li>扩展操作：<code>ht[1].size</code>为第一个大于等于<code>ht[0].used*2</code>的<code>2^n</code>，比如<code>ht[0].used</code>为7，那么<code>ht[1].size</code>就会被设置为16</li><li>收缩操作：<code>ht[1].size</code>为第一个大于等于<code>ht[0].used</code>的<code>2^n</code>，比如<code>ht[0].used</code>为7，那么<code>ht[1].size</code>就会被设置为8</li></ul><p>负载因子：<code>load_factor = ht[0].used / ht[0].size</code></p><p>rehash触发条件：</p><ul><li><p>扩展</p><ul><li><p>服务器目前没有在执行<code>BGSAVE</code>或<code>BGREWRITEAOF</code>命令，且负载因子大于等于1</p></li><li><p>服务器目前正在执行<code>BGSAVE</code>或<code>BGREWRITEAOF</code>命令，且负载因子大于等于5</p></li></ul></li><li><p>收缩</p><ul><li>负载因子小于0.1</li></ul></li></ul><p>说明：<code>BGSAVE</code>或<code>BGREWRITEAOF</code>在执行时，Redis会创建当前服务器进程的子进程，系统采用写时复制（copy-on-write）技术来优化子进程的内存空间使用效率。此时提高负载因子，可以避免主进程进行rehash，从而避免子进程复制更多的内存。</p><p>渐进式rehash：</p><ul><li>为<code>ht[1]</code>分配空间，同时使用两个哈希表</li><li><code>ht[0]</code>只执行非添加操作</li><li>每次执行操作增删改查操作时，顺带将<code>ht[0]</code>上索引值为<code>rehashidx</code>的键值对rehash到<code>ht[1]</code></li><li>当<code>ht[0]</code>为空时，交换两个哈希表，<code>ht[1]</code>置为空，<code>rehashidx</code>置为-1</li></ul><h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳跃表节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    <span class="comment">// 成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">        <span class="comment">// 跨度</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> span;</span><br><span class="line">    &#125; level[];</span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳跃表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">skiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">    <span class="comment">// 节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> length;</span><br><span class="line">    <span class="comment">// 最大层数</span></span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">&#125; zskiplit;</span><br></pre></td></tr></table></figure><p>跳跃表的作用：</p><ul><li>zset的底层实现</li><li>集群节点的内部数据结构</li></ul><p>Q：跳跃表如何查找数据</p><h3 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> encoding;</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="type">uint32_t</span> length;</span><br><span class="line">    <span class="comment">// 保存元素的数组</span></span><br><span class="line">    <span class="type">int8_t</span> contents[];</span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>整数集合的作用：</p><ul><li>set的底层实现之一</li></ul><h3 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h3><p>压缩列表的作用：</p><ul><li>list的底层实现之一</li><li>hash的底层实现之一</li></ul><p>压缩列表潜在的问题：</p><ul><li>可能导致连锁更新</li></ul><h3 id="快速列表"><a href="#快速列表" class="headerlink" title="快速列表"></a>快速列表</h3><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型：REDIS_STRING、REDIS_LIST、REDIS_HASH、REDIS_SET、REDIS_ZSET</span></span><br><span class="line">    <span class="type">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    <span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 指向底层实现数据结构的指针</span></span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>编码的转换：</p><ul><li>如果保存的是整数，<code>OBJECT ENCODING key</code> 返回的就是<code>int</code></li><li>如果保存的是短字符串（小于39字节），<code>OBJECT ENCODING key</code> 返回的就是<code>embstr</code></li><li>如果保存的是长字符串（大于39字节），<code>OBJECT ENCODING key</code> 返回的就是<code>raw</code></li></ul><p><code>embstr</code> 与 <code>raw</code> 的区别</p><ul><li>减少内存分配和释放的次数</li></ul><h3 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h3><p>编码转换：同时满足以下两个条件时，使用<code>ziplist</code>编码，否则使用<code>linkedlist</code>编码</p><ul><li>列表保存的所有字符串长度都小于64字节</li><li>列表保存的元素数量小于512个</li></ul><p>通过配置<code>list-max-ziplist-value</code>和<code>list-max-ziplist-entries</code>可以修改</p><h3 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h3><p>编码转换：同时满足以下两个条件时，使用<code>ziplist</code>编码，否则使用<code>hashtable</code>编码</p><ul><li>哈希对象保存的所有键值对的键和值的长度都小于64字节</li><li>哈希对象保存的键值对数量小于512个</li></ul><p>通过配置<code>hash-max-ziplist-value</code>和<code>hash-max-ziplist-entries</code>可以修改</p><h3 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h3><p>编码转换：同时满足以下两个条件时，使用<code>intset</code>编码，否则使用<code>hashtable</code>编码</p><ul><li>集合保存的都是整数值</li><li>集合保存的元素不超过512个</li></ul><p>通过配置<code>set-max-ziplist-entries</code>可以修改</p><h3 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h3><p>有序集合的编码可以时<code>ziplist</code>和<code>skiplist</code></p><p><code>skiplist</code>编码的有序集合对象使用<code>zset</code>结构作为底层实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">    dict *dict;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure><p><code>zskiplist</code>支持范围操作，<code>dict</code>支持快速找到指定成员的<code>score</code>。</p><p><code>zskiplist</code>和<code>dict</code>通过指针共享相同元素的成员和分值，因此不会浪费额外的内存。</p><p>编码转换：同时满足以下两个条件，使用<code>ziplist</code>编码，否则使用<code>skiplist</code>编码</p><ul><li>元素数量小于128</li><li>元素长度小于64字节</li></ul><p>通过配置<code>zset-max-ziplist-value</code>和<code>zset-max-ziplist-entries</code>可以修改</p><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><ul><li><code>Cache Aside</code>：业务方更新数据库时，同步更新缓存</li><li><code>Read/Write Through</code>：缓存和数据库整合为一个服务，业务方只需调用该服务，由该服务保证数据的一致性</li><li><code>Write Behind</code>：业务方只操作缓存，由其他线程异步更新缓存，保证最终一致性</li></ul><p>通常业务中会使用<code>Cache Aside</code></p><ul><li>读操作：缓存命中直接返回；缓存未命中，查询数据库并写入缓存（设置超时时间）</li><li>写操作：先写数据库，再删缓存（出现并发问题的概率低一点）</li></ul><h2 id="缓存穿透-雪崩-击穿"><a href="#缓存穿透-雪崩-击穿" class="headerlink" title="缓存穿透&#x2F;雪崩&#x2F;击穿"></a>缓存穿透&#x2F;雪崩&#x2F;击穿</h2><h2 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h2><p>Jedis：以Redis命令名作为方法名称，学习成本低。但是Jedis实例是线程不安全的，多线程环境下需要基于线程池使用。</p><p>Lettuce：基于Netty实现，支持同步、异步、响应式编程，线程安全，且支持Redis的集群模式、哨兵模式和管道模式。</p><h2 id="RedisTemplate序列化"><a href="#RedisTemplate序列化" class="headerlink" title="RedisTemplate序列化"></a>RedisTemplate序列化</h2><h3 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a><code>RedisTemplate</code></h3><p>自定义<code>RedisTemplate</code>，修改序列化器为<code>StringRedisSerializer</code>和<code>Jackson2JsonRedisSerializer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">    redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">    redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">    redisTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用<code>RedisTemplate</code>缓存对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRedisTemplateOpsForValue</span><span class="params">()</span> &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user:1&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhang3&quot;</span>, <span class="number">18</span>));</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">    System.out.println(((User) o));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.example.redis.entity.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhang3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现，使用<code>RedisTemplate</code>缓存对象，在将对象缓存成字符串时会加上对象的类型，额外增加了存储开销。</p><h3 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a><code>StringRedisTemplate</code></h3><p>使用<code>StringRedisTemplate</code>，在将对象写入Redis前，手动将对象转成<code>json</code>；从Redis读取时，再手动将<code>json</code>转成对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testStringRedisTemplateOpsForValue</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">User</span> <span class="variable">li4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;li4&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">li4Json</span> <span class="operator">=</span> objectMapper.writeValueAsString(li4);</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:2&quot;</span>, li4Json);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:2&quot;</span>);</span><br><span class="line">    System.out.println(objectMapper.readValue(s, User.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;li4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到，使用<code>StringRedisTemplate</code>缓存对象，不会增加对象类型，减少了内存开销。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SitePool</title>
      <link href="/post/4f234c34.html"/>
      <url>/post/4f234c34.html</url>
      
        <content type="html"><![CDATA[<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul><li>EnvFile</li><li>GitToolBox</li><li>MapStruct Support</li><li>Maven Helper</li><li>MyBatisX</li><li>RestfulToolkit-fix</li><li>SequenceDiagram</li><li>Statistics</li></ul><h3 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h3><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><a href="https://www.gutenberg.org/">Gutenberg</a>：A library of over 75,000 free eBooks</li><li><a href="https://www.wordhippo.com/">wordhippo</a>：Thesaurus and word tools for your creative needs</li><li><a href="https://www.thisamericanlife.org/">This American Life</a></li></ul><h2 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h2><ul><li><a href="https://www.magnumphotos.com/">MAGNUM</a></li><li><a href="https://500px.com/">500px</a></li></ul><h2 id="棋类"><a href="#棋类" class="headerlink" title="棋类"></a>棋类</h2><ul><li><a href="https://ku10.com/">五子棋课程</a></li><li><a href="https://www.101weiqi.com/">101围棋网</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reids集群搭建</title>
      <link href="/post/75b7478e.html"/>
      <url>/post/75b7478e.html</url>
      
        <content type="html"><![CDATA[<h2 id="主从集群"><a href="#主从集群" class="headerlink" title="主从集群"></a>主从集群</h2><h3 id="主从同步原理"><a href="#主从同步原理" class="headerlink" title="主从同步原理"></a>主从同步原理</h3><p>主从同步流程如图：</p><img src="/post/75b7478e/image-20250219200529477.png" class="" title="image-20250219200529477"><p>主从同步优化：</p><ul><li>在master中配置<code>repl-diskless-sync yes</code>启用无磁盘复制，避免全量复制时的磁盘IO</li><li>单节点上Redis占用内存不要太大，减少RDB文件的大小</li><li>适当提高<code>repl_log</code>的大小，发现slave宕机时尽快实现故障恢复，避免全量复制</li></ul><h3 id="集群搭建测试"><a href="#集群搭建测试" class="headerlink" title="集群搭建测试"></a>集群搭建测试</h3><p>下图就是一个简单的主从集群，如图所示，集群包含一个主节点，两个从节点。主节点负责写操作，从节点负责读操作</p><img src="/post/75b7478e/image-20250217231959576.png" class="" title="image-20250217231959576"><p>下面在虚拟机中利用docker容器搭建这样一个主从集群，首先确保容器中有redis镜像，如果没有，可以通过 <code>docker pull</code> 命令拉取。</p><p>接着通过<code>docker-compose.yaml</code>文件构建集群，文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">r1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">r1</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;7001&quot;</span>]</span><br><span class="line">  <span class="attr">r2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">r2</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;7002&quot;</span>]</span><br><span class="line">  <span class="attr">r3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">r3</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;7003&quot;</span>]</span><br></pre></td></tr></table></figure><p>在<code>docker-compose.yaml</code>文件所在目录执行<code>docker compose up -d</code>命令启动容器：</p><img src="/post/75b7478e/image-20250217233502378.png" class="" title="image-20250217233502378"><p>通过<code>docker compse</code>命令启动了3个redis实例，但这3个实例还未组成集群，因为它们之间没有主从关系。主从关系可以通过如下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis5.0以前</span></span><br><span class="line">$ slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"><span class="comment"># redis5.0以后</span></span><br><span class="line">$ replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>主从关系的配置有两种生效方式：</p><ul><li>永久生效：在<code>redis.conf</code>文件中利用<code>slaveof</code>制定<code>master</code>节点</li><li>临时生效：通过<code>redis-cli</code>连接到redis实例，并执行<code>slaveof</code>命令指定<code>master</code>节点</li></ul><p>下面演示临时生效方式配置主从关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接r2</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it r2 redis-cli -p 7002</span><br><span class="line">127.0.0.1:7002&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:758df4b32faf526a279240093645cc45984d0502</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:7002&gt; slaveof 192.168.33.11 7001</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.33.11</span><br><span class="line">master_port:7001</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:14</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5519e1a0e085620420c0a7afa2ccc5bf71826a52</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接r3，并执行相同操作</span></span><br></pre></td></tr></table></figure><p>接着连接r1并通过<code>info replication</code>查看节点的从节点信息，可以发现r1是<code>master</code>节点，并且有两个从节点</p><img src="/post/75b7478e/image-20250217235009950.png" class="" title="image-20250217235009950"><p>测试写操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r1</span></span><br><span class="line">127.0.0.1:7001&gt; <span class="built_in">set</span> num 123</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; get num</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line">127.0.0.1:7001&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># r2或r3</span></span><br><span class="line">127.0.0.1:7003&gt; <span class="built_in">set</span> num 456</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br><span class="line"><span class="string">127.0.0.1:7003&gt; get num</span></span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:7003&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，从节点只能执行读操作。</p><h2 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h2><p>主从集群降低了节点的读写压力，但是存在单点故障的风险。master节点如果宕机，就会导致整个集群不可用。Redis的哨兵机制可以通过哨兵节点来监控集群状态，当某个节点出现故障，能及时地进行故障转移，从而保证集群的高可用性。</p><h3 id="哨兵工作原理"><a href="#哨兵工作原理" class="headerlink" title="哨兵工作原理"></a>哨兵工作原理</h3><p>哨兵集群的示意图如下：</p><img src="/post/75b7478e/image-20250219214812553.png" class="" title="image-20250219214812553"><p>哨兵的作用包括：</p><ul><li>监控集群中redis节点的状态</li><li>故障恢复(failover)：如果master故障，哨兵会将其中一个slave提升为新的master，旧master恢复后会变为新master的slave</li><li>状态通知：当集群发生failover后，哨兵会将最新的集群信息推送给客户端</li></ul><h4 id="状态监控"><a href="#状态监控" class="headerlink" title="状态监控"></a>状态监控</h4><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><h2 id="源码环境搭建"><a href="#源码环境搭建" class="headerlink" title="源码环境搭建"></a>源码环境搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone 源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/redis/redis.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入redis目录</span></span><br><span class="line">$ <span class="built_in">cd</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从制定tag创建分支</span></span><br><span class="line">$ git checkout tags/7.0.5 -b 7.0.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否安装了gcc编译器</span></span><br><span class="line">$ gcc -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有制定以下命令安装</span></span><br><span class="line">$ xcode-select --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在redis目录执行如下命令编译源码</span></span><br><span class="line"><span class="comment"># -O0 表示不要优化代码，防止在Debug的时候， IDE里面的Redis源码与实际运行的代码对应不上</span></span><br><span class="line">$ make CFLAGS=<span class="string">&quot;-g -O0&quot;</span> MALLOC=jemalloc</span><br></pre></td></tr></table></figure><p><code>CLion</code> 导入redis源码并进行如下配置：</p><img src="/post/75b7478e/image-20250217230303910.png" class="" title="image-20250217230303910"><p>直接debug启动，相当于执行命令 <code>/Users/tw/CLionProjects/redis/src/redis-server redis.conf</code>，接下来在<code>server.c</code>的<code>main()</code>中打断点，就可以debug调试源码了。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell编程基础</title>
      <link href="/post/6e95fc76.html"/>
      <url>/post/6e95fc76.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>#!/bin/bash</code></td><td>脚本固定开头</td></tr><tr><td><code>$PATH</code></td><td>在脚本中引用环境变量</td></tr><tr><td>today&#x3D;`date`</td><td>替换命令，将 <code>date</code> 的输出赋给 <code>today</code></td></tr><tr><td><code>today=$(date)</code></td><td>同上</td></tr><tr><td><code>date +%y%m%d</code></td><td>将日期显示为两位数的年月日的组合 ，如250108</td></tr><tr><td><code>$[3 * 5]</code></td><td>数学运算</td></tr><tr><td><code>(( expression ))</code></td><td>用于数学表达式</td></tr><tr><td><code>[[ expression ]]</code></td><td>用于高级字符串处理</td></tr><tr><td><code>IFS=$&#39;\n&#39;</code></td><td>修改内部字段分隔符</td></tr><tr><td><code>for file in /etc/*</code></td><td>遍历目录</td></tr></tbody></table><p>条件语句：检查命令的退出状态码是否为0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-then</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-then-else</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if-then-elif</span></span><br><span class="line"><span class="keyword">if</span> command1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">elif</span> command2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> more commands</span><br><span class="line"><span class="keyword">fi</span> </span><br></pre></td></tr></table></figure><p>条件测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>数值比较</li></ul><table><thead><tr><th>比较</th><th>描述</th></tr></thead><tbody><tr><td><code>n1 -eq n2</code></td><td>检查n1是否与n2相等</td></tr><tr><td><code>n1 -ge n2</code></td><td>检查n1是否大于或等于n2</td></tr><tr><td><code>n1 -gt n2</code></td><td>检查n1是否大于n2</td></tr><tr><td><code>n1 -le n2</code></td><td>检查n1是否小于或等于n2</td></tr><tr><td><code>n1 -lt n2</code></td><td>检查n1是否小于n2</td></tr><tr><td><code>n1 -ne n2</code></td><td>检查n1是否不等于n2</td></tr></tbody></table><ul><li>字符串比较</li></ul><table><thead><tr><th>比较</th><th>说明</th></tr></thead><tbody><tr><td><code>str1 = str2</code></td><td>检查str1是否和str2相同</td></tr><tr><td><code>str1 != str2</code></td><td>检查str1是否和str2不同</td></tr><tr><td><code>str1 &lt; str2</code></td><td>检查str1是否比str2小</td></tr><tr><td><code>str1 &gt; str2</code></td><td>检查str1是否比str2大</td></tr><tr><td><code>-n str1</code></td><td>检查str1的长度是否非0</td></tr><tr><td><code>-z str1</code></td><td>检查str1的长度是否为0</td></tr></tbody></table><ul><li>文件比较</li></ul><table><thead><tr><th>比较</th><th>说明</th></tr></thead><tbody><tr><td><code>-d file</code></td><td>检查file是否存在并是一个目录</td></tr><tr><td><code>-e file</code></td><td>检查file是否存在</td></tr><tr><td><code>-f file</code></td><td>检查file是否存在并是一个文件</td></tr><tr><td><code>-r file</code></td><td>检查file是否存在并可读</td></tr><tr><td><code>-s file</code></td><td>检查file是否存在并非空</td></tr><tr><td><code>-w file</code></td><td>检查file是否存在并可写</td></tr><tr><td><code>-x file</code></td><td>检查file是否存在并可执行</td></tr><tr><td><code>-O file</code></td><td>检查file是否存在并属当前用户所有</td></tr><tr><td><code>-G file</code></td><td>检查file是否存在并且默认组与当前用户相同</td></tr><tr><td><code>file1 -nt file2</code></td><td>检查file1是否比file2新</td></tr><tr><td><code>file1 -ot file2</code></td><td>检查file1是否比file2旧</td></tr></tbody></table><p>分支语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> variable <span class="keyword">in</span></span><br><span class="line">pattern1 | pattern2) commands1;;</span><br><span class="line">pattern3) commands2;;</span><br><span class="line">*) default commands;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>for-循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( variable assignment ; condition ; iteration process ))</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">other commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>while-循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">other commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>until-循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">other commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="实用脚本"><a href="#实用脚本" class="headerlink" title="实用脚本"></a>实用脚本</h2><h3 id="查看可执行文件"><a href="#查看可执行文件" class="headerlink" title="查看可执行文件"></a>查看可执行文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># finding files in the PATH</span></span><br><span class="line"></span><br><span class="line">IFS=:</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 检查目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$dir</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$dir</span>:&quot;</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$dir</span>/*:</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 检查是否是可执行文件且不是目录</span></span><br><span class="line">    <span class="keyword">if</span> [ -x <span class="variable">$file</span> ] &amp;&amp; [ ! -d <span class="variable">$file</span> ]; <span class="keyword">then</span> <span class="comment"># 中括号与条件表达式需空格隔开</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;    <span class="variable">$file</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$dir</span>: [Not a valid directory]&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> users.csv</span><br><span class="line">rich,Richard Blum</span><br><span class="line">christine,Christine Bresnahan</span><br><span class="line">barbara,Barbara Blum</span><br><span class="line">tim,Timothy Bresnahan</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">input=<span class="string">&quot;users.csv&quot;</span></span><br><span class="line"><span class="keyword">while</span> IFS=<span class="string">&#x27;,&#x27;</span> <span class="built_in">read</span> -r userid name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;adding <span class="variable">$userid</span>&quot;</span></span><br><span class="line">    useradd -c <span class="string">&quot;<span class="variable">$name</span>&quot;</span> -m <span class="variable">$userid</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$input</span>&quot;</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gawk基础</title>
      <link href="/post/132c5d7c.html"/>
      <url>/post/132c5d7c.html</url>
      
        <content type="html"><![CDATA[<p>gawk程序是Unix中的原始awk程序的GNU版本，其报告生成能力通常用来从大文本文件文件中提取元素，并将它们格式化成可读的格式，如格式化日志文件。</p><p>gawk的命令格式为：<code>gawk options program file</code>。</p><p>常用的选项如下：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-F fs</code></td><td>指定行中划分数据字段的字段分隔符</td></tr><tr><td><code>-f file</code></td><td>从指定的文件中读取程序</td></tr><tr><td><code>-v var=value</code></td><td>定义gawk程序中的一个变量及其默认值</td></tr><tr><td><code>-mf N</code></td><td>指定要处理的数据文件中的最大字段数</td></tr><tr><td><code>-mr N</code></td><td>指定数据文件中的最大数据行数</td></tr><tr><td><code>-W keyword</code></td><td>指定gawk的兼容模式或警告等级</td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>所有编程语言都可以使用变量来存取值，gawk编程语言支持两种类型变量：</p><ul><li>内建变量</li><li>自定义变量</li></ul><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><h4 id="数据字段变量"><a href="#数据字段变量" class="headerlink" title="数据字段变量"></a>数据字段变量</h4><p>在处理文本时，gawk会给一行中的每个数据元素分配一个变量：</p><ul><li><code>$0</code>：表示整个文本行</li><li><code>$1</code>：表示第1个数据字段</li><li><code>$n</code>：表示第n个数据字段</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data1.txt</span><br><span class="line">One line of <span class="built_in">test</span> text.</span><br><span class="line">Two lines of <span class="built_in">test</span> text.</span><br><span class="line">Three lines of <span class="built_in">test</span> text.</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> data1.txt</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Three</span><br></pre></td></tr></table></figure><h4 id="分隔符变量"><a href="#分隔符变量" class="headerlink" title="分隔符变量"></a>分隔符变量</h4><p>gawk默认采用空白字符作为输入和输出字段分隔符。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>FIELDWIDTHS</code></td><td>由空格分隔的一列数字，定义了每个数据字段确切宽度</td></tr><tr><td><code>FS</code></td><td>输入字段分隔符</td></tr><tr><td><code>RS</code></td><td>输入记录分隔符</td></tr><tr><td><code>OFS </code></td><td>输出字段分隔符</td></tr><tr><td><code>ORS</code></td><td>输出记录分隔符</td></tr></tbody></table><ul><li>通过 <code>FS</code> 指定输入字段分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data2.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data2.txt</span><br><span class="line">data11,data12,data13,data14,data15</span><br><span class="line">data21,data22,data23,data24,data25</span><br><span class="line">data31,data32,data33,data34,data35</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; &#123;print $1, $2, $3&#125;&#x27;</span> data2.txt</span><br><span class="line">data11 data12 data13</span><br><span class="line">data21 data22 data23</span><br><span class="line">data31 data32 data33</span><br></pre></td></tr></table></figure><ul><li>通过 <code>OFS</code> 指定输出字段分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;; OFS=&quot;-&quot;&#125; &#123;print $1, $2, $3&#125;&#x27;</span> data2.txt</span><br><span class="line">data11-data12-data13</span><br><span class="line">data21-data22-data23</span><br><span class="line">data31-data32-data33</span><br></pre></td></tr></table></figure><ul><li>通过 <code>FIELDWIDTHS</code> 变量来匹配数据在记录中的位置</li></ul><p>在一些应用程序中，数据并没有使用字段分隔符，而是被放置在了记录中的特定列。这种情况下，必须设定 <code>FIELDWIDTHS</code> 变量来匹配数据在记录中的位置。一旦设置了 <code>FIELDWIDTH</code> 变量，gawk就会忽略 <code>FS</code> 变量，并根据提供的字段宽度来计算字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data3.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data3.txt</span><br><span class="line">1005.3247596.37</span><br><span class="line">115-2.349194.00</span><br><span class="line">05810.1298100.1</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FIELDWIDTHS=&quot;3 5 2 5&quot;&#125; &#123;print $1, $2, $3, $4&#125;&#x27;</span> data3.txt</span><br><span class="line">100 5.324 75 96.37</span><br><span class="line">115 -2.34 91 94.00</span><br><span class="line">058 10.12 98 100.1</span><br></pre></td></tr></table></figure><ul><li>通过 <code>RS</code> 指定输入记录分隔符</li></ul><p>gawk默认把换行符作为记录分隔符。当遇到记录跨行存储，不同记录以空白行分隔的文本，就需要通过 <code>RS</code> 指定记录分隔符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data4.txt</span><br><span class="line">Riley Mullen</span><br><span class="line">123 Main Street</span><br><span class="line">Chicago, IL 60601</span><br><span class="line">(312)555-1234</span><br><span class="line"></span><br><span class="line">Frank Williams</span><br><span class="line">456 Oak Street</span><br><span class="line">Indianapolis, IN 46201</span><br><span class="line">(317)555-9876</span><br><span class="line"></span><br><span class="line">Haley Snell</span><br><span class="line">4231 Elm Street</span><br><span class="line">Detroit, MI 48201</span><br><span class="line">(313)555-4938</span><br><span class="line"></span><br><span class="line"><span class="comment"># FS：指定字段分隔符为\n</span></span><br><span class="line"><span class="comment"># RS：指定记录分隔符为空字符</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;print $1, $4&#125;&#x27;</span> data4.txt</span><br><span class="line">Riley Mullen (312)555-1234</span><br><span class="line">Frank Williams (317)555-9876</span><br><span class="line">Haley Snell (313)555-4938</span><br></pre></td></tr></table></figure><h4 id="其他内建变量"><a href="#其他内建变量" class="headerlink" title="其他内建变量"></a>其他内建变量</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ARGC</code></td><td>当前命令行参数个数</td></tr><tr><td><code>ARGIND</code></td><td>当前文件在<code>ARGV</code>中的位置</td></tr><tr><td><code>ARGV</code></td><td>包含命令行参数的数组</td></tr><tr><td><code>CONVFMT</code></td><td>数字的转换格式（参见<code>printf</code>语句），默认值为<code>%.6 g</code></td></tr><tr><td><code>ENVIRON</code></td><td>当前shell环境变量及其值组成的关联数组</td></tr><tr><td><code>ERRNO</code></td><td>当读取或关闭输入文件发生错误时的系统错误号</td></tr><tr><td><code>FILENAME</code></td><td>用作gawk输入数据的数据文件的文件名</td></tr><tr><td><code>IGNORECASE</code></td><td>设成非零值时，忽略gawk命令中出现的字符串的字符大小写</td></tr><tr><td><code>NF</code></td><td>数据文件中的字段总数</td></tr><tr><td><code>NR</code></td><td>已处理的输入记录数</td></tr><tr><td><code>FNR</code></td><td>当前数据文件中的数据行数</td></tr><tr><td><code>OFMT</code></td><td>数字的输出格式，默认值为<code>%.6 g</code></td></tr><tr><td><code>RLENGTH</code></td><td>由<code>match</code>函数所匹配的子字符串的长度</td></tr><tr><td><code>RSTART</code></td><td>由<code>match</code>函数所匹配的子字符串的起始位置</td></tr></tbody></table><ul><li><code>ARGC</code> 和 <code>ARGV</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gawk不把脚本程序当作命令行参数的一部分</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;print ARGC, ARGV[0], ARGV[1]&#125;&#x27;</span> data1.txt</span><br><span class="line">2 gawk data1.txt</span><br></pre></td></tr></table></figure><ul><li><code>ENVIRON</code></li></ul><p>可以通过 <code>ENVIRON</code> 来获取 shell 中任何环境变量的值，以供 gawk 程序使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt; BEGIN&#123;</span></span><br><span class="line"><span class="string">&gt; print ENVIRON[&quot;HOME&quot;]</span></span><br><span class="line"><span class="string">&gt; print ENVIRON[&quot;PATH&quot;]</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">/home/rich</span><br><span class="line">/usr/local/bin:/bin:/usr/bin:</span><br></pre></td></tr></table></figure><ul><li><code>NF</code></li></ul><p>当不知记录有多少个字段，<code>NF</code> 变量可以用来指定最后一个数据字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;; OFS=&quot;:&quot;&#125; &#123;print $1, $NF&#125;&#x27;</span> /etc/passwd</span><br><span class="line">nobody:/usr/bin/false</span><br><span class="line">root:/bin/sh</span><br><span class="line">daemon:/usr/bin/false</span><br></pre></td></tr></table></figure><ul><li><code>FNR</code> 和 <code>NR</code></li></ul><p><code>FNR</code> 变量的值在 gawk 处理第二个数据文件时被重置了，而 <code>NR</code> 变量则在处理第二个数据文件时继续计数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt; BEGIN &#123;FS=&quot;,&quot;&#125;</span></span><br><span class="line"><span class="string">&gt; &#123;print $1, &quot;FNR=&quot;FNR, &quot;NR=&quot;NR&#125;</span></span><br><span class="line"><span class="string">&gt; END &#123;print &quot;There were&quot;,NR,&quot;records processed&quot;&#125;&#x27;</span> data2.txt data2.txt</span><br><span class="line">data11 FNR=1 NR=1</span><br><span class="line">data21 FNR=2 NR=2</span><br><span class="line">data31 FNR=3 NR=3</span><br><span class="line">data11 FNR=1 NR=4</span><br><span class="line">data21 FNR=2 NR=5</span><br><span class="line">data31 FNR=3 NR=6</span><br><span class="line">There were 6 records processed</span><br></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt; text=&quot;hello world&quot;</span></span><br><span class="line"><span class="string">&gt; print text</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><ul><li>在命令行上给脚本中的变量赋值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># script4.gawk</span></span><br><span class="line">$ <span class="built_in">cat</span> script4.gawk</span><br><span class="line">BEGIN &#123;FS=<span class="string">&quot;,&quot;</span>&#125;</span><br><span class="line">&#123;<span class="built_in">print</span> <span class="variable">$n</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令行设置n</span></span><br><span class="line">$ gawk -f script4.gawk n=2 data2.txt</span><br><span class="line">data12</span><br><span class="line">data22</span><br><span class="line">data32</span><br></pre></td></tr></table></figure><p>一般情况下 <code>BEGIN</code> 命令获取不到命令行设置的变量的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> script5.gawk</span><br><span class="line">BEGIN&#123;<span class="built_in">print</span> <span class="string">&quot;The&quot;</span>, n<span class="string">&quot;th field is&quot;</span>; FS=<span class="string">&quot;,&quot;</span>&#125;</span><br><span class="line">&#123;<span class="built_in">print</span> <span class="variable">$n</span>&#125;</span><br><span class="line"></span><br><span class="line">$ gawk -f script5.gawk n=2 data2.txt</span><br><span class="line">The th field is</span><br><span class="line">data12</span><br><span class="line">data22</span><br><span class="line">data32</span><br></pre></td></tr></table></figure><p>要解决这个问题，需要加上 <code>-v</code> 命令行参数，且 <code>-v n=2</code> 必须要放在 <code>-f</code> 参数前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gawk -v n=2 -f script5.gawk data2.txt</span><br><span class="line">The 2th field is</span><br><span class="line">data12</span><br><span class="line">data22</span><br><span class="line">data32</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>gawk使用关联数组提供数组功能。关联数组跟普通数组不同之处在于它的索引值可以是任意文本字符串，类似于字典。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">&gt; capital[&quot;China&quot;] = &quot;Beijing&quot;</span></span><br><span class="line"><span class="string">&gt; print capital[&quot;China&quot;]</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">Beijing</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">&gt; var[1] = 34</span></span><br><span class="line"><span class="string">&gt; var[2] = 3</span></span><br><span class="line"><span class="string">&gt; total = var[1] + var[2]</span></span><br><span class="line"><span class="string">&gt; print total</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">37</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历&amp;删除数组</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">&gt; var[&quot;a&quot;] = 1</span></span><br><span class="line"><span class="string">&gt; var[&quot;g&quot;] = 2</span></span><br><span class="line"><span class="string">&gt; for (test in var)</span></span><br><span class="line"><span class="string">&gt; &#123;</span></span><br><span class="line"><span class="string">&gt; print &quot;Index:&quot;,test,&quot;- Value:&quot;,var[test]</span></span><br><span class="line"><span class="string">&gt; &#125;</span></span><br><span class="line"><span class="string">&gt; delete var[&quot;g&quot;]</span></span><br><span class="line"><span class="string">&gt; print &quot;-----&quot;</span></span><br><span class="line"><span class="string">&gt; for (test in var)</span></span><br><span class="line"><span class="string">&gt; &#123;</span></span><br><span class="line"><span class="string">&gt; print &quot;Index:&quot;,test,&quot;- Value:&quot;,var[test]</span></span><br><span class="line"><span class="string">&gt; &#125;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">Index: a - Value: 1</span><br><span class="line">Index: g - Value: 2</span><br><span class="line">-----</span><br><span class="line">Index: a - Value: 1</span><br></pre></td></tr></table></figure><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data1</span><br><span class="line">data11,data12,data13,data14,data15</span><br><span class="line">data21,data22,data23,data24,data25</span><br><span class="line">data31,data32,data33,data34,data35</span><br></pre></td></tr></table></figure><ul><li>正则表达式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /11/匹配了数据字段中含有字符串11的记录</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; /11/&#123;print $0&#125;&#x27;</span> data1</span><br><span class="line">data11,data12,data13,data14,data15</span><br></pre></td></tr></table></figure><ul><li>匹配操作符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $1 ~ /^data2/匹配第一个字段以data2开头的记录</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; $1 ~ /^data2/&#123;print $0&#125;&#x27;</span> data1</span><br><span class="line">data21,data22,data23,data24,data25</span><br><span class="line"></span><br><span class="line"><span class="comment"># $1 !~ /^data2/匹配第一个字段不以data2开头的记录</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; $1 !~ /^data2/&#123;print $0&#125;&#x27;</span> data1</span><br><span class="line">data11,data12,data13,data14,data15</span><br><span class="line">data31,data32,data33,data34,data35</span><br></pre></td></tr></table></figure><ul><li>数学表达式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $1 == &quot;data11&quot;匹配第一个字段等于data11的记录</span></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125; $1 == &quot;data11&quot;&#123;print $1&#125;&#x27;</span> data1</span><br><span class="line">data11,data12,data13,data14,data15</span><br></pre></td></tr></table></figure><h2 id="结构化"><a href="#结构化" class="headerlink" title="结构化"></a>结构化</h2><ul><li><code>if</code> 语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data2</span><br><span class="line">10</span><br><span class="line">5</span><br><span class="line">13</span><br><span class="line">50</span><br><span class="line">34</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; if ($1 &gt; 20) &#123;</span></span><br><span class="line"><span class="string">&gt; x = $1 / 2</span></span><br><span class="line"><span class="string">&gt; print x</span></span><br><span class="line"><span class="string">&gt; &#125; else &#123;</span></span><br><span class="line"><span class="string">&gt; x = $1 * 2</span></span><br><span class="line"><span class="string">&gt; print x</span></span><br><span class="line"><span class="string">&gt; &#125;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data2</span><br><span class="line">20</span><br><span class="line">10</span><br><span class="line">26</span><br><span class="line">25</span><br><span class="line">17</span><br></pre></td></tr></table></figure><ul><li><code>while</code> 语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data3</span><br><span class="line">130 120 135</span><br><span class="line">160 113 140</span><br><span class="line">145 170 215</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">total = 0</span></span><br><span class="line"><span class="string">i = 1</span></span><br><span class="line"><span class="string">while (i &lt; 4) &#123;</span></span><br><span class="line"><span class="string">  total += $i</span></span><br><span class="line"><span class="string">  if (i == 2)</span></span><br><span class="line"><span class="string">    break</span></span><br><span class="line"><span class="string">  i++</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">avg = total / 2</span></span><br><span class="line"><span class="string">print &quot;Average:&quot;,avg</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data3</span><br><span class="line">Average: 125</span><br><span class="line">Average: 136.5</span><br><span class="line">Average: 157.5</span><br></pre></td></tr></table></figure><ul><li><code>do-while</code> 语句</li><li><code>for</code> 语句</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; total = 0</span></span><br><span class="line"><span class="string">&gt; i = 1</span></span><br><span class="line"><span class="string">&gt; for (i = 1; i &lt; 4; i++) &#123;</span></span><br><span class="line"><span class="string">&gt; total += $i</span></span><br><span class="line"><span class="string">&gt; &#125;</span></span><br><span class="line"><span class="string">&gt; avg = total / 3</span></span><br><span class="line"><span class="string">&gt; print &quot;Average:&quot;,avg</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data3</span><br><span class="line">Average: 128.333</span><br><span class="line">Average: 137.667</span><br><span class="line">Average: 176.667</span><br></pre></td></tr></table></figure><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>gawk使用 <code>printf</code> 命令实现格式化，命令格式：<code>printf &quot;%[modifier]control-letter ...&quot;, var1, var2 ...</code></p><table><thead><tr><th>控制字母</th><th>说明</th></tr></thead><tbody><tr><td><code>c</code></td><td>将一个数作为ASCII字符显示</td></tr><tr><td><code>d</code></td><td>显示一个整数值</td></tr><tr><td><code>i</code></td><td>显示一个整数值（跟d一样）</td></tr><tr><td><code>e</code></td><td>用科学计数法显示一个数</td></tr><tr><td><code>f</code></td><td>显示一个浮点值</td></tr><tr><td><code>g</code></td><td>用科学计数法或浮点数显示（选择较短的格式）</td></tr><tr><td><code>o</code></td><td>显示一个八进制值</td></tr><tr><td><code>s</code></td><td>显示一个文本字符串</td></tr><tr><td><code>x</code></td><td>显示一个十六进制值</td></tr><tr><td><code>X</code></td><td>显示一个十六进制值，但用大写字母A~F</td></tr></tbody></table><p>除了控制字母外，还有3种修饰符可以用来进一步控制输出。</p><ul><li><p>width：指定了输出字段最小宽度的数字值。如果输出短于这个值，printf会将文本右对齐，并用空格进行填充。如果输出比指定的宽度还要长，则按照实际的长度输出。</p></li><li><p>prec：指定了浮点数中小数点后面位数，或者文本字符串中显示的最大字符数。</p></li><li><p>-（减号）：采用左对齐（默认右对齐）。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data4</span><br><span class="line">Riley Mullen</span><br><span class="line">123 Main Street</span><br><span class="line">Chicago, IL 60601</span><br><span class="line">(312)555-1234</span><br><span class="line"></span><br><span class="line">Frank Williams</span><br><span class="line">456 Oak Street</span><br><span class="line">Indianapolis, IN 46201</span><br><span class="line">(317)555-9876</span><br><span class="line"></span><br><span class="line">Haley Snell</span><br><span class="line">4231 Elm Street</span><br><span class="line">Detroit, MI 48201</span><br><span class="line">(313)555-4938</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;BEGIN&#123;FS=&quot;\n&quot;; RS=&quot;&quot;&#125; &#123;printf &quot;%-14s  %s\n&quot;, $1, $4&#125;&#x27;</span> data4</span><br><span class="line">Riley Mullen    (312)555-1234</span><br><span class="line">Frank Williams  (317)555-9876</span><br><span class="line">Haley Snell     (313)555-4938</span><br><span class="line"></span><br><span class="line">$ gawk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; total = 0</span></span><br><span class="line"><span class="string">&gt; for (i = 1; i &lt; 4; i++) &#123;</span></span><br><span class="line"><span class="string">&gt; total += $i</span></span><br><span class="line"><span class="string">&gt; &#125;</span></span><br><span class="line"><span class="string">&gt; avg = total / 3</span></span><br><span class="line"><span class="string">&gt; printf &quot;Average: %5.1f\n&quot;,avg</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data3</span><br><span class="line">Average: 128.3</span><br><span class="line">Average: 137.7</span><br><span class="line">Average: 176.7</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gawk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed基础</title>
      <link href="/post/59cc7134.html"/>
      <url>/post/59cc7134.html</url>
      
        <content type="html"><![CDATA[<p><code>sed</code> 编辑器可以根据命令来处理数据流中的数据，这些命令要么从命令行中输入，要么存储在一个命令文本文件中。<code>sed</code> 编辑器会执行下列操作：</p><ol><li>一次从输入中读取一行数据。</li><li>根据所提供的编辑器命令匹配数据。</li><li>按照命令修改流中的数据。</li><li>将新的数据输出到 <code>STDOUT</code>。</li></ol><h2 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h2><h3 id="模式空间和保持空间"><a href="#模式空间和保持空间" class="headerlink" title="模式空间和保持空间"></a>模式空间和保持空间</h3><p>模式空间（Pattern Space）是当前工作的空间，sed编辑器会将数据流中文本行读入到模式空间进行处理。保持空间（Hold Space）可以看作是模式空间的备份空间，可以将模式空间的某些行临时存储在保持空间，之后再将这些行从保持空间移回模式空间。</p><p>模式空间和保持空间的交互命令如下：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>h</code></td><td>将模式空间复制到保持空间</td></tr><tr><td><code>H</code></td><td>将模式空间附加到保持空间</td></tr><tr><td><code>g</code></td><td>将保持空间复制到模式空间</td></tr><tr><td><code>G</code></td><td>将保持空间附加到模式空间</td></tr><tr><td><code>X</code></td><td>交付两个空间的内容</td></tr></tbody></table><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>默认情况下，在sed编辑器中使用的命令会作用于文本数据的所有行。如果只想将命令作用于特定行或某些行，则必须用行寻址（line addressing）。在sed编辑器中有两种形式的行寻址：</p><ul><li>以数字形式表示行区间</li><li>用文本模式来过滤出行</li></ul><h4 id="数字形式行寻址"><a href="#数字形式行寻址" class="headerlink" title="数字形式行寻址"></a>数字形式行寻址</h4><ul><li>指定某行：<code>sed &#39;2command&#39; file</code></li><li>指定行区间：<code>sed &#39;2,3command&#39; file</code></li><li>从某行开始到结尾：<code>sed &#39;2,$command&#39; file</code></li></ul><h4 id="文本模式行寻址"><a href="#文本模式行寻址" class="headerlink" title="文本模式行寻址"></a>文本模式行寻址</h4><ul><li>匹配某行：<code>sed &#39;/pattern/command&#39; file</code></li><li>匹配行区间：<code>sed &#39;/start/[,/end/]command&#39; file</code></li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="替换：s"><a href="#替换：s" class="headerlink" title="替换：s"></a>替换：s</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data1.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个编辑器命令</span></span><br><span class="line">$ sed <span class="string">&quot;s/dog/cat/&quot;</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy <span class="built_in">cat</span>.</span><br><span class="line">The quick brown fox jumps over the lazy <span class="built_in">cat</span>.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个编辑器命令</span></span><br><span class="line">$ sed <span class="string">&#x27;s/brown/green/; s/dog/cat/&#x27;</span> data1.txt</span><br><span class="line">The quick green fox jumps over the lazy <span class="built_in">cat</span>.</span><br><span class="line">The quick green fox jumps over the lazy <span class="built_in">cat</span>.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> script1.sed</span><br><span class="line">s/brown/green/</span><br><span class="line">s/dog/cat/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 -f 选项从文件中读取编辑器命令</span></span><br><span class="line">$ sed -f script1.sed data1.txt</span><br><span class="line">The quick green fox jumps over the lazy <span class="built_in">cat</span>.</span><br><span class="line">The quick green fox jumps over the lazy <span class="built_in">cat</span>.</span><br></pre></td></tr></table></figure><p>替换命令默认只替换第一处出现的文本，要想替换出现的所有文本必须使用<strong>替换标记</strong>，使用方式：<code>s/pattern/replacement/flags</code>。</p><p>替换标记有如下2种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data2.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data2.txt</span><br><span class="line">This is a <span class="built_in">test</span> of the <span class="built_in">test</span> script.</span><br><span class="line">This is the second <span class="built_in">test</span> of the <span class="built_in">test</span> script.</span><br></pre></td></tr></table></figure><ul><li><p>数字：指定替换第几个出现的文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/test/trial/2&#x27;</span> data2.txt</span><br><span class="line">This is a <span class="built_in">test</span> of the trial script.</span><br><span class="line">This is the second <span class="built_in">test</span> of the trial script.</span><br></pre></td></tr></table></figure></li><li><p><code>g</code>：替换所有出现的文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/test/trial/g&#x27;</span> data2.txt</span><br><span class="line">This is a trial of the trial script.</span><br><span class="line">This is the second trial of the trial script.</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除：d"><a href="#删除：d" class="headerlink" title="删除：d"></a>删除：d</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data3.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><ul><li>删除第3行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;3d&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><ul><li>删除第2～3行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2,3d&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><ul><li>删除从第2行开始的所有行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2,$d&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br></pre></td></tr></table></figure><ul><li>删除匹配到文本的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/number 1/d&#x27;</span> data3.txt</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><ul><li>删除文本中的空行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data4.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data4.txt</span><br><span class="line">This is line number 1.</span><br><span class="line"></span><br><span class="line">This is line number 2.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/^$/d&#x27;</span> data4.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br></pre></td></tr></table></figure><h3 id="插入：i"><a href="#插入：i" class="headerlink" title="插入：i"></a>插入：i</h3><ul><li>插入一行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;i Test Line 1&#x27;</span></span><br><span class="line">Test Line 1</span><br><span class="line">Test Line 2</span><br></pre></td></tr></table></figure><ul><li>插入多行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;i Test Line 1\</span></span><br><span class="line"><span class="string">&gt; Test Line 3&#x27;</span></span><br><span class="line">Test Line 1</span><br><span class="line">Test Line 3</span><br><span class="line">Test Line 2</span><br></pre></td></tr></table></figure><ul><li>在文件开头插入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;1i This is one line of new Text.&#x27;</span> data3.txt</span><br><span class="line">This is one line of new Text.</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><h3 id="追加：a"><a href="#追加：a" class="headerlink" title="追加：a"></a>追加：a</h3><ul><li>追加一行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;a Test Line 1&#x27;</span></span><br><span class="line">Test Line 2</span><br><span class="line">Test Line 1</span><br></pre></td></tr></table></figure><ul><li>追加多行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Test Line 2&quot;</span> | sed <span class="string">&#x27;a Test Line 1\</span></span><br><span class="line"><span class="string">&gt; Test Line 3&#x27;</span></span><br><span class="line">Test Line 2</span><br><span class="line">Test Line 1</span><br><span class="line">Test Line 3</span><br></pre></td></tr></table></figure><ul><li>在文件末尾追加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;$a This is one line of new text.&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line">This is line number 4.</span><br><span class="line">This is one line of new text.</span><br></pre></td></tr></table></figure><h3 id="修改行：c"><a href="#修改行：c" class="headerlink" title="修改行：c"></a>修改行：c</h3><ul><li>修改指定行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;3c This is a changed line of text.&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is a changed line of text.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><ul><li>修改匹配到模式的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/number 3/c This is a changed line of text.&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is a changed line of text.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><h3 id="转换：y"><a href="#转换：y" class="headerlink" title="转换：y"></a>转换：y</h3><p><code>sed &#39;[address]y/inchars/outchars/ file&#39;</code>：对 <code>inchars</code> 和 <code>outchars</code> 的值进行一对一映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;y/23/ab/&#x27;</span> data3.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number a.</span><br><span class="line">This is line number b.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><h3 id="打印：p"><a href="#打印：p" class="headerlink" title="打印：p"></a>打印：p</h3><ul><li>打印第2行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;2p&#x27;</span> data3.txt</span><br><span class="line">This is line number 2.</span><br></pre></td></tr></table></figure><ul><li>打印第2～3行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;2,3p&#x27;</span> data3.txt</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br></pre></td></tr></table></figure><ul><li>打印匹配到的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/number 3/p&#x27;</span> data3.txt</span><br><span class="line">This is line number 3.</span><br></pre></td></tr></table></figure><ul><li>同时打印原来的行和修改后的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/3/&#123;</span></span><br><span class="line"><span class="string">&gt; p</span></span><br><span class="line"><span class="string">&gt; s/line/test/p</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data3.txt</span><br><span class="line">This is line number 3.</span><br><span class="line">This is <span class="built_in">test</span> number 3.</span><br></pre></td></tr></table></figure><ul><li>双模式匹配，可以用来过滤出某个时间段内的日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/2/,/3/p&#x27;</span> data3.txt</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定时间段内的日志</span></span><br><span class="line">$ sed -n <span class="string">&#x27;/2022-11-25T14:15:*/,/2022-11-25T15:*/p&#x27;</span> filename</span><br><span class="line">$ sed -n <span class="string">&#x27;/2024-01-25 08:54:*/,/2024-01-25 08:55:*/p&#x27;</span> filename</span><br></pre></td></tr></table></figure><h3 id="写文件：w"><a href="#写文件：w" class="headerlink" title="写文件：w"></a>写文件：w</h3><ul><li>将数据文件的第1行写入新文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;1w data3_1.txt&#x27;</span> data3.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> data3_1.txt</span><br><span class="line">This is line number 1.</span><br></pre></td></tr></table></figure><ul><li>将数据文件的第2～3行写入新文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;2,3w data3_23.txt&#x27;</span> data3.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> data3_23.txt</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br></pre></td></tr></table></figure><ul><li>写入匹配到的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/4/w data3_4.txt&#x27;</span> data3.txt</span><br><span class="line"> </span><br><span class="line">$ <span class="built_in">cat</span> data3_4.txt</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure><p>PS：除了可以通过w命令写文件，还可以通过 <code>-i</code> 选项直接编辑原文件。</p><h3 id="移动到下一行：n"><a href="#移动到下一行：n" class="headerlink" title="移动到下一行：n"></a>移动到下一行：n</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data5.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data5.txt</span><br><span class="line">This is the header line.</span><br><span class="line"></span><br><span class="line">This is a data line.</span><br><span class="line"></span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：有些系统需在d后面加一个分号;</span></span><br><span class="line">$ sed <span class="string">&#x27;/header/&#123;n; d&#125;&#x27;</span> data5.txt</span><br><span class="line">This is the header line.</span><br><span class="line">This is a data line.</span><br><span class="line"></span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><p>命令解释：要删除第1行和第3行之间的空白行，需先根据<code>/header/</code>匹配到第1行，再用n命令让sed编辑器移动到下一行，最后用d命令删除空白行。</p><h3 id="追加下一行：N"><a href="#追加下一行：N" class="headerlink" title="追加下一行：N"></a>追加下一行：N</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data6.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data6.txt</span><br><span class="line">This is the header line.</span><br><span class="line">This is the first data line.</span><br><span class="line">This is the second data line.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/first/&#123;N ; s/\n/ /&#125;&#x27;</span> data6.txt</span><br><span class="line">This is the header line.</span><br><span class="line">This is the first data line. This is the second data line.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><p>命令解释：小写的n命令让sed编辑器移动到下一行，大写的N命令则是让编辑器将下一行追加到模式空间。因此当匹配到<code>/first/</code>所在的行时，N命令让sed编辑器继续读入下一行，此时模式空间的文本内容是 <code>This is the first data line.\nThis is the second data line.</code>，最后通过<code>s/\n/ /</code>命令将换行符替换成空格。该命令呈现出来的效果就是合并两行。</p><p>N命令的一种使用场景是查找并编辑可能分散在多行的短语。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data7.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data7.txt</span><br><span class="line">On Tuesday, the Linux System</span><br><span class="line">Administrator<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All System Administrator should attend.</span></span><br><span class="line"><span class="string">Thank you for your attendance.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ SED <span class="string">&#x27;N ; s/System.Administrator/Desktop user/&#x27;</span> data7.txt</span><br><span class="line">On Tuesday, the Linux Desktop user<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All Desktop users should attend.</span></span><br><span class="line"><span class="string">Thank you for your attendance.</span></span><br></pre></td></tr></table></figure><p>N命令会把上下两行读入模式空间，并通过换行符<code>\n</code>合并成单行文本，所以模式<code>/System.Administrator/</code>就可以匹配到 <code>System\nAdministrator</code>，最后通过s命令替换成 <code>Desktop user</code>。</p><p>由输出结果可以看到，上面这条命令虽然匹配到了跨行的短语，但是在替换之后会合并两行，有时这可能不符合预期。要解决这个问题，需要多条替换命令，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;N</span></span><br><span class="line"><span class="string">&gt; s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">&gt; s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data7.txt</span><br><span class="line">On Tuesday, the Linux Desktop</span><br><span class="line">User<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All Desktop Users should attend.</span></span><br><span class="line"><span class="string">Thank you for your attendance.</span></span><br></pre></td></tr></table></figure><p>上面这条命令既完成了跨行短语的替换，又不会合并两行，但是这条命令仍然有点问题，假设数据文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data8.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data8.txt</span><br><span class="line">On Tuesday, the Linux System</span><br><span class="line">Administrator<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All System Administrator should attend.</span></span><br></pre></td></tr></table></figure><p>此时执行上面这条命令会发现，最后一行的的<code>System Administrators</code>没有替换成功。这是因为虽然匹配到该行，但是没有下一行了，N命令会终止后续命令的执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;N</span></span><br><span class="line"><span class="string">&gt; s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">&gt; s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data8.txt</span><br><span class="line">On Tuesday, the Linux Desktop</span><br><span class="line">User<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All System Administrators should attend.</span></span><br></pre></td></tr></table></figure><p>要解决这个命令，需要用到排除命令<code>!</code>，当遇到文件最后一行，禁止N命令执行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;$!N;</span></span><br><span class="line"><span class="string">&gt; s/System\nAdministrator/Desktop\nUser/</span></span><br><span class="line"><span class="string">&gt; s/System Administrator/Desktop User/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data8.txt</span><br><span class="line">On Tuesday, the Linux Desktop</span><br><span class="line">User<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All Desktop Users should attend.</span></span><br></pre></td></tr></table></figure><h3 id="多行删除：D"><a href="#多行删除：D" class="headerlink" title="多行删除：D"></a>多行删除：D</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;N; /System\nAdministrator/d&#x27;</span> data8.txt</span><br><span class="line">All System Administrators should attend.</span><br></pre></td></tr></table></figure><p>当N命令和d命令一起使用时，会把当前模式空间中的内容全部删除，这未必符合预期。sed提供了只大写的D命令，只删除模式空间中的第一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;N; /System\nAdministrator/D&#x27;</span> data8.txt</span><br><span class="line">Administrator<span class="string">&#x27;s group meeting will be held.</span></span><br><span class="line"><span class="string">All System Administrators should attend.</span></span><br></pre></td></tr></table></figure><h3 id="排除命令："><a href="#排除命令：" class="headerlink" title="排除命令：!"></a>排除命令：!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;/header/!p&#x27;</span> data6.txt</span><br><span class="line">This is the first data line.</span><br><span class="line">This is the second data line.</span><br><span class="line">This is the last line.</span><br><span class="line"></span><br><span class="line">$ sed -n <span class="string">&#x27;2,3!p&#x27;</span> data6.txt</span><br><span class="line">This is the header line.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><h3 id="分支命令：b"><a href="#分支命令：b" class="headerlink" title="分支命令：b"></a>分支命令：b</h3><p>分支命令格式：<code>[address]b [label]</code></p><p><code>address</code> 参数决定了哪些行的数据会触发分支命令。<code>label</code> 参数定义了要跳转到的位置。如果没有加 <code>label</code> 参数，跳转命令会跳转到脚本的结尾。</p><ul><li>不带 <code>label</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳过第2～3行，不执行后续命令</span></span><br><span class="line">$ sed <span class="string">&#x27;2,3b</span></span><br><span class="line"><span class="string">&gt; s/This is/Is this/</span></span><br><span class="line"><span class="string">&gt; s/line./test?/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data6.txt</span><br><span class="line">Is this the header <span class="built_in">test</span>?</span><br><span class="line">This is the first data line.</span><br><span class="line">This is the second data line.</span><br><span class="line">Is this the last <span class="built_in">test</span>?</span><br></pre></td></tr></table></figure><ul><li>带 <code>label</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳转命令指定如果文本行中出现了first，程序应该跳到标签为jump1的脚本行。</span></span><br><span class="line"><span class="comment"># 如果分支命令的模式没有匹配，sed编辑器会继续执行脚本中的命令，包括分支标签后的命令</span></span><br><span class="line">$ sed <span class="string">&#x27;/first/b jump1</span></span><br><span class="line"><span class="string">&gt; s/This is the/No jump on/</span></span><br><span class="line"><span class="string">&gt; :jump1</span></span><br><span class="line"><span class="string">&gt; s/This is the/Jump here on/</span></span><br><span class="line"><span class="string">&gt; &#x27;</span> data6.txt</span><br><span class="line">No jump on header line.</span><br><span class="line">Jump here on first data line.</span><br><span class="line">No jump on second data line.</span><br><span class="line">No jump on last line.</span><br></pre></td></tr></table></figure><p>循环删除文本中的逗号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This, is, a, test, to, remove, commas.&quot;</span> | sed -n <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">s/,//1p</span></span><br><span class="line"><span class="string">/,/b start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">This is, a, <span class="built_in">test</span>, to, remove, commas.</span><br><span class="line">This is a, <span class="built_in">test</span>, to, remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span>, to, remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span> to, remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span> to remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span> to remove commas.</span><br></pre></td></tr></table></figure><p>为了防止无限循环，<code>b start</code> 前需加行模式 <code>/,/</code>，只有文本中还存在逗号时才跳转。</p><h3 id="测试命令：t"><a href="#测试命令：t" class="headerlink" title="测试命令：t"></a>测试命令：t</h3><p>测试命令格式：<code>[address]t [label]</code></p><p>如果替换命令成功匹配并替换了一个模式，测试命令就会跳转到指定的标签。如果替换命令未能匹配指定的模式，测试命令就不会跳转。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This, is, a, test, to, remove, commas. &quot;</span> | sed -n <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">s/,//1p</span></span><br><span class="line"><span class="string">t start</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">This is, a, <span class="built_in">test</span>, to, remove, commas.</span><br><span class="line">This is a, <span class="built_in">test</span>, to, remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span>, to, remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span> to, remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span> to remove, commas.</span><br><span class="line">This is a <span class="built_in">test</span> to remove commas.</span><br></pre></td></tr></table></figure><p><code>t start</code> 只有在前一个替换命令执行成功才执行，同样避免了无限循环。</p><h2 id="实用脚本"><a href="#实用脚本" class="headerlink" title="实用脚本"></a>实用脚本</h2><h3 id="倒序输出文件内容"><a href="#倒序输出文件内容" class="headerlink" title="倒序输出文件内容"></a>倒序输出文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">&#x27;1!G; h; $p&#x27;</span> data6.txt</span><br><span class="line">This is the last line.</span><br><span class="line">This is the second data line.</span><br><span class="line">This is the first data line.</span><br><span class="line">This is the header line.</span><br></pre></td></tr></table></figure><h3 id="给文件的行编号"><a href="#给文件的行编号" class="headerlink" title="给文件的行编号"></a>给文件的行编号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;=&#x27;</span> data6.txt</span><br><span class="line">1</span><br><span class="line">This is the header line.</span><br><span class="line">2</span><br><span class="line">This is the first data line.</span><br><span class="line">3</span><br><span class="line">This is the second data line.</span><br><span class="line">4</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><p>sed编辑器的<code>=</code>命令会在每一行文本前输出一个行号，但是行号与文本跨行，需要进行合并处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;=&#x27;</span> data6.txt | sed <span class="string">&#x27;N; s/\n/ /g&#x27;</span></span><br><span class="line">1 This is the header line.</span><br><span class="line">2 This is the first data line.</span><br><span class="line">3 This is the second data line.</span><br><span class="line">4 This is the last line.</span><br></pre></td></tr></table></figure><p>有些shell命令也可以添加行号，但是可能会加入一些不需要的空格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">nl</span> data6.txt</span><br><span class="line">     1  This is the header line.</span><br><span class="line">     2  This is the first data line.</span><br><span class="line">     3  This is the second data line.</span><br><span class="line">     4  This is the last line.</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> -n data6.txt</span><br><span class="line">     1  This is the header line.</span><br><span class="line">     2  This is the first data line.</span><br><span class="line">     3  This is the second data line.</span><br><span class="line">     4  This is the last line.</span><br></pre></td></tr></table></figure><h3 id="插入空白行"><a href="#插入空白行" class="headerlink" title="插入空白行"></a>插入空白行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;$!G&#x27;</span> data6.txt</span><br><span class="line">This is the header line.</span><br><span class="line"></span><br><span class="line">This is the first data line.</span><br><span class="line"></span><br><span class="line">This is the second data line.</span><br><span class="line"></span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><p>当启动sed编辑器时，保持空间默认有一个空行，sed编辑器在处理每一行数据时，<code>G</code>命令会将保持空间内容附加到模式空间内容后。</p><p>上面这个命令会有一点小问题，如果文本行之间已经有空行，空行会加倍：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data9.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data9.txt</span><br><span class="line">This is the header line.</span><br><span class="line">This is the first data line.</span><br><span class="line"></span><br><span class="line">This is the second data line.</span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;$!G&#x27;</span> data9.txt</span><br><span class="line">This is the header line.</span><br><span class="line"></span><br><span class="line">This is the first data line.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is the second data line.</span><br><span class="line"></span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><p>解决办法是先删除所有空白行再插入空白行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/^$/d; $!G&#x27;</span> data9.txt</span><br><span class="line">This is the header line.</span><br><span class="line"></span><br><span class="line">This is the first data line.</span><br><span class="line"></span><br><span class="line">This is the second data line.</span><br><span class="line"></span><br><span class="line">This is the last line.</span><br></pre></td></tr></table></figure><h3 id="删除空白行"><a href="#删除空白行" class="headerlink" title="删除空白行"></a>删除空白行</h3><h4 id="删除多余的空白行"><a href="#删除多余的空白行" class="headerlink" title="删除多余的空白行"></a>删除多余的空白行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data10.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data10.txt</span><br><span class="line">This is line one.</span><br><span class="line"></span><br><span class="line">This is line two.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is line three.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is line four.</span><br></pre></td></tr></table></figure><p><code>/./,/^$/</code>，该模式搜索有字符的行和空白行，这个行区间的行不会被删除，因此不在这个行区间的多余空白行会被删除。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/./,/^$/!d&#x27;</span> data10.txt</span><br><span class="line">This is line one.</span><br><span class="line"></span><br><span class="line">This is line two.</span><br><span class="line"></span><br><span class="line">This is line three.</span><br><span class="line"></span><br><span class="line">This is line four.</span><br></pre></td></tr></table></figure><h4 id="删除开头的空白行"><a href="#删除开头的空白行" class="headerlink" title="删除开头的空白行"></a>删除开头的空白行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data11.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data11.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is line one.</span><br><span class="line"></span><br><span class="line">This is line two.</span><br></pre></td></tr></table></figure><p><code>/./,$!d</code>，表示从第一行有字符的行到文件结尾之间的行不会被删除，因此开头的空白行会被删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/./,$!d&#x27;</span> data11.txt</span><br><span class="line">This is line one.</span><br><span class="line"></span><br><span class="line">This is line two.</span><br></pre></td></tr></table></figure><h4 id="删除结尾的空白行"><a href="#删除结尾的空白行" class="headerlink" title="删除结尾的空白行"></a>删除结尾的空白行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data12.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data12.txt</span><br><span class="line">This is the first line.</span><br><span class="line">This is the second line.</span><br><span class="line"><span class="comment"># 空行</span></span><br><span class="line"><span class="comment"># 空行</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; :start</span></span><br><span class="line"><span class="string">&gt; /^\n*$/&#123;$d; N; b start&#125;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data16.txt</span><br><span class="line">This is the first line.</span><br><span class="line">This is the second line.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同Linux系统，sed命令实现方式可能略微有点差异</span></span><br><span class="line">$ sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">:start</span></span><br><span class="line"><span class="string">/^\n*$/&#123;</span></span><br><span class="line"><span class="string">$d</span></span><br><span class="line"><span class="string">N</span></span><br><span class="line"><span class="string">b start</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> data12.txt</span><br><span class="line">This is the first line.</span><br><span class="line">This is the second line.</span><br></pre></td></tr></table></figure><h3 id="删除HMTL标签"><a href="#删除HMTL标签" class="headerlink" title="删除HMTL标签"></a>删除HMTL标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data13.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> data13.txt</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;This is the page title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">This is the &lt;b&gt;first&lt;/b&gt; line <span class="keyword">in</span> the Web page.</span><br><span class="line">This should provide some &lt;i&gt;useful&lt;/i&gt;</span><br><span class="line">information to use <span class="keyword">in</span> our sed script.</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/&lt;.*&gt;//g&#x27;</span> data13.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is the  line <span class="keyword">in</span> the Web page.</span><br><span class="line">This should provide some</span><br><span class="line">information to use <span class="keyword">in</span> our sed script.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/&lt;.*&gt;/</code>模式会匹配到<code>&lt;head&gt;</code>、<code>&lt;b&gt;first&lt;/b&gt;</code>等，因此会把<code>&lt;head&gt;</code>、<code>&lt;b&gt;first&lt;/b&gt;</code>都替换成空字符。为了正确地匹配标签，<code>&lt;</code>和<code>&gt;</code>之间的内容不能包含<code>&lt;</code>和<code>&gt;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/&lt;[^&gt;]*&gt;//g&#x27;</span> data13.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is the page title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is the first line <span class="keyword">in</span> the Web page.</span><br><span class="line">This should provide some useful</span><br><span class="line">information to use <span class="keyword">in</span> our sed script.</span><br><span class="line"></span><br><span class="line">$ sed <span class="string">&#x27;s/&lt;[^&lt;]*&gt;//g&#x27;</span> data13.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is the page title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is the first line <span class="keyword">in</span> the Web page.</span><br><span class="line">This should provide some useful</span><br><span class="line">information to use <span class="keyword">in</span> our sed script.</span><br></pre></td></tr></table></figure><p>进一步可以删除多余的空白行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/&lt;[^&lt;]*&gt;//g; /./,/^$/!d&#x27;</span> data13.txt</span><br><span class="line">This is the page title</span><br><span class="line"></span><br><span class="line">This is the first line <span class="keyword">in</span> the Web page.</span><br><span class="line">This should provide some useful</span><br><span class="line">information to use <span class="keyword">in</span> our sed script.</span><br></pre></td></tr></table></figure><h3 id="打印末尾n行"><a href="#打印末尾n行" class="headerlink" title="打印末尾n行"></a>打印末尾n行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> data14.txt</span><br><span class="line">This is line 1.</span><br><span class="line">This is line 2.</span><br><span class="line">This is line 3.</span><br><span class="line">This is line 4.</span><br><span class="line">This is line 5.</span><br><span class="line">This is line 6.</span><br><span class="line">This is line 7.</span><br><span class="line">This is line 8.</span><br><span class="line">This is line 9.</span><br><span class="line">This is line 10.</span><br><span class="line">This is line 11.</span><br><span class="line">This is line 12.</span><br><span class="line">This is line 13.</span><br><span class="line">This is line 14.</span><br><span class="line">This is line 15.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&gt; :start</span></span><br><span class="line"><span class="string">&gt; $q; N; 11,$D</span></span><br><span class="line"><span class="string">&gt; b start</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span> data14.txt</span><br><span class="line">This is line 6.</span><br><span class="line">This is line 7.</span><br><span class="line">This is line 8.</span><br><span class="line">This is line 9.</span><br><span class="line">This is line 10.</span><br><span class="line">This is line 11.</span><br><span class="line">This is line 12.</span><br><span class="line">This is line 13.</span><br><span class="line">This is line 14.</span><br><span class="line">This is line 15.</span><br></pre></td></tr></table></figure><h3 id="批量重命名文件"><a href="#批量重命名文件" class="headerlink" title="批量重命名文件"></a>批量重命名文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> *.txt | sed <span class="string">&#x27;s/\(.*\)\.txt/mv &amp; \1.log/&#x27;</span> | bash</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim基础</title>
      <link href="/post/d16c64e7.html"/>
      <url>/post/d16c64e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>i</code></td><td>在光标前插入</td></tr><tr><td><code>a</code></td><td>在光标后插入</td></tr><tr><td><code>o</code></td><td>在当前行后插入一行</td></tr><tr><td><code>O</code></td><td>在当前行前插入一行</td></tr><tr><td><code>esc</code></td><td>返回Normal模式（退出编辑）</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:q!</code></td><td>强制退出</td></tr><tr><td><code>:wq</code></td><td>保存并退出</td></tr><tr><td><code>hjkl</code></td><td>←↓↑→</td></tr><tr><td><code>u</code></td><td>撤销上一步操作</td></tr><tr><td><code>ctrl+r</code></td><td>重放上一步操作</td></tr><tr><td><code>:set number</code></td><td>设置行号</td></tr><tr><td><code>:set nonumber</code></td><td>取消行号</td></tr><tr><td><code>G</code></td><td>跳转到最后一行开头</td></tr><tr><td><code>gg</code></td><td>跳转到第一行开头</td></tr><tr><td><code>:n + enter</code></td><td>跳转到指定行</td></tr><tr><td><code>n + G</code></td><td>跳转到指定行</td></tr></tbody></table><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>0</code></td><td>移动光标到行头</td></tr><tr><td><code>$</code></td><td>移动光标到行尾</td></tr><tr><td><code>^</code></td><td>移动光标到第一个非空字符</td></tr><tr><td><code>g_</code></td><td>移动光标到最后一个非空字符</td></tr><tr><td><code>w</code></td><td>移动光标到下一个单词开头</td></tr><tr><td><code>b</code></td><td>移动光标到单词开头</td></tr><tr><td><code>B</code></td><td>移动光标到单词开头，包含标点符号</td></tr><tr><td><code>e</code></td><td>移动光标到单词结尾</td></tr><tr><td><code>E</code></td><td>移动光标到单词结尾，包含标点符号</td></tr></tbody></table><h3 id="选择、剪切、拷贝"><a href="#选择、剪切、拷贝" class="headerlink" title="选择、剪切、拷贝"></a>选择、剪切、拷贝</h3><table><thead><tr><th>光标命令</th><th>删除命令</th><th>选择命令</th><th>剪切命令</th><th>拷贝命令</th></tr></thead><tbody><tr><td></td><td></td><td></td><td><code>dd</code></td><td><code>yy</code></td></tr><tr><td><code>0</code></td><td><code>c0</code></td><td><code>v0</code></td><td><code>d0</code></td><td><code>y0</code></td></tr><tr><td><code>$</code></td><td><code>c$</code></td><td><code>v$</code></td><td><code>d$</code></td><td><code>y$</code></td></tr><tr><td><code>w</code></td><td><code>cw</code></td><td><code>vw</code></td><td><code>dw</code></td><td><code>yw</code></td></tr><tr><td><code>b</code></td><td><code>cb</code></td><td><code>vb</code></td><td><code>de</code></td><td><code>ye</code></td></tr><tr><td><code>B</code></td><td><code>cB</code></td><td><code>vB</code></td><td><code>dE</code></td><td><code>yE</code></td></tr><tr><td><code>e</code></td><td><code>ce</code></td><td><code>ve</code></td><td><code>db</code></td><td><code>yb</code></td></tr><tr><td><code>E</code></td><td><code>cE</code></td><td><code>vE</code></td><td><code>dB</code></td><td><code>yB</code></td></tr><tr><td><code>G</code></td><td><code>cG</code></td><td><code>vG</code></td><td><code>dG</code></td><td><code>yG</code></td></tr><tr><td><code>gg</code></td><td><code>cgg</code></td><td><code>vgg</code></td><td><code>dgg</code></td><td><code>ygg</code></td></tr></tbody></table><h3 id="删除字符"><a href="#删除字符" class="headerlink" title="删除字符"></a>删除字符</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除当前字符</td></tr><tr><td><code>X</code></td><td>删除前一个字符</td></tr></tbody></table><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><table><thead><tr><th>命令</th><th>组合命令</th><th>说明</th></tr></thead><tbody><tr><td><code>p</code></td><td><code>x/X</code> + <code>p</code></td><td>小写p，将剪切版内容复制到当前光标的后面</td></tr><tr><td></td><td><code>d./y.</code> + <code>p</code></td><td>小写p，将剪切版内容复制到当前光标的下一行</td></tr><tr><td><code>P</code></td><td><code>x/X</code> + <code>P</code></td><td>大写P，将剪切版内容复制到当前光标的前面</td></tr><tr><td></td><td><code>d./y.</code> + <code>P</code></td><td>大写P，将剪切版内容复制到当前光标的上一行</td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>/keyword</code> + <code>enter</code></td><td>向下搜索</td></tr><tr><td><code>?keyword</code> + <code>enter</code></td><td>向上搜索</td></tr><tr><td><code>n</code></td><td>下一个匹配项</td></tr><tr><td><code>N</code></td><td>上一个匹配项</td></tr></tbody></table><h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>重复上一次命令</td></tr><tr><td><code>n&lt;command&gt;</code></td><td>重复某个命令n次</td></tr></tbody></table><h3 id="光标移动-1"><a href="#光标移动-1" class="headerlink" title="光标移动"></a>光标移动</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>)</code></td><td>移动光标到下一个句子开头</td></tr><tr><td><code>(</code></td><td>移动光标到上一个句子开头</td></tr><tr><td><code>&#125;</code></td><td>移动光标到下一段落开头</td></tr><tr><td><code>&#123;</code></td><td>移动光标到上一段落开头</td></tr><tr><td><code>*</code></td><td>移动光标到下一个匹配单词</td></tr><tr><td><code>#</code></td><td>移动光标到上一个匹配单词</td></tr><tr><td><code>f&lt;char&gt;</code></td><td>移动光标到下一个<code>&lt;char&gt;</code></td></tr><tr><td><code>t&lt;char&gt;</code></td><td>移动光标到下一个<code>&lt;char&gt;</code>的前一个字符</td></tr></tbody></table><h3 id="搜索-1"><a href="#搜索-1" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:set hlsearch</code></td><td>开启高亮显示</td></tr><tr><td><code>:nohlsearch</code></td><td>关闭高亮显示</td></tr><tr><td><code>/\&lt;keyword\&gt;</code></td><td>全词匹配搜索</td></tr><tr><td><code>:set noignorecae</code></td><td>大小写敏感（默认）</td></tr><tr><td><code>:set ignorecase</code></td><td>忽略大小写</td></tr><tr><td><code>/\d</code></td><td>搜索包含数字的行</td></tr><tr><td><code>/^keyword</code></td><td>搜索以<code>keyword</code>开头的行</td></tr></tbody></table><h3 id="大小写切换"><a href="#大小写切换" class="headerlink" title="大小写切换"></a>大小写切换</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>gu</code>+<code>l(→)</code></td><td>当前字符变小写</td></tr><tr><td><code>gu</code>+<code>enter</code></td><td>当前行变小写</td></tr><tr><td><code>gU</code>+<code>l(→)</code></td><td>当前字符变大写</td></tr><tr><td><code>gU</code>+<code>enter</code></td><td>当前行变大写</td></tr></tbody></table><h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:%</code></td><td>选中全文</td></tr><tr><td><code>:%d</code></td><td>删除全文</td></tr><tr><td><code>:%y</code></td><td>拷贝全文到寄存器</td></tr><tr><td><code>:%y+</code></td><td>拷贝全文到系统剪切板</td></tr><tr><td><code>:%s/pattern/replace/</code></td><td>搜索并替换</td></tr><tr><td><code>ggVGy</code></td><td>拷贝全文到寄存器</td></tr><tr><td><code>dt&quot;</code></td><td>删除所有的内容，直到遇到双引号</td></tr><tr><td><code>y2/foo</code></td><td>拷贝两个 <code>foo</code> 之间的内容</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/2f57a694.html"/>
      <url>/post/2f57a694.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配任意单个字符</td></tr><tr><td><code>+</code></td><td>匹配一个或多个字符</td></tr><tr><td><code>?</code></td><td>匹配零个或一个字符</td></tr><tr><td><code>*</code></td><td>匹配零个或多个字符</td></tr><tr><td><code>&#123;m&#125;</code></td><td>前面的字符刚好出现m次</td></tr><tr><td><code>&#123;m, n&#125;</code></td><td>前面的字符出现最少m次，最多n次</td></tr><tr><td><code>&#123;m,&#125;</code></td><td>前面的字符出现最少m次</td></tr><tr><td><code>[abc]</code></td><td>匹配 <code>a</code> 或 <code>b</code> 或 <code>c</code></td></tr><tr><td><code>[^abc]</code></td><td>匹配除 <code>abc</code> 外的其他字符</td></tr><tr><td><code>[0-5]</code></td><td>匹配0、1、2、3、4、5</td></tr><tr><td><code>[:alnum:]</code></td><td>等价于 <code>[a-zA-Z0-9]</code></td></tr><tr><td><code>[:digit:]</code></td><td>等价于 <code>[0-9]</code></td></tr><tr><td><code>[:alpha:]</code></td><td>等价于 <code>[a-zA-Z]</code></td></tr><tr><td><code>[:lower:]</code></td><td>等价于 <code>[a-z]</code></td></tr><tr><td><code>[:upper:]</code></td><td>等价于 <code>[A-Z]</code></td></tr><tr><td><code>[:space:]</code></td><td>任何一个空白字符，包括空格</td></tr><tr><td><code>[:xdigit:]</code></td><td>任何一个十六进制数，等价于 <code>[a-fA-F0-9]</code></td></tr><tr><td><code>^</code></td><td>匹配文本的开头</td></tr><tr><td><code>$</code></td><td>匹配文本的结尾</td></tr><tr><td>&#96;cat</td><td>dog&#96;</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/post/82734d8.html"/>
      <url>/post/82734d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Linux文件系统目录结构通常如下：</p><img src="/post/82734d8/image-20240917223411860.png" class="" title="image-20240917223411860"><span id="more"></span><p>目录说明：</p><ul><li>&#x2F;bin：存放基本的用户命令文件，如ls、cp等</li><li>&#x2F;boot：存放启动系统所需文件</li><li>&#x2F;dev：设备文件</li><li><strong>&#x2F;etc：存放系统和应用程序的配置文件</strong></li><li>&#x2F;home：存放用户的主目录</li><li>&#x2F;lib：存放系统程序和内核所需的共享库文件</li><li>&#x2F;media：系统自动识别移动设备并挂载这个目录</li><li>&#x2F;mnt：将外部存储挂载到当前目录</li><li>&#x2F;opt：存放可选的第三方软件包</li><li>&#x2F;proc：虚拟文件系统，提供关于内核和进程的信息</li><li>&#x2F;root：超级用户（root）的主目录</li><li>&#x2F;sbin：存放系统管理命令和工具</li><li>&#x2F;srv：存放系统提供的服务的数据，如Web服务器的数据</li><li>&#x2F;tmp：存放临时文件</li><li><strong>&#x2F;usr：存放应用程序和库，包括大多数系统工具和应用程序</strong></li><li>&#x2F;var：存放动态数据，如日志、缓存、邮件等</li><li><strong>&#x2F;usr&#x2F;local：存放通过源码安装的软件</strong></li></ul><h3 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h3><img src="/post/82734d8/image-20240916235314084.png" class="" title="image-20240916235314084"><p>文件类型</p><ul><li>[d] 目录</li><li>[-] 文件</li><li>[l] 链接</li><li>[b] 存储设备</li><li>[c] 串行端口设备，如鼠标、键盘</li></ul><p>在 Linux 中，每个文件和目录都有三类权限：</p><ul><li>**读权限 (r)**：允许读取文件内容（对于目录，允许列出目录中的文件）。</li><li>**写权限 (w)**：允许修改文件内容（对于目录，允许在目录中创建、删除文件）。</li><li>**执行权限 (x)**：允许执行文件（对于目录，允许进入目录或访问其中的文件）。</li></ul><p>这些权限是分配给以下三种用户类型的：</p><ul><li>**文件所有者 (Owner)**：文件的创建者。</li><li>**文件所属组 (Group)**：文件所属的用户组。</li><li>**其他用户 (Others)**：除文件所有者和所属组之外的所有其他用户。</li></ul><p>以截图中的文件 <code>dockerfile</code> 为例：</p><ul><li>文件类型为 <code>d</code>，即目录</li><li>文件所有者权限为 <code>rwx</code>，即可读可写可访问</li><li>文件所属组权限为 <code>r-x</code>，即可读不可写可访问</li><li>其他用户权限为 <code>r-x</code>，也是可读不可写可访问</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h4><p>切换目录</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>cd -</code></td><td>返回上次所在的目录</td></tr></tbody></table><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h4><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>mkdir -P dir1/dir2/dir3</code></td><td>递归创建目录</td></tr></tbody></table><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h4><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ls -a</code></td><td>显示所有文件（包括隐藏文件）</td></tr><tr><td><code>ls -l</code></td><td>显示详细信息</td></tr><tr><td><code>ls -F</code></td><td>在文件名后附加一个指示符来标识文件类型</td></tr><tr><td><code>ls -1</code></td><td>强制每个文件单独占一行显示</td></tr><tr><td><code>ls -R</code></td><td>递归列出所有文件和目录</td></tr><tr><td><code>ls -t</code></td><td>按修改时间倒序显示</td></tr><tr><td><code>ls -tr</code></td><td>按修改时间正序显示</td></tr></tbody></table><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>cp -r dir1 dir2</code></td><td>递归复制（保留基本结构）</td></tr><tr><td><code>cp -a dir1 dir2</code></td><td>归档复制（保留元数据）</td></tr><tr><td><code>cp -u file1 file2</code></td><td>有更新才复制</td></tr></tbody></table><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>mv -i</code></td><td>移动前提示用户确认</td></tr></tbody></table><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>rm -i</code></td><td>删除前提示用户确认</td></tr><tr><td><code>rm -r</code></td><td>递归删除</td></tr><tr><td><code>rm -f</code></td><td>不提示，强制删除</td></tr></tbody></table><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>touch file</code></td><td>创建空文件</td></tr><tr><td><code>touch existed_file</code></td><td>更新文件的修改时间</td></tr><tr><td><code>touch -a existed_file</code></td><td>更新文件的访问时间</td></tr></tbody></table><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a><code>ln</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ln file hl_file</code></td><td>创建硬链接</td></tr><tr><td><code>ln -s file sl_file</code></td><td>创建软链接</td></tr></tbody></table><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>find /path -name filename</code></td><td>搜索当前目录及其子目录</td></tr><tr><td><code>find /path -maxdepth 1 -name filename</code></td><td>仅搜索当前目录</td></tr><tr><td><code>find /path -mindepth 2 -name filename</code></td><td>从指定深度开始搜索</td></tr><tr><td><code>find /path -type f </code></td><td>搜索文件</td></tr><tr><td><code>find /path -iname filename</code></td><td>忽略大小写</td></tr></tbody></table><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a><code>locate</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>locate -i filename</code></td><td>忽略大小写</td></tr><tr><td><code>locate -r pattern</code></td><td>正则匹配查找</td></tr></tbody></table><h4 id="which"><a href="#which" class="headerlink" title="which"></a><code>which</code></h4><p><code>which</code> 用于显示某个命令或程序的绝对路径。它会查找系统的 <code>$PATH</code> 环境变量中列出的目录，并返回第一个匹配的命令或程序的路径。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>which python</code></td><td>显示一个二进制文件或可执行文件的完整路径</td></tr></tbody></table><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a><code>whereis</code></h4><p><code>whereis</code> 是一个类似于 <code>which</code> 的命令，用于查找命令、二进制文件、源代码和手册页的所在位置。与 <code>which</code> 只查找 <code>$PATH</code> 环境变量中的可执行文件不同，<code>whereis</code> 会搜索系统中更多的路径，包括标准二进制文件路径、源代码目录和手册页目录。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>whereis python </code></td><td>输出会包括多个路径，显示命令、源代码和手册页的路径</td></tr><tr><td><code>whereis -b python</code></td><td>查找 <code>python</code> 的二进制文件</td></tr><tr><td><code>whereis -m python</code></td><td>查找 <code>python</code> 的手册页</td></tr></tbody></table><h3 id="文件内容查看和编辑"><a href="#文件内容查看和编辑" class="headerlink" title="文件内容查看和编辑"></a>文件内容查看和编辑</h3><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a><code>wc</code></h4><p>统计文本，输出3个值：文本行数、文本词数、文本字节数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内联输入重定向</span></span><br><span class="line">$ <span class="built_in">wc</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&gt; hello</span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br><span class="line">      1       1       6</span><br></pre></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>cat -n file</code></td><td>显示时添加行号</td></tr><tr><td><code>cat -b file</code></td><td>空行不添加行号</td></tr><tr><td><code>cat /dev/null &gt; file</code></td><td>清空文件</td></tr></tbody></table><h4 id="more"><a href="#more" class="headerlink" title="more"></a><code>more</code></h4><h4 id="less"><a href="#less" class="headerlink" title="less"></a><code>less</code></h4><h4 id="head"><a href="#head" class="headerlink" title="head"></a><code>head</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>head -n 5 file</code> &#x2F; <code>head -5 file</code></td><td>显示文件前5行</td></tr></tbody></table><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a><code>tail</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>tail -n 5 file</code> &#x2F; <code>tail -f file</code></td><td>显示文件最后5行</td></tr><tr><td><code>tail -f file</code></td><td>实时监控文件更新</td></tr></tbody></table><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a><code>sort</code></h4><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>grep &quot;keyword&quot; file</code></td><td>查找包含 <code>keyword</code> 的行</td></tr><tr><td><code>grep -i &quot;keyword&quot; file</code></td><td>忽略大小写</td></tr><tr><td><code>grep -n &quot;keyword&quot; file</code></td><td>查找包含 <code>keyword</code> 的行并显示行号</td></tr><tr><td><code>grep &quot;^keyword&quot; file</code></td><td>查找以 <code>keyword</code> 开头的行</td></tr><tr><td><code>grep &quot;keyword$&quot; file</code></td><td>查找以 <code>keyword</code> 结尾的行</td></tr><tr><td><code>grep &quot;[0-9]&quot; file</code></td><td>查找包含数字的行</td></tr><tr><td><code>grep -E</code></td><td>支持更强大的扩展正则表达式</td></tr><tr><td><code>grep -r &quot;keyword&quot; .</code></td><td>在当前目录及其子目录查找</td></tr><tr><td><code>grep -A 10 &quot;keyword&quot; file</code></td><td>显示匹配行后面 <code>n</code> 行</td></tr><tr><td><code>grep -B 10 &quot;keyword&quot; file</code></td><td>显示匹配行前面 <code>n</code> 行</td></tr><tr><td><code>grep -C 10 &quot;keyword&quot; file</code></td><td>显示匹配行前后各 <code>n</code> 行</td></tr></tbody></table><p>PS：想高效地使用 <code>grep</code>，需要熟练掌握正则表达式。</p><h3 id="文件权限和所有权"><a href="#文件权限和所有权" class="headerlink" title="文件权限和所有权"></a>文件权限和所有权</h3><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h4><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a><code>chown</code></h4><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a><code>chgrp</code></h4><h3 id="系统监控和管理"><a href="#系统监控和管理" class="headerlink" title="系统监控和管理"></a>系统监控和管理</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ps -aux</code></td><td><code>-a</code>：显示所有用户的进程</td></tr><tr><td></td><td><code>-u</code>：显示进程的详细信息，特别是进程所属的用户（USER），CPU 和内存占用情况（%CPU、%MEM）</td></tr><tr><td></td><td><code>-x</code>：包括后台进程</td></tr><tr><td><code>ps -ef</code></td><td><code>-e</code>：显示所有进程，等同于 <code>-A</code></td></tr><tr><td></td><td><code>-f</code>：以树状结构显示进程，显示进程的父子关系，并且包括更多的详细信息，如父进程 ID（PPID）、终端（TTY）等</td></tr></tbody></table><img src="/post/82734d8/image-20240917103223950.png" class="" title="image-20240917103223950"><img src="/post/82734d8/image-20240917103250778.png" class="" title="image-20240917103250778"><p>小结：</p><ul><li><p><code>ps -aux</code> 显示详细的进程信息（包括资源占用），没有父子进程关系。</p></li><li><p><code>ps -ef</code> 显示进程树，重点展示进程间的层次结构</p></li></ul><h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4><p><code>top</code> 用于实时显示系统的资源使用情况，包括 CPU、内存、进程等信息。</p><h4 id="df"><a href="#df" class="headerlink" title="df"></a><code>df</code></h4><p><code>df</code> 用于显示文件系统磁盘空间使用情况，包括已用空间、可用空间和文件系统总容量等信息。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>df -h</code></td><td>显示可读性更好的输出</td></tr></tbody></table><h4 id="du"><a href="#du" class="headerlink" title="du"></a><code>du</code></h4><p><code>du</code> 用于显示文件和目录的磁盘使用情况，可以帮助查看文件或目录占用的磁盘空间，以便有效地管理磁盘空间。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>du -h /path</code></td><td>查看 <code>/path</code> 目录的磁盘使用情况</td></tr><tr><td><code>du -sh /path</code></td><td>显示目录的总磁盘使用情况</td></tr></tbody></table><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a><code>uptime</code></h4><p>显示系统的运行时间和负载。</p><h3 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h3><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a><code>ping</code></h4><p><code>ping</code> 是一个网络诊断工具，用于测试主机之间的网络连通性，以及通信的延迟情况。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>ping -c 3 baidu.com</code></td><td>发送指定数量的请求</td></tr></tbody></table><h4 id="ifconfig-ip"><a href="#ifconfig-ip" class="headerlink" title="ifconfig/ip"></a><code>ifconfig/ip</code></h4><p><code>ifconfig</code>（Interface Configuration）用于配置和显示网络接口信息。在现代Linux系统中，<code>ifconfig</code> 逐渐被 <code>ip</code> 命令所取代，但仍然广泛使用。</p><h4 id="netstat-ss"><a href="#netstat-ss" class="headerlink" title="netstat/ss"></a><code>netstat/ss</code></h4><p><code>netstat</code>（network statistics）用于显示网络连接、路由表、接口统计、伪装连接和多播成员的信息。它提供了一个概述当前系统网络状态的方式，帮助用户了解哪些端口正在被使用、连接的状态以及网络接口的统计数据。</p><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a><code>curl</code></h4><p>下载文件或测试网络请求</p><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a><code>wget</code></h4><p>下载文件或测试网络请求</p><h3 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h3><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a><code>tar</code></h4><p>常用选项：</p><ul><li><p><code>-c</code>：创建一个新的归档文件。</p></li><li><p><code>-x</code>：解压归档文件。</p></li><li><p><code>-t</code>：查看归档文件的内容。</p></li><li><p><code>-v</code>：显示详细信息</p></li><li><p><code>-f</code>：指定归档文件名。</p></li><li><p><code>-z</code>：使用 gzip 压缩。</p></li><li><p><code>-C</code>：解压到指定目录。</p></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>tar -cvf archive.tar file1 file2 dir1</code></td><td>创建未压缩归档文件</td></tr><tr><td><code>tar -czvf archive.tar file1 file2 dir1</code></td><td>创建压缩归档文件</td></tr><tr><td><code>tar -xvf archive.tar</code></td><td>解压未压缩归档文件</td></tr><tr><td><code>tar -xzvf arvhive.tar</code></td><td>解压压缩归档文件</td></tr></tbody></table><h4 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip/unzip"></a><code>zip/unzip</code></h4><p>用于创建和解压缩 zip 文件</p><h4 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip/gunzip"></a><code>gzip/gunzip</code></h4><p>用于压缩和解压缩 gzip 文件</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="history"><a href="#history" class="headerlink" title="history"></a><code>history</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>history -5</code></td><td>显示最近5条命令</td></tr><tr><td><code>!10057</code></td><td>执行编号为10057的命令</td></tr><tr><td><code>!man</code></td><td>调出最近一条 <code>man</code> 命令</td></tr><tr><td><code>!!</code></td><td>调出最近一条命令</td></tr></tbody></table><p><code>history | grep man</code>：查找包含 <code>man</code> 的历史命令</p><p>PS：命令历史通常保存在 <code>~/.bash_history</code> 文件中</p><h4 id="un-alias"><a href="#un-alias" class="headerlink" title="(un)alias"></a><code>(un)alias</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>alias</code></td><td>查看所有别名</td></tr><tr><td><code>unalias ll</code></td><td>删除别名</td></tr><tr><td><code>alias ll=&#39;ls -l&#39;</code></td><td>设置别名</td></tr></tbody></table><p>在命令行通过 <code>alias</code> 设置的别名只在当前 shell 有效，要让别名永久生效，需要在配置文件中设置，用户的 shell 配置文件通常是<code>~/.bashrc</code> 或 <code>~/.bash_profile</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾添改行</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件使别名生效</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>echo -n &gt; file</code></td><td>清空文件</td></tr><tr><td><code>echo -n &quot;prompt: &quot;; command</code></td><td>在同一行显示提示和命令输出</td></tr><tr><td><code>echo $?</code></td><td>查看shell执行的最后一条命令的退出状态码</td></tr></tbody></table><h4 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>set</code></td><td>显示当前的完整环境变量列表</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理与AOP</title>
      <link href="/post/888d26cf.html"/>
      <url>/post/888d26cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理是一种在运行时生成代理对象的机制，它可以在不改变原有代码的情况下，通过代理对象对原有对象进行增强、扩展或限制等操作。</p><p>在 Java 中，动态代理主要有两种实现方式：基于接口的动态代理和基于类的动态代理。其中，基于接口的动态代理使用 Java 自带的 java.lang.reflect.Proxy 类实现，而基于类的动态代理则需要使用第三方库，如 CGLIB 或 ByteBuddy 等。</p><p>基于接口的动态代理要求目标对象必须实现一个或多个接口，动态代理对象会实现这些接口，并将对这些接口方法的调用委托给目标对象。在创建动态代理对象时，需要提供一个实现了 InvocationHandler 接口的代理处理器对象，它会在代理对象方法调用时被回调，从而实现对目标对象方法的增强、扩展或限制等操作。</p><p>以下是一个基于接口的动态代理的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method invocation&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method invocation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">proxy</span> <span class="operator">=</span> (Hello) Proxy.newProxyInstance(</span><br><span class="line">            hello.getClass().getClassLoader(),</span><br><span class="line">            hello.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HelloProxy</span>(hello)</span><br><span class="line">        );</span><br><span class="line">        proxy.sayHello(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于类的动态代理则不要求目标对象必须实现接口，而是通过创建目标对象的子类来实现代理。在创建动态代理对象时，需要提供一个实现了 MethodInterceptor 接口的拦截器对象，它会在代理对象方法调用时被回调，从而实现对目标对象方法的增强、扩展或限制等操作。</p><p>以下是一个基于类的动态代理的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method invocation&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method invocation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(Hello.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">HelloInterceptor</span>());</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) enhancer.create();</span><br><span class="line">        hello.sayHello(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例中，我们可以看到在代理对象的方法调用前后都打印了日志，实现了对原有方法的增强。需要注意的是，基于类的动态代理需要依赖第三方库，而且在创建代理对象时，会生成目标对象的子类，因此会增加一定的运行时开销。因此，应该根据具体的应用场景选择合适的代理方式。</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态代理 </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配原理</title>
      <link href="/post/6a8abce0.html"/>
      <url>/post/6a8abce0.html</url>
      
        <content type="html"><![CDATA[<p><code>SpringBoot</code>的<strong>自动装配（Auto Configuration）</strong>是其最核心的特性之一，它使得<code>SpringBoot</code>应用能够自动装配应用程序所需的组件，从而简化开发者的配置工作。自动装配的核心思想是<strong>SPI扩展机制</strong>，主要基于注解<code>@EnableAutoConfiguration</code>和<code>@Configuration</code>配合<code>@Conditional</code>实现。</p><span id="more"></span><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a><code>@EnableAutoConfiguration</code></h2><p><code>SpringBoot</code>自动装配依赖依赖于<code>@EnableAutoConfiguration</code>注解，这个注解通常是通过<code>@SpringBootApplicaiton</code>注解间接启用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableAutoConfiguration</code>是一个组合注解，其中包括<code>@AutoConfigurationPackage</code>和<code>@Import(AutoConfigurationImportSelector.class)</code>。<code>@AutoConfigurationPackage</code>的主要作用是导入<code>@SpringBootApplication</code>注解所在类的包及其子包中的所有<code>bean</code>，这里不展开。<code>@Import(AutoConfigurationImportSelector.class)</code>是自动配置生效的原因，下面主要看下这个注解做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    <span class="comment">// 加载META-INF/spring.factories文件中通过org.springframework.boot.autoconfigure.EnableAutoConfiguration指定的自动配置类</span></span><br><span class="line">    List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">            SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</span><br><span class="line">    <span class="comment">// 加载META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports文件中预置的自动配置类</span></span><br><span class="line">    ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">    Assert.notEmpty(configurations,</span><br><span class="line">            <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span><br><span class="line">                    + <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义<code>starter</code></h2><p>下面通过自定义一个<code>starter</code>来加深对<code>SpringBoot</code>自动配置的理解。</p><p><code>starter</code>的项目结构</p><img src="/post/6a8abce0/image-20241207213730855.png" class="" title="image-20241207213730855"><p><code>starter</code>坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>robot-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RobotService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RobotService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RobotProperties robotProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + robotProperties.getGreeting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String greeting;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;RobotServiceImpl.class, RobotProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入自定义<code>starter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>robot-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRobot</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">RobotService</span> <span class="variable">robotService</span> <span class="operator">=</span> context.getBean(RobotService.class);</span><br><span class="line">        System.out.println(robotService.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于SPI自动配置</p><p>方式1：创建<code>spring.factories</code>文件</p><img src="/post/6a8abce0/image-20241207221646340.png" class="" title="image-20241207221646340"><p>方式2：创建<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件</p><img src="/post/6a8abce0/image-20241207221743415.png" class="" title="image-20241207221743415"><p>无论采用上述哪种方式，都不再需要<code>@EnableRobot</code>注解就可以实现自动配置。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 自动装配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI扩展机制</title>
      <link href="/post/82b0567.html"/>
      <url>/post/82b0567.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>SPI（Service Provider Interface）</strong> 是 Java 的一种扩展机制，用于提供可插拔的服务实现。</p><span id="more"></span><h2 id="SPI机制步骤"><a href="#SPI机制步骤" class="headerlink" title="SPI机制步骤"></a>SPI机制步骤</h2><h3 id="定义服务接口"><a href="#定义服务接口" class="headerlink" title="定义服务接口"></a>定义服务接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.payment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现服务接口"><a href="#实现服务接口" class="headerlink" title="实现服务接口"></a>实现服务接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.paypal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.payment.PaymentService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaypalPaymentService</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing payment with PayPal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.stripe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.payment.PaymentService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StripePaymentService</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing payment with Stripe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件注册服务实现"><a href="#配置文件注册服务实现" class="headerlink" title="配置文件注册服务实现"></a>配置文件注册服务实现</h3><p>在<code>resources</code>目录下创建<code>META-INF/services/com.example.payment.PaymentService</code>文件，文件内容分别是接口实现类的权限定名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.paypal.PaypalPaymentService</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.stripe.StripePaymentService</span><br></pre></td></tr></table></figure><h3 id="加载服务实现"><a href="#加载服务实现" class="headerlink" title="加载服务实现"></a>加载服务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPaymentProcess</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> ServiceLoader&lt;PaymentService&gt; paymentServices = ServiceLoader.load(PaymentService.class);</span><br><span class="line">    paymentServices.forEach(PaymentService::processPayment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要服务实现遵循约束，在<code>META-INF/services/</code>目录下创建以接口全限定名命名的文件，文件内容是服务实现类的全限定名，那么<code>ServiceLoader.load()</code>就可以加载所有服务实现。</p><p>运行结果：</p><img src="/post/82b0567/image-20241207161439600.png" class="" title="image-20241207161439600"><p>模块结构：</p><img src="/post/82b0567/image-20241207161918559.png" class="" title="image-20241207161918559"><h2 id="SPI应用场景"><a href="#SPI应用场景" class="headerlink" title="SPI应用场景"></a>SPI应用场景</h2><p>日常开发中，最常见的SPI应用包括数据库驱动和日志系统。通过SPI，实现了数据库驱动和日志系统的动态加载和替换。</p><p>如mysql数据库驱动</p><img src="/post/82b0567/image-20241207162912081.png" class="" title="image-20241207162912081"><h2 id="SPI的优缺点"><a href="#SPI的优缺点" class="headerlink" title="SPI的优缺点"></a>SPI的优缺点</h2><p>优点：</p><ul><li><strong>解耦性</strong>：SPI 允许服务消费者（客户端代码）与服务提供者（具体实现）解耦，客户端代码不需要关心具体的实现细节。</li></ul><p>缺点：</p><ul><li><strong>性能开销</strong>：由于 <code>ServiceLoader</code> 需要在运行时查找和加载服务实现，可能会有一定的性能开销，特别是在服务实现类较多时。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令原理</title>
      <link href="/post/fae3668.html"/>
      <url>/post/fae3668.html</url>
      
        <content type="html"><![CDATA[<p>这篇博客主要记录 Git 在执行以下几个命令时的底层原理：</p><ul><li><code>git add</code></li><li><code>git commit</code></li><li><code>git checkout</code></li><li><code>git merge</code></li><li><code>git rebase</code></li></ul><span id="more"></span><h2 id="git-目录"><a href="#git-目录" class="headerlink" title=".git 目录"></a><code>.git</code> 目录</h2><p>准备一个空目录 <code>repo</code>，<code>cd</code> 到这个目录执行 <code>git init</code> 命令。当在一个目录执行 <code>git init</code> 命令时，Git 会创建一个 <code>.git</code> 目录，这个目录包含了几乎所有 Git 存储和操作的对象。该目录的结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -F1 .git</span><br><span class="line">HEAD <span class="comment">#存储目前检出的分支的文件路径</span></span><br><span class="line">config</span><br><span class="line">description</span><br><span class="line">hooks/</span><br><span class="line">info/</span><br><span class="line">objects/ <span class="comment">#存储对象文件，包括blob对象、tree对象、commit对象</span></span><br><span class="line">refs/ <span class="comment">#refs/heads目录存储分支文件，文件内容是分支当前指向的提交的校验和</span></span><br></pre></td></tr></table></figure><p>最初，<code>.git/objects</code> 目录和 <code>.git/refs/heads</code> 目录都是空的，执行完相应命令后才会在这两个目录下生成文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ll .git/objects</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 tw  staff    64B 12 29 18:49 info</span><br><span class="line">drwxr-xr-x  2 tw  staff    64B 12 29 18:49 pack</span><br><span class="line"></span><br><span class="line">$ ll .git/refs/heads</span><br><span class="line">total 0</span><br></pre></td></tr></table></figure><p><code>.git/HEAD</code> 存储当前分支的文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .git/HEAD</span><br><span class="line">ref: refs/heads/main</span><br></pre></td></tr></table></figure><p>ps：当前 <code>.git/refs/heads</code> 目录下并没有 <code>main</code> 这个分支文件，这是因为仓库当前没有任何提交，只有产生提交才会生成这个文件。</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><code>git add</code></h2><p>在 <code>repo</code> 目录中准备三个文件，<code>file1</code>、<code>file2</code>、<code>dir/file3</code>。</p><p>查看仓库的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"><span class="built_in">dir</span>/</span><br><span class="line">file1</span><br><span class="line">file2</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>跟踪文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1 file2 <span class="built_in">dir</span>/file3 <span class="comment"># 也可以使用 git add . 跟踪所有文件</span></span><br></pre></td></tr></table></figure><p>当执行 <code>git add</code> 命令时，Git 会为每一个文件生成长度为40位的校验和，并以校验和的前2位为目录名，后38位为文件名来存储文件快照，文件快照以 <code>blob</code> 对象存储，存储位置就是 <code>.git/objects</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -F1R .git/objects</span><br><span class="line">25/</span><br><span class="line">7d/</span><br><span class="line">b8/</span><br><span class="line"></span><br><span class="line">.git/objects/25:</span><br><span class="line">a8f74b822fb9b0efd64d7443c1c35f361bb7cc <span class="comment">#blob</span></span><br><span class="line"></span><br><span class="line">.git/objects/7d:</span><br><span class="line">2832ce3bae5b3b3f54731b4886947f977e2ac2 <span class="comment">#blob</span></span><br><span class="line"></span><br><span class="line">.git/objects/b8:</span><br><span class="line">914fa8629794ecb72cfc7fcdadbececeea0b4f <span class="comment">#blob</span></span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229115204753.png" class="" title="image-20241229115204753"><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h2><p>通过 <code>git add</code> 命令跟踪文件后再次查看仓库状态，此时文件已被暂存，等待提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">new file:   <span class="built_in">dir</span>/file3.txt</span><br><span class="line">new file:   file1.txt</span><br><span class="line">new file:   file2.txt</span><br></pre></td></tr></table></figure><p>提交文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;the initial commit of repo&#x27;</span></span><br></pre></td></tr></table></figure><p>执行 <code>git commit</code> 命令，Git 会生成执行如下操作：</p><ul><li><p>为每一个有文件变更的目录生成一个 <code>tree</code> 对象</p></li><li><p>生成一个 <code>commit</code> 对象，保存根目录 <code>tree</code> 对象的校验和，如果有父提交，还会保存父提交对象的校验和</p></li><li><p>在 <code>.git/refs/heads</code> 目录中创建分支文件，文件内容就是当前分支最新提交的校验和</p></li></ul><p>与 <code>blob</code> 对象类似，Git 会为每一个 <code>tree</code> 对象和 <code>commit</code> 对象计算校验和，同样以校验和的前2位为目录名，后38位为文件名来存储这两种对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -F1R .git/objects</span><br><span class="line">25/</span><br><span class="line">54/</span><br><span class="line">7d/</span><br><span class="line">9f/</span><br><span class="line">b8/</span><br><span class="line"><span class="built_in">fc</span>/</span><br><span class="line"></span><br><span class="line">.git/objects/25:</span><br><span class="line">a8f74b822fb9b0efd64d7443c1c35f361bb7cc <span class="comment">#blob</span></span><br><span class="line"></span><br><span class="line">.git/objects/54:</span><br><span class="line">8f32fb2ee149dee0637bea72ef60963eca6b51 <span class="comment">#commit</span></span><br><span class="line"></span><br><span class="line">.git/objects/7d:</span><br><span class="line">2832ce3bae5b3b3f54731b4886947f977e2ac2 <span class="comment">#blob</span></span><br><span class="line"></span><br><span class="line">.git/objects/9f:</span><br><span class="line">a6bc0f50083bf5f7ec4bc14c4ea6f48cfe35eb <span class="comment">#tree</span></span><br><span class="line"></span><br><span class="line">.git/objects/b8:</span><br><span class="line">914fa8629794ecb72cfc7fcdadbececeea0b4f <span class="comment">#blob</span></span><br><span class="line"></span><br><span class="line">.git/objects/fc:</span><br><span class="line">41d977852fce6e0c8cce1632884b7efaca4a98 <span class="comment">#tree</span></span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229120752341.png" class="" title="image-20241229120752341"><p>因为有了提交，此时 <code>.git/refs/heads</code> 目录中就会生成 <code>main</code> 分支文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ll .git/refs/heads</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 tw  staff    41B 12 29 19:13 main</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> .git/refs/heads/main</span><br><span class="line">548f32fb2ee149dee0637bea72ef60963eca6b51</span><br></pre></td></tr></table></figure><p>修改 <code>file1</code> 和 <code>dir/file3</code>，并使用 <code>git add</code> 命令暂存文件，Git 会为 <code>file1</code> 和 <code>dir/file3</code> 重新计算校验和，也就是说 <code>.git/objects</code> 目录会新生成两个 <code>blob</code> 对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ll .git/objects</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 25</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 54</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 7d</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 9f</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 b8</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 <span class="built_in">fc</span></span><br><span class="line"></span><br><span class="line">$ git add file1 <span class="built_in">dir</span>/file3</span><br><span class="line"></span><br><span class="line">$ ll .git/objects</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 25</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 54</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 7d</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 9f</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 b8</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 12:22 c0 <span class="comment">#new blob</span></span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 12:22 c9 <span class="comment">#new blob</span></span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 <span class="built_in">fc</span></span><br></pre></td></tr></table></figure><p>使用 <code>git commit</code> 命令提交，因为 <code>dir</code> 和仓库根目录下都有文件变更，因此会新生成两个 <code>tree</code> 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ll .git/objects</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 tw  staff   128B 12 29 12:26 25 </span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 12:26 47 <span class="comment">#new tree</span></span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 54</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 7d</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 12:26 81 <span class="comment">#new commit</span></span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 9f</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:14 b8</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 12:22 c0</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 12:22 c9</span><br><span class="line">drwxr-xr-x  3 tw  staff    96B 12 29 11:25 <span class="built_in">fc</span></span><br><span class="line"></span><br><span class="line">$ ll .git/objects/25</span><br><span class="line">total 16</span><br><span class="line">-r--r--r--  1 tw  staff    33B 12 29 11:14 a8f74b822fb9b0efd64d7443c1c35f361bb7cc</span><br><span class="line">-r--r--r--  1 tw  staff    50B 12 29 12:26 b034b431c310c762aa9d7272ac847bf8b32dfa <span class="comment">#new tree</span></span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229124958332.png" class="" title="image-20241229124958332"><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><code>git checkout</code></h2><p>Git 分支，本质上就是指向提交对象的可变指针。在 <code>.git/refs/heads</code> 目录下，每个分支都有一个对应文件，存储着当前分支所指向的最新提交的校验和。</p><p>创建分支，就是新建一个分支文件，写入提交对象的校验和；删除分支，就是删除对应的分支文件。因此 Git 分支的创建和销毁都非常高效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* main</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> .git/HEAD</span><br><span class="line">ref: refs/heads/main</span><br><span class="line"></span><br><span class="line">$ ll .git/refs/heads</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 tw  staff    41B 12 29 12:26 main</span><br></pre></td></tr></table></figure><p>通过以上几个命令可以看出，当前只有一个分支 <code>main</code>，并且当前检出分支就是 <code>main</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> .git/HEAD</span><br><span class="line">ref: refs/heads/main</span><br><span class="line"></span><br><span class="line">$ ll .git/refs/heads</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--  1 tw  staff    41B 12 29 20:07 dev</span><br><span class="line">-rw-r--r--  1 tw  staff    41B 12 29 12:26 main</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> .git/refs/heads/dev</span><br><span class="line">81306fe754dae188929a1e98c3a894a5641a3728</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 创建新的分支后，可以看出，当前检出分支依然是 <code>main</code>，但 <code>.git/refs/heads</code> 目录下多一个 <code>dev</code> 分支文件，分支内容是 <code>main</code> 分支最新提交的校验和。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> .git/HEAD</span><br><span class="line">ref: refs/heads/dev</span><br></pre></td></tr></table></figure><p>使用 <code>git checkout</code> 命令检出到 <code>dev</code> 分支后，可以看到 <code>HEAD</code> 文件现在保存的是 <code>dev</code> 分支的文件路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line">$ git branch -d dev</span><br><span class="line"></span><br><span class="line">$ ll .git/refs/heads</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--  1 tw  staff    41B 12 29 12:26 main</span><br></pre></td></tr></table></figure><p>使用 <code>git branch -d</code> 删除分支后，Git 会删除 <code>.git/refs/heads</code> 目录下对应的分支文件。</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><code>git merge</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b iss37</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;file2: version 2&quot;</span> &gt; file2</span><br><span class="line"></span><br><span class="line">$ git add file2</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&#x27;iss37: made a achange to file2&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line">$ git checkout -b hotfix</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;file1: version 3&quot;</span> &gt; file1</span><br><span class="line"></span><br><span class="line">$ git add file1</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&#x27;hotfix: made a change to file1&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">* 9ba0744 (hotfix) hotfix: made a change to file1</span><br><span class="line">| * d222cd6 (iss37) iss37: made a achange to file2</span><br><span class="line">|/</span><br><span class="line">* 81306fe (HEAD -&gt; main) made changes to file1 and file3</span><br><span class="line">* 548f32f the initial commit of repo</span><br></pre></td></tr></table></figure><p>依次执行如上命令后，当前检出分支，以及各个分支的指向如下如所示：</p><img src="/post/fae3668/image-20241229221518223.png" class="" title="image-20241229221518223"><p>将 <code>hotfix</code> 分支合入 <code>main</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git merge hotfix</span><br><span class="line">Updating 81306fe..9ba0744</span><br><span class="line">Fast-forward</span><br><span class="line"> file1 | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> </span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">* 9ba0744 (HEAD -&gt; main, hotfix) hotfix: made a change to file1</span><br><span class="line">| * d222cd6 (iss37) iss37: made a achange to file2</span><br><span class="line">|/</span><br><span class="line">* 81306fe made changes to file1 and file3</span><br><span class="line">* 548f32f the initial commit of repo</span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229222153973.png" class="" title="image-20241229222153973"><p>注意上述的 <code>Fast-forward</code> ： <code>main</code> 分支指向的提交是 <code>hotfix</code> 分支指向的提交的直接上游，<code>git merge</code> 只是简单的让 <code>main</code> 分支指向 <code>hotfix</code> 分支所指向的提交，这种合并就叫做 <code>fast-forward</code>。</p><p>与之相对应的，合并完 <code>hotfix</code> 分支后，<code>main</code> 分支当前指向的提交不是 <code>iss37</code> 指向的提交的直接上游，此时如果要合并 <code>iss37</code> 分支，就无法通过 <code>Fast-forward</code> 方式简单地改变 <code>main</code> 分支的指向来完成了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line">$ git merge iss37</span><br><span class="line">Merge made by the <span class="string">&#x27;ort&#x27;</span> strategy.</span><br><span class="line"> file2 | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> </span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">*   6d58973 (HEAD -&gt; main) Merge branch <span class="string">&#x27;iss37&#x27;</span></span><br><span class="line">|\</span><br><span class="line">| * d222cd6 (iss37) iss37: made a achange to file2</span><br><span class="line">* | 9ba0744 (hotfix) hotfix: made a change to file1</span><br><span class="line">|/</span><br><span class="line">* 81306fe made changes to file1 and file3</span><br><span class="line">* 548f32f the initial commit of repo</span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229224617129.png" class="" title="image-20241229224617129"><p>可以看到，合并 <code>iss37</code> 分支会生成一个新的提交，新的提交有两个父提交。</p><h2 id="底层命令"><a href="#底层命令" class="headerlink" title="底层命令"></a>底层命令</h2><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a><code>git rebase</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature_a</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;file_a: version 1&quot;</span> &gt; file_a</span><br><span class="line"></span><br><span class="line">$ git add file_a</span><br><span class="line"></span><br><span class="line">$ git cm <span class="string">&#x27;feature_a: add a new file&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;file2: version 3&quot;</span> &gt; file2</span><br><span class="line"></span><br><span class="line">$ git add file2</span><br><span class="line"></span><br><span class="line">$ git cm <span class="string">&#x27;main: made a change to file2&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">* 594eabd (HEAD -&gt; main) main: made a change to file2</span><br><span class="line">| * 05cfcab (feature_a) feature_a: add a new file</span><br><span class="line">|/</span><br><span class="line">*   6d58973 Merge branch <span class="string">&#x27;iss37&#x27;</span></span><br><span class="line">|\</span><br><span class="line">| * d222cd6 (iss37) iss37: made a achange to file2</span><br><span class="line">* | 9ba0744 (hotfix) hotfix: made a change to file1</span><br><span class="line">|/</span><br><span class="line">* 81306fe made changes to file1 and file3</span><br><span class="line">* 548f32f the initial commit of repo</span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229225433535.png" class="" title="image-20241229225433535"><p>通过 <code>git rebase</code> 合并 <code>feature_a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase main feature_a</span><br><span class="line">Successfully rebased and updated refs/heads/feature_a.</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">* ac7d58d (HEAD -&gt; feature_a) feature_a: add a new file</span><br><span class="line">* 594eabd (main) main: made a change to file2</span><br><span class="line">*   6d58973 Merge branch <span class="string">&#x27;iss37&#x27;</span></span><br><span class="line">|\</span><br><span class="line">| * d222cd6 (iss37) iss37: made a achange to file2</span><br><span class="line">* | 9ba0744 (hotfix) hotfix: made a change to file1</span><br><span class="line">|/</span><br><span class="line">* 81306fe made changes to file1 and file3</span><br><span class="line">* 548f32f the initial commit of repo</span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229225758134.png" class="" title="image-20241229225758134"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout main</span><br><span class="line"></span><br><span class="line">$ git merge feature_a</span><br><span class="line">Updating 594eabd..ac7d58d</span><br><span class="line">Fast-forward</span><br><span class="line"> file_a | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 file_a</span><br><span class="line"> </span><br><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph --all</span><br><span class="line">* ac7d58d (HEAD -&gt; main, feature_a) feature_a: add a new file</span><br><span class="line">* 594eabd main: made a change to file2</span><br><span class="line">*   6d58973 Merge branch <span class="string">&#x27;iss37&#x27;</span></span><br><span class="line">|\</span><br><span class="line">| * d222cd6 (iss37) iss37: made a achange to file2</span><br><span class="line">* | 9ba0744 (hotfix) hotfix: made a change to file1</span><br><span class="line">|/</span><br><span class="line">* 81306fe made changes to file1 and file3</span><br><span class="line">* 548f32f the initial commit of repo</span><br></pre></td></tr></table></figure><img src="/post/fae3668/image-20241229230127060.png" class="" title="image-20241229230127060"><p>从结果上来看，就好将 <code>feature_a</code> 分支上的提交在 <code>main</code> 分支上重放了一遍，然后通过 <code>Fast-forward</code> 方式进行快速合并。</p><p>总结：<code>git rebase</code> 整理了提交历史，使提交历史更加线性，但是丢失了原本的提交记录。假设某个分支已经推送到远程仓库，并且有其他人已经拉取了该分支，并在该分支上提交了变更，如果对这种分支的提交记录执行 <code>git rebase</code>，会使用情况变更的复杂。因此最佳实践就是，只把 <code>git rebase</code> 命令用于推送前整理提交历史，并且只在从未推送至公共仓的提交上执行变基命令。</p><h3 id="git-cat-file"><a href="#git-cat-file" class="headerlink" title="git cat-file"></a><code>git cat-file</code></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git cat-file -p d670460</code></td><td>查看对象内容</td></tr><tr><td><code>git cat-file -t d670460</code></td><td>查看对象类型</td></tr><tr><td><code>git cat-file -p master^&#123;tree&#125;</code></td><td>查看master分支最新提交所指向的树对象内容</td></tr></tbody></table><h3 id="git-ls-tree"><a href="#git-ls-tree" class="headerlink" title="git ls-tree"></a><code>git ls-tree</code></h3><h3 id="git-ls-files"><a href="#git-ls-files" class="headerlink" title="git ls-files"></a><code>git ls-files</code></h3><h3 id="git-rev-parse"><a href="#git-rev-parse" class="headerlink" title="git rev-parse"></a><code>git rev-parse</code></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git rev-parse &lt;branch&gt;</code></td><td>查看分支指向的提交的<code>SHA-1</code></td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/post/e8c9512e.html"/>
      <url>/post/e8c9512e.html</url>
      
        <content type="html"><![CDATA[<p>Git 常用命令：<a href="https://git-scm.com/docs">Reference</a></p><span id="more"></span><h2 id="git-help"><a href="#git-help" class="headerlink" title="git help"></a><code>git help</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git &lt;verb&gt; --help</code></td><td>查看帮助文档</td></tr><tr><td><code>git &lt;verb&gt; -h</code></td><td>查看快速参考</td></tr></tbody></table><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a><code>git config</code></h2><p>根据作用范围，git有如下三种配置文件：</p><table><thead><tr><th>配置文件</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>/etc/gitconfig</code></td><td><code>git config --system</code></td><td>包含系统上所有用户的配置</td></tr><tr><td><code>~/.gitconfig</code></td><td><code>git config --global</code></td><td>只包含当前用户的配置</td></tr><tr><td><code>.git/config</code></td><td><code>git config --local</code></td><td>只包含当前仓库的配置</td></tr></tbody></table><p>和配置有关的常用命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git config user.name</code></td><td>查看单个配置</td></tr><tr><td><code>git config --list </code></td><td>列出所有配置</td></tr><tr><td><code>git config --list --show-origin</code></td><td>列出所有配置及配置所在的文件</td></tr><tr><td><code>git config --global use.name &quot;zhang3&quot;</code></td><td>配置用户名</td></tr><tr><td><code>git config --global use.email &quot;xxx@xxx.com&quot;</code></td><td>配置邮箱</td></tr><tr><td><code>git config --global alias.co checkout</code></td><td>配置别名</td></tr></tbody></table><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><code>git add</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git add &lt;file&gt;...</code></td><td>跟踪&#x2F;暂存文件</td></tr></tbody></table><h2 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a><code>git restore</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git restore --staged &lt;file&gt;...</code></td><td>取消暂存</td></tr><tr><td><code>git restore &lt;file&gt;...</code></td><td>撤销修改</td></tr></tbody></table><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h2><p><code>git status</code>的作用是查看文件的状态，但该命令的输出较为繁琐，可以加上<code>-s</code>选项简化输出。</p><p><code>git status -s</code>的输出中有两栏表示状态，左侧是暂存区状态，右侧是工作区状态：</p><ul><li><code>??</code>：新文件，未跟踪</li><li><code>A </code>：新文件，已跟踪</li><li><code>  M</code>：旧文件，已修改未暂存</li><li><code>M </code>：旧文件，已修改已暂存</li><li><code>MM</code>：旧文件，修改并暂存后再次修改</li></ul><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><code>git diff</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git diff &lt;file&gt;...</code></td><td>查看已修改未暂存的改动</td></tr><tr><td><code>git diff --staged &lt;file&gt;...</code></td><td>查看已暂存未提交的改动</td></tr></tbody></table><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git log</code></td><td>查看提交历史</td></tr><tr><td><code>git log -n</code></td><td>查看最近n次提交历史</td></tr><tr><td><code>git log -p</code></td><td>查看每次提交引入的差异</td></tr><tr><td><code>git log --stat</code></td><td>查看提交的简略统计信息</td></tr><tr><td><code>git log --graph</code></td><td>图形显示分支合并历史</td></tr><tr><td><code>git log --since=&quot;2020-10-10&quot; --until=&quot;2024-10-10&quot;</code></td><td>显示指定时间范围内的提交</td></tr><tr><td><code>git log --grep=&#39;commit&#39;</code></td><td>搜索提交说明中包含指定关键字的提交</td></tr><tr><td><code>git log --name-only</code></td><td>查看已修改的文件清单</td></tr><tr><td><code>git log --name-status</code></td><td></td></tr><tr><td><code>git log --author=&#39;zhang3&#39;</code></td><td>查看指定用户的提交</td></tr><tr><td><code>git log --pretty=formt:&quot;%h - %an, %cd: %s&quot; --date=short</code></td><td>自定义输出格式</td></tr><tr><td><code>git log --oneline --decorate</code></td><td>查看当前各分支所指的提交对象</td></tr><tr><td><code>git log --oneline --decorate --graph</code></td><td>查看提交历史、各个分支的指向以及分支分叉情况</td></tr><tr><td><code>git log master..dev</code></td><td>查看在dev分支但不在master分支的提交</td></tr><tr><td><code>git log ^master dev test</code></td><td>查看在dev和test分支但不在master分支的提交</td></tr><tr><td><code>git log dev test --not master</code></td><td>查看在dev和test分支但不在master分支的提交</td></tr><tr><td><code>git log origin/master..HEAD</code></td><td>查看即将推送到远端的提交</td></tr><tr><td><code>git log master...dev</code></td><td>查看只在其中一个分支上的提交</td></tr></tbody></table><p>统计代码行数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --since=<span class="string">&quot;2021-08-01&quot;</span> --<span class="keyword">until</span>==<span class="string">&quot;2023-05-31&quot;</span> --author=<span class="string">&quot;linfeng&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27; &#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %sn&quot;, add, subs, loc &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a><code>git reflog</code></h2><p>查看<code>HEAD</code>或分支引用指向的历史</p><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a><code>git show</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git show HEAD^</code></td><td>查看<code>HEAD</code>的第1个父提交</td></tr><tr><td><code>git show HEAD~</code></td><td>查看<code>HEAD</code>的第1个父提交</td></tr><tr><td><code>git show HEAD^2</code></td><td>查看<code>HEAD</code>的第2个父提交</td></tr><tr><td><code>git show HEAD~2</code></td><td>查看<code>HEAD</code>的第1个父提交的父提交</td></tr><tr><td><code>git show HEAD^2~</code></td><td>查看<code>HEAD</code>的第2个父提交的父提交</td></tr></tbody></table><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><code>git remote</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git remote -v</code></td><td>查看远程仓库及其url</td></tr><tr><td><code>git remote add &lt;remote-name&gt; &lt;url&gt;</code></td><td>关联远程仓库</td></tr><tr><td><code>git remote rename &lt;remote-name&gt; &lt;another-name&gt;</code></td><td>重命名远程仓库名</td></tr><tr><td><code>git remote rm &lt;remote-name&gt;</code></td><td>删除关联</td></tr></tbody></table><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a><code>git tag</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git tag</code></td><td>列出已有标签</td></tr><tr><td><code>git log -l &#39;v1.0*&#39;</code></td><td>列出特定标签</td></tr><tr><td><code>git log -a v1.0</code></td><td>打附注标签</td></tr><tr><td><code>git log v1.0-lw</code></td><td>打轻量标签</td></tr><tr><td><code>git log -a v0.9 &lt;commit-id&gt;</code></td><td>给历史提交打标签</td></tr><tr><td><code>git push origin v1.0</code></td><td>推送标签</td></tr></tbody></table><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><code>git branch</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git branch dev</code></td><td>创建分支</td></tr><tr><td><code>git checkout dev</code></td><td>切换分支</td></tr><tr><td><code>git checkout -b dev</code></td><td>创建并切换分支</td></tr><tr><td><code>git checkout -b dev origin/dev</code></td><td>从远程分支创建分支</td></tr><tr><td><code>git checkout --track origin/dev</code></td><td>从远程分支创建分支</td></tr><tr><td><code>git checkout tag/1.0 -b 1.0</code></td><td>从tag中创建分支</td></tr><tr><td><code>git branch -u origin/dev</code></td><td>设置本地分支跟踪远程分支</td></tr><tr><td><code>git branch -v</code></td><td>查看每一个分支的最后一次提交</td></tr><tr><td><code>git branch -vv</code></td><td>查看设置的所有跟踪分支</td></tr><tr><td><code>git branch --merged</code></td><td>查看已合并分支</td></tr><tr><td><code>git branch --no-merged</code></td><td>查看未合并分支</td></tr><tr><td><code>git branch -d dev</code></td><td>删除分支</td></tr><tr><td><code>git branch -D dev</code></td><td>强制删除分支</td></tr><tr><td><code>git push origin --delete dev</code></td><td>删除远程分支</td></tr></tbody></table><p><code>git branch | grep &#39;feature_&#39; | xargs git branch -d/-D</code>：批量删除分支</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><code>git merge</code></h2><p><code>fast-forward</code>：当前所在分支指向的提交是被合并分支所指向的提交的直接上游，合并操作只简单的将让当前分支指向被合并分支所指向的提交，这种合并就叫做 <code>fast-forward</code></p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a><code>git rebase</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git co dev</span><br><span class="line">git rebase master</span><br><span class="line">git co master</span><br><span class="line">git merge dev</span><br><span class="line"></span><br><span class="line">git rebase master dev（如果当前分支不是dev，此命令会切到dev分支）</span><br><span class="line">git co master</span><br><span class="line">git merge dev</span><br><span class="line"></span><br><span class="line">git rebase --onto master server client：选中在client分支但不在server分支的修改，将它们在master分支重放</span><br></pre></td></tr></table></figure><p>最佳实践：只把变基命令用于推送前整理提交历史，并且只在从未推送至公共仓的提交上执行变基命令。</p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a><code>git stash</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git stash</code></td><td>储藏修改</td></tr><tr><td><code>git stash save &#39;描述&#39;</code></td><td>储藏修改并命名</td></tr><tr><td><code>git stash list</code></td><td>查看储藏列表</td></tr><tr><td><code>git stash apply</code></td><td>应用储藏</td></tr><tr><td><code>git stash apply --index</code></td><td>如果储藏包含已暂存的文件，需加–index参数</td></tr><tr><td><code>git stash drop</code></td><td>删除储藏</td></tr><tr><td><code>git stash pop</code></td><td>应用并删除储藏</td></tr><tr><td><code>git stash --keep-index</code></td><td>只储藏未暂存的文件</td></tr><tr><td><code>git stash -u</code></td><td>stash默认只储藏已跟踪的文件，想要储藏未跟踪的文件，需加上-u参数</td></tr><tr><td><code>git stash branch &lt;branch_name&gt;</code></td><td>从储藏创建分支</td></tr></tbody></table><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git reset --soft HEAD~</code></td><td>回退到上一个提交，暂存区和工作目录不变</td></tr><tr><td><code>git reset [--mixed] HEAD~</code></td><td>默认模式，回退到上一个提交，取消暂存，保留工作目录的修改</td></tr><tr><td><code>git reset --hard HEAD~</code></td><td>回退到上一个提交，撤销工作目录的所有修改</td></tr></tbody></table><p><code>git reset</code> 会同时移动 <code>HEAD</code> 和分支的指向，<code>git checkout</code> 只移动 <code>HEAD</code></p><h2 id="git-reflog-1"><a href="#git-reflog-1" class="headerlink" title="git reflog"></a><code>git reflog</code></h2><h2 id="git-lfs"><a href="#git-lfs" class="headerlink" title="git lfs"></a><code>git lfs</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git lfs install (需确保本地git lfs已安装)</span><br><span class="line">git lfs track &#123;file_path&#125;  （直接track目录下所有文件）</span><br><span class="line">git add .</span><br><span class="line">git commit -m</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git CheatSheet</title>
      <link href="/post/eae9b1a1.html"/>
      <url>/post/eae9b1a1.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://ndpsoftware.com/git-cheatsheet.html#loc=index;">Git CheatSheet</a></p><span id="more"></span><img src="/post/eae9b1a1/image-20241229232416543.png" class="" title="image-20241229232416543"><img src="/post/eae9b1a1/image-20241229232343336.png" class="" title="image-20241229232343336"><img src="/post/eae9b1a1/image-20241229232443617.png" class="" title="image-20241229232443617"><img src="/post/eae9b1a1/image-20241229232504894.png" class="" title="image-20241229232504894"><img src="/post/eae9b1a1/image-20241229232523811.png" class="" title="image-20241229232523811"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven依赖管理</title>
      <link href="/post/2e9aa5d9.html"/>
      <url>/post/2e9aa5d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Maven 是一个 <strong>项目管理和构建工具</strong>，主要用于 Java 项目的依赖管理、构建自动化以及项目生命周期管理。它由 Apache 基金会开发和维护，旨在简化开发流程，提高生产效率。</p><p>这里主要简单记录一下依赖的范围、依赖的传递原则、以及依赖冲突如何解决。</p><span id="more"></span><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><table><thead><tr><th>依赖范围</th><th>说明</th></tr></thead><tbody><tr><td><code>compile</code></td><td><code>scope</code>元素的缺省值。编译、测试、运行阶段都会引入</td></tr><tr><td><code>test</code></td><td>测试阶段引入</td></tr><tr><td><code>provided</code></td><td>编译、测试阶段引入</td></tr><tr><td><code>runtime</code></td><td>测试、运行阶段引入</td></tr><tr><td><code>system</code></td><td>用于添加本地依赖，不推荐使用</td></tr><tr><td><code>import</code></td><td>与 <code>dependencyManagement</code> 元素配合使⽤，其功能是将⽬标 <code>pom.xml</code> ⽂件中 <code>dependencyManagement</code> 的配置导⼊合并到当前 <code>pom.xml</code> 的 <code>dependencyManagement</code> 中</td></tr></tbody></table><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>有三个模块A、B、C，A依赖B，B依赖C，C是否能传递到A，取决于B依赖C时使用的依赖范围和配置。</p><ul><li><code>compile</code>或<code>runtime</code>依赖可以传递，其他依赖范围不能传递</li></ul><img src="/post/2e9aa5d9/image-20241201105858259.png" class="" title="compile依赖"><img src="/post/2e9aa5d9/image-20241201110755516.png" class="" title="runtime依赖"><img src="/post/2e9aa5d9/image-20241201110400431.png" class="" title="test依赖"><img src="/post/2e9aa5d9/image-20241201110500022.png" class="" title="provided依赖"><ul><li><code>optional</code>为<code>true</code>的依赖不能传递</li></ul><img src="/post/2e9aa5d9/image-20241201111836452.png" class="" title="optional依赖"><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>当直接和间接引用了同一个依赖，最终的依赖版本取决于依赖的路径和顺序。</p><ul><li>最短路径原则</li></ul><p>在下面的截图中，<code>A</code>到<code>jackson-bind</code>有两条依赖路径<code>A-&gt;B-&gt;C-&gt;jackson-databind</code>和<code>A-&gt;jackson-databind</code>，根据最短路径原则，最终<code>A</code>会依赖<code>jackson-databind</code>的<code>2.15.0</code>版本</p><img src="/post/2e9aa5d9/image-20241201113454944.png" class="" title="最短路径原则"><ul><li>声明顺序原则</li></ul><p>在下面截图中，<code>A</code>到<code>jackson-bind</code>的依赖路径包括<code>A-&gt;B-&gt;jackson-databind</code>和<code>A-&gt;C-&gt;jsckson-databind</code>，依赖路径长度一样，所以最短路径依赖原则不适用。此时就需要根据<code>B</code>和<code>C</code>的声明顺序来决定<code>jackson-databind</code>的依赖版本。</p><img src="/post/2e9aa5d9/image-20241201113752360-3024301.png" class="" title="B声明在先"><img src="/post/2e9aa5d9/image-20241201114225143.png" class="" title="C声明在先"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用快捷键</title>
      <link href="/post/566321e7.html"/>
      <url>/post/566321e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h2><table><thead><tr><th>操作</th><th>Windows</th><th>Mac</th></tr></thead><tbody><tr><td>重命名</td><td>Shift+F6</td><td>⇧+Fn+F6</td></tr><tr><td>跳转到某行</td><td>Ctrl+G</td><td>⌘+L</td></tr><tr><td>新建</td><td></td><td>⌘+N</td></tr><tr><td>全局搜索&#x2F;替换</td><td>Ctrl+Shift+F&#x2F;R</td><td>⇧+⌘+F&#x2F;R</td></tr><tr><td>格式化</td><td>Ctrl+Alt+L</td><td>⌘+⌥+L</td></tr><tr><td>import优化</td><td>Ctrl+Alt+O</td><td>⌃+⌥+O</td></tr><tr><td>复制行</td><td>Ctrl+D</td><td>⌘+D</td></tr></tbody></table><span id="more"></span><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table><thead><tr><th>操作</th><th>Windows</th><th>Mac</th></tr></thead><tbody><tr><td>移动光标到代码块开始位置</td><td>Ctrl+[</td><td>⌘+⌥+[</td></tr><tr><td>移动光标到代码块结束位置</td><td>Ctrl+]</td><td>⌘+⌥+]</td></tr><tr><td>移动光标到当前行的开始位置</td><td>Home</td><td>⌘+←</td></tr><tr><td>移动光标到当前行的结束位置</td><td>End</td><td>⌘+→</td></tr><tr><td>移动光标到上一个单词</td><td>Ctrl+←</td><td>⌥+←</td></tr><tr><td>移动光标到下一个单词</td><td>Ctrl+→</td><td>⌥+→</td></tr></tbody></table><h2 id="代码块操作"><a href="#代码块操作" class="headerlink" title="代码块操作"></a>代码块操作</h2><table><thead><tr><th>操作</th><th>Windows</th><th>Mac</th></tr></thead><tbody><tr><td>块注释</td><td>Ctrl+Shift+&#x2F;</td><td>⌘+⇧+&#x2F;</td></tr><tr><td>展开&#x2F;折叠代码块</td><td>Ctrl+加号&#x2F;减号</td><td>⌘+加号&#x2F;减号</td></tr><tr><td>展开&#x2F;折叠全部代码块</td><td>Ctrl+Shift+加号&#x2F;减号</td><td>⌘+⇧+加号&#x2F;减号</td></tr></tbody></table><h2 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h2><table><thead><tr><th>操作</th><th>Windows</th><th>Mac</th></tr></thead><tbody><tr><td>字面量切换大小写</td><td>Ctrl+Shift+U</td><td>⌘+⇧+U</td></tr><tr><td>删除光标后面的单词</td><td>Ctrl+Delete</td><td>⌥+Fn+⌫</td></tr><tr><td>删除光标前面的单词</td><td>Ctrl+BackSpace</td><td>⌥+⌦</td></tr><tr><td>包围代码</td><td>Ctrl+Alt+T</td><td>⌘+⌥+T</td></tr><tr><td>生成代码</td><td>Alt+Insert</td><td>⌃+Enter</td></tr><tr><td>覆盖方法</td><td>Ctrl+O</td><td>⌘+O</td></tr><tr><td>实现方法</td><td>Ctrl+I</td><td>⌘+I</td></tr><tr><td>更改签名</td><td>Ctrl+F6</td><td>⌘+Fn+F6</td></tr><tr><td>提取方法</td><td>Ctrl+Alt+M</td><td>⌘+⌥+M</td></tr><tr><td>提取变量</td><td>Ctrl+Alt+V</td><td>⌘+⌥+V</td></tr><tr><td>提取字段</td><td>Ctrl+Alt+F</td><td>⌘+⌥+F</td></tr><tr><td>提取参数</td><td>Ctrl+Alt+P</td><td>⌘+⌥+P</td></tr><tr><td>向上插入一行</td><td>Ctrl+Alt+Enter</td><td>⌘+Enter</td></tr><tr><td>向下插入一行</td><td>Shift+Enter</td><td>⇧+Enter</td></tr></tbody></table><h2 id="类和方法"><a href="#类和方法" class="headerlink" title="类和方法"></a>类和方法</h2><table><thead><tr><th>操作</th><th>Windows</th><th>Mac</th></tr></thead><tbody><tr><td>弹窗显示当前类结构</td><td>Ctrl+F12</td><td>⌘+Fn+F12</td></tr><tr><td>查看继承树结构</td><td>Ctrl+H</td><td>⌃+H</td></tr><tr><td>类的UML关系图</td><td>Ctrl+Alt+U</td><td>⌥+⌘+U</td></tr><tr><td>弹窗显示或跳转到父类（接口）</td><td>Ctrl+U</td><td>⌘+U</td></tr><tr><td>弹窗显示或跳转到子类</td><td>Ctrl+Alt+B</td><td>⌥+⌘+B</td></tr><tr><td>跳转到选择目标的定义处或使用处</td><td>Ctrl+B</td><td>⌘+B</td></tr><tr><td>查看方法调用链</td><td>Ctrl+Alt+H</td><td>⌃+⌘+H</td></tr><tr><td>形参提示</td><td>Ctrl+P</td><td>⌘+P</td></tr><tr><td>查看文档</td><td>Ctrl+Q</td><td>⌃+J</td></tr></tbody></table><h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><table><thead><tr><th>操作</th><th><strong>Windows</strong></th><th><strong>Mac</strong></th></tr></thead><tbody><tr><td>Run启动</td><td>Shift+F10</td><td>⌃+R</td></tr><tr><td>Debug启动</td><td>Shift+F9</td><td>⌃+D</td></tr><tr><td>停止</td><td>Ctrl+F2</td><td>⌘+Fn+F2</td></tr><tr><td>下一步（Step Over）</td><td>F8</td><td>Fn+F8</td></tr><tr><td>下一步（Step In）</td><td>F7</td><td>Fn+F7</td></tr><tr><td>选择进入哪个方法</td><td>Shift+F7</td><td>⇧+Fn+F7</td></tr><tr><td>跳出（Step Out）</td><td>Shift+F8</td><td>⇧+Fn+F8</td></tr><tr><td>恢复运行</td><td>F9</td><td>⌥+⌘+R</td></tr><tr><td>运行到光标处</td><td>Alt+F9</td><td>⌥+Fn+F9</td></tr><tr><td>加上&#x2F;取消断点</td><td>Ctrl+F8</td><td>⌘+Fn+F8</td></tr><tr><td>查看所有断点</td><td>Ctrl+Shift+F8</td><td>⌘+⇧+Fn+F8</td></tr><tr><td>计算表达式</td><td>Alt+F8</td><td>⌥+Fn+F8</td></tr></tbody></table><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><table><thead><tr><th>操作</th><th>Windows</th><th>Mac</th></tr></thead><tbody><tr><td>提交代码</td><td>Ctrl+K</td><td>⌘+K</td></tr><tr><td>推送代码</td><td>Ctrl+Shift+K</td><td>⇧+⌘+K</td></tr><tr><td>拉取代码</td><td>Ctrl+T</td><td>⌘+T</td></tr><tr><td>弹出git操作</td><td>Alt+&#96;</td><td>⌃+V</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis Plus基础</title>
      <link href="/post/e9be66b7.html"/>
      <url>/post/e9be66b7.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a> 是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>这篇笔记主要记录MyBatis-Plus的入门使用，主要包含如下内容：</p><ul><li>使用MyBatis-Plus实现基本的CRUD</li><li>使用条件构造器构建查询和更新语句</li><li>使用MyBatis-Plus的基本注解</li><li>使用MyBatis-Plus的扩展功能</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>创建表并插入一些数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `mp`;</span><br><span class="line">USE `mp`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">19</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;注册手机号&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">`info` JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细信息&#x27;</span>,</span><br><span class="line">`status` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;使用状态（1正常 2冻结）&#x27;</span>,</span><br><span class="line">`balance` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账户余额&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`update_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `username` (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br><span class="line">COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span></span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line">ROW_FORMAT<span class="operator">=</span>COMPACT</span><br><span class="line">AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `phone`, `info`, `status`, `balance`, `create_time`, `update_time`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112224&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">1600</span>, <span class="string">&#x27;2023-05-19 20:50:21&#x27;</span>, <span class="string">&#x27;2023-06-19 20:50:21&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112223&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 19, &quot;gender&quot;: &quot;female&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">600</span>, <span class="string">&#x27;2023-05-19 21:00:23&#x27;</span>, <span class="string">&#x27;2023-06-19 21:00:23&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Hope&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112222&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 25, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">100000</span>, <span class="string">&#x27;2023-06-19 22:37:44&#x27;</span>, <span class="string">&#x27;2023-06-19 22:37:44&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Thomas&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;17701265258&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 29, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">800</span>, <span class="string">&#x27;2023-06-19 23:44:45&#x27;</span>, <span class="string">&#x27;2023-06-19 23:44:45&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建工程、新建<code>User</code>、<code>UserMapper</code></p><img src="/post/e9be66b7/image-20241102093153288.png" class="" title="image-20241102093153288"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.itheima:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="单表CRUD"><a href="#单表CRUD" class="headerlink" title="单表CRUD"></a>单表CRUD</h3><p>MyBatis Plus提供了一个基础的<code>BaseMapper</code>接口，实现了单表的CRUD，自定义Mapper只要继承了<code>BaseMapper</code>，就无需实现单表的CRUD了。</p><img src="/post/e9be66b7/image-20241102144540554.png" class="" title="image-20241102144540554"><p>创建一个测试类，测试基本的CRUD功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;18688990011&quot;</span>);</span><br><span class="line">        user.setBalance(<span class="number">200</span>);</span><br><span class="line">        user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 24, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">        user.setCreateTime(LocalDateTime.now());</span><br><span class="line">        user.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testQueryByIds</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setBalance(<span class="number">20000</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">5L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>MyBatis Plus通过扫描实体类，基于反射将实体类映射到数据库中的表。默认情况下，实体类的类名和字段名与表中的列名应该一一对应，如果出现不一致，就需要通过注解进行指定。</p><p>常用注解</p><ul><li><code>@TableName</code>：指定表名</li><li><code>@TableId</code>：指定主键</li><li><code>@TableFiled</code>：指定普通字段</li></ul><p>其中 <code>@TableField</code> 的常见使用场景如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 如果id是自增长类型，需明确指定IdType为AUTO</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 成员变量名与表字段名不一致</span></span><br><span class="line">    <span class="meta">@TableFiled(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 以is开头的布尔类型成员变量，序列化时会将is去除，导致无法与表中is_married匹配，需手动指定</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_married&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isMarried;</span><br><span class="line">    <span class="comment">// 表字段是数据库关键字</span></span><br><span class="line">    <span class="meta">@TableField(&quot;`order`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer order;</span><br><span class="line">    <span class="comment">// 成员变量不是数据库字段</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><p>MyBatis-Plus除了支持以<code>id</code>作为基本的查询条件之外，还支持通过<code>Wrapper</code>构造复杂的查询条件。<code>Wrapper</code>的继承关系图如下：</p><img src="/post/e9be66b7/image-20241102143801416.png" class="" title="image-20241102143801416"><p>其中子类<code>AbstractWrapper</code>提供了<code>where</code>子句中会用到的所有条件构造方法：</p><img src="/post/e9be66b7/image-20241102144423632.png" class="" title="image-20241102144423632"><h3 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a><code>QueryWrapper</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;balance&quot;</span>) <span class="comment">// 硬编码</span></span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;ho&quot;</span>)</span><br><span class="line">        .ge(<span class="string">&quot;balance&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">final</span> List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a><code>UpdateWrapper</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .setSql(<span class="string">&quot;balance = balance + 1000&quot;</span>) </span><br><span class="line">        .in(<span class="string">&quot;id&quot;</span>, <span class="number">1L</span>, <span class="number">2L</span>); <span class="comment">// 硬编码</span></span><br><span class="line">    userMapper.update(updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LambdaQueryWrapper"><a href="#LambdaQueryWrapper" class="headerlink" title="LambdaQueryWrapper"></a><code>LambdaQueryWrapper</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(User::getId, User::getUsername, User::getBalance)</span><br><span class="line">        .like(User::getUsername, <span class="string">&quot;ho&quot;</span>)</span><br><span class="line">        .ge(User::getBalance, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">final</span> List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LambdaUpdateWrapper"><a href="#LambdaUpdateWrapper" class="headerlink" title="LambdaUpdateWrapper"></a><code>LambdaUpdateWrapper</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .setSql(<span class="string">&quot;balance = balance - 500&quot;</span>)</span><br><span class="line">        .in(User::getId, <span class="number">1L</span>, <span class="number">2L</span>);</span><br><span class="line">    userMapper.update(updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IService接口"><a href="#IService接口" class="headerlink" title="IService接口"></a>IService接口</h2><p><code>BaseMapper</code>接口提供了基本的增删改查接口，但是这些接口只能操作单个对象。因此MyBatis-Plus另外提供了一个<code>IService</code>接口，接口包含了一堆批处理接口，实现类<code>ServiceImpl</code>提供了基本的实现。</p><img src="/post/e9be66b7/image-20241102164213193.png" class="" title="image-20241102164213193"><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>swagger配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;接口文档&quot;</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.tw.mbp.controller</span></span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBalanceByIds</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> LambdaQueryWrapper&lt;User&gt; queryWrapper, <span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set balance = balance - #&#123;amount&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;amount&quot;)</span> Integer amount)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer amount)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 简单CURD直接使用IService中定义好的方法，如getById()方法</span></span><br><span class="line"><span class="comment">         * 业务处理在自定义service中实现，如用户状态校验、余额校验</span></span><br><span class="line"><span class="comment">         * 需要编写额外SQL在自定义Mapper中实现，如deductBalance()方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户状态校验</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在或已被冻结&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 余额校验</span></span><br><span class="line">        <span class="keyword">if</span> (user.getBalance() &lt; amount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新余额</span></span><br><span class="line">        <span class="built_in">this</span>.baseMapper.deductBalance(id, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring推荐使用构造函数注入，因此这里不使用@Autowired注解；</span></span><br><span class="line">    <span class="comment">// 但是如果类的字段过多，构造函数会显得臃肿，可以用final修饰符加@RequiredArgsConstructor注解实现字段注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;扣减余额&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;/deduct/&#123;amount&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@PathVariable</span> Integer amount)</span> &#123;</span><br><span class="line">        userService.deductBalance(id, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda方法"><a href="#lambda方法" class="headerlink" title="lambda方法"></a>lambda方法</h3><p><code>lambdaQuery()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lambdaQuery()</span><br><span class="line">        .like(StrUtil.isNotBlank(query.getName()), User::getUsername, query.getName())</span><br><span class="line">        .eq(query.getStatus() != <span class="literal">null</span>, User::getStatus, query.getStatus())</span><br><span class="line">        .ge(query.getMinBalance() != <span class="literal">null</span>, User::getBalance, query.getMinBalance())</span><br><span class="line">        .le(query.getMaxBalance() != <span class="literal">null</span>, User::getBalance, query.getMaxBalance())</span><br><span class="line">        .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lambdaUpdate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer amount)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验用户状态</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在或已被冻结&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验余额</span></span><br><span class="line">    <span class="keyword">if</span> (user.getBalance() &lt; amount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新余额</span></span><br><span class="line">    <span class="comment">// this.baseMapper.deductBalance(id, amount);</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newBalance</span> <span class="operator">=</span> user.getBalance() - amount;</span><br><span class="line">    lambdaUpdate()</span><br><span class="line">        .set(User::getBalance, newBalance)</span><br><span class="line">        .set(newBalance &lt;= <span class="number">0</span>, User::getStatus, <span class="number">2</span>)</span><br><span class="line">        .eq(User::getId, id)</span><br><span class="line">        .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>当要插入多条数据时，如果逐条插入（调用<code>save()</code>方法），效率较低，因为每次插入都会请求网络，数据库层面的sql也是逐条执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveOneByOne</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5_0000</span>; i++) &#123;</span><br><span class="line">        userService.save(buildUser(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗费时间&quot;</span> + (endTime - startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/e9be66b7/image-20241102213505591.png" class="" title="image-20241102213505591"><p>为了提高效率，可以改用批量插入（调用<code>saveBatch()</code>方法），<code>saveBatch()</code>基于预编译处理，只需发起少量网络请求，但数据库层面的sql依然是逐条执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5_0000</span>; i++) &#123;</span><br><span class="line">        users.add(buildUser(i));</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            userService.saveBatch(users);</span><br><span class="line">            users.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗费时间&quot;</span> + (endTime - startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/e9be66b7/image-20241102213654618.png" class="" title="image-20241102213654618"><p>为了是批量插入的效率最大化，需开启<code>rewriteBatchedStatements=true</code>，开启后数据库会重写sql，多条插入语句会合并成一条来执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></span><br></pre></td></tr></table></figure><img src="/post/e9be66b7/image-20241102213940690.png" class="" title="image-20241102213940690"><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLogicDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    userService.removeById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><img src="/post/e9be66b7/image-20241102231813017.png" class="" title="image-20241102231813017"><p>开启逻辑删除功能后，查询操作的过滤条件默认都会带上 <code>deleted = 0</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWithLogicDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/e9be66b7/image-20241102232415756.png" class="" title="image-20241102232415756"><p>PS：逻辑删除会导致表中数据越来越多，随着数据的堆积会影响查询效率。</p><h3 id="枚举映射"><a href="#枚举映射" class="headerlink" title="枚举映射"></a>枚举映射</h3><p>枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">    NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">// 指定与表中字段映射的枚举字段</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonValue</span> <span class="comment">// 指定序列化返回给前端的枚举字段</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure><h3 id="JSON映射"><a href="#JSON映射" class="headerlink" title="JSON映射"></a>JSON映射</h3><p>将表中<code>json</code>类型字段转换成实体类中对象成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> ExtraInfo info;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtraInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动填充字段"><a href="#自动填充字段" class="headerlink" title="自动填充字段"></a>自动填充字段</h3><img src="/post/e9be66b7/image-20241103020436064.png" class="" title="image-20241103020436064"><p><code>user</code>表的时间字段定义了默认值，因此在插入数据时无需手动填充这两个字段的值。但是如果定义表时未指定字段的默认值，可以使用MyBatis-Plus提供的自动填充字段功能在插入数据时自动填充数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;create_time&quot;, fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;update_time&quot;, fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);</span><br><span class="line">        paginationInnerInterceptor.setMaxLimit(<span class="number">100L</span>);</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPaginationInnerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    page.setOrders(OrderItem.ascs(<span class="string">&quot;balance&quot;</span>));</span><br><span class="line">    page = userService.page(page);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><img src="/post/e9be66b7/image-20241103005233009.png" class="" title="image-20241103005233009"><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>更新时会增加一个version条件，如果version和之前查出来的不一致，就停止更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">OptimisticLockerInnerInterceptor</span> <span class="variable">optimisticLockerInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(optimisticLockerInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testOptimisticLockerInnerInterceptor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="number">2L</span>);</span><br><span class="line">    user.setBalance(<span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userService.getById(<span class="number">2L</span>);</span><br><span class="line">        user1.setBalance(<span class="number">888</span>);</span><br><span class="line">        userService.updateById(user1);</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">updated</span> <span class="operator">=</span> userService.updateById(user);</span><br><span class="line">    Assertions.assertFalse(updated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><img src="/post/e9be66b7/image-20241103015855684.png" class="" title="image-20241103015855684"><img src="/post/e9be66b7/image-20241103020004869.png" class="" title="image-20241103020004869"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> MyBatis-Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis基础</title>
      <link href="/post/4658a061.html"/>
      <url>/post/4658a061.html</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>创建<code>user</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pwd` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><span id="more"></span><p>创建maven工程，并定义<code>User</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>定义 <code>UserMapper</code>，并定义一个查询所有用户的方法<code>listUsers</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources&#x2F;mapper目录下创建<code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在resources目录下创建<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Time_Wait7&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义<code>MyBatisUtil</code>，用于获取<code>SqlSession</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">            userDao.listUsers().forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单CRUD"><a href="#简单CRUD" class="headerlink" title="简单CRUD"></a>简单CRUD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span>;</span><br><span class="line">    </span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h4><p>在<code>UserMapper.xml</code>编写对应的sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span></span><br><span class="line">        insert into User(name,pwd) values(#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update User set name = #&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from User where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from User where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tw.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tw.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式，根据id查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式，添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(name, pwd) values(#&#123;name&#125;, #&#123;password&#125;) &quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式，更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update user set pwd = #&#123;password&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式，删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>方式一：自定义sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsersByPage</span><span class="params">(<span class="meta">@Param(&quot;offset&quot;)</span> Integer offset, <span class="meta">@Param(&quot;limit&quot;)</span> Integer limit)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUsersByPage&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from User limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：<code>RowBounds</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsersByRowBounds</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUsersByPage&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListUsersByRowBounds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;com.tw.mybatis.dao.UserDao.listUsersByRowBounds&quot;</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>直接将数据库连接信息硬编码在<code>mybatis-config.xml</code>文件中不够优雅，数据库连接属性可以在外部进行配置，并可以进行动态替换。</p><p>创建<code>db.properties</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xxx</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>在上述例子中可以看到，<code>resultType</code>属性需要写类的全路径，有点繁琐，可以配置别名简化书写。配置别名有以下两种方式：</p><p>方式一：为指定类配置别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.tw.mybatis.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：指定包下的实体类默认以类名小写作为别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.tw.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置别名之后，<code>resultType</code>就可以简写如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from User where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="简单映射"><a href="#简单映射" class="headerlink" title="简单映射"></a>简单映射</h3><p>如果实体类属性和表字段不一致，就需要手动指定映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表字段是pwd</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定实体类属性与表字段的映射关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listUsers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from User</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复杂映射"><a href="#复杂映射" class="headerlink" title="复杂映射"></a>复杂映射</h3><h4 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h4><p>创建<code>student</code>和<code>teacher</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fk_tid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_tid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br></pre></td></tr></table></figure><p>定义<code>Student</code>和<code>Teacher</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>Mapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/TeacherMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="association"><a href="#association" class="headerlink" title="association"></a><code>association</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询学生信息，同时包含老师信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">listStudentsWithTeacher</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子查询方式"><a href="#子查询方式" class="headerlink" title="子查询方式"></a>子查询方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudentsWithTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="连表查询方式"><a href="#连表查询方式" class="headerlink" title="连表查询方式"></a>连表查询方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudentsWithTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithTeacher2&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid, s.name sname, t.id tid, t.name tname</span><br><span class="line">        from student s left join teacher t</span><br><span class="line">        on s.tid = t.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a><code>collection</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Teacher&gt; <span class="title function_">selectList</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line">    Teacher <span class="title function_">getTeacherWithStudents</span><span class="params">(<span class="meta">@Param(&quot;tid&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子查询方式-1"><a href="#子查询方式-1" class="headerlink" title="子查询方式"></a>子查询方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherWithStudents&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;listStudentByTid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherWithStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherWithStudents&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudentByTid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where tid = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="连表查询方式-1"><a href="#连表查询方式-1" class="headerlink" title="连表查询方式"></a>连表查询方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherWithStudents&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherWithStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherWithStudents&quot;</span>&gt;</span></span><br><span class="line">        select t.id tid, t.name tname, s.id sid, s.name sname</span><br><span class="line">        from teacher t left join student s</span><br><span class="line">        on t.id = s.tid</span><br><span class="line">        where t.id = #&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>创建<code>blog</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;作者&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `views` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br></pre></td></tr></table></figure><p>定义<code>Blog</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>BlogMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>BlogMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.mybatis.dao.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>mybatis-config.xml</code>添加映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a><code>if</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">List&lt;Blog&gt; <span class="title function_">listBlogs</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listBlogs&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog</span><br><span class="line">    where  1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author like concat(&#x27;%&#x27;, #&#123;author&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title like concat(&#x27;%&#x27;, #&#123;title&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span></span><br><span class="line">        and create_time &gt; #&#123;createTime&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views != null&quot;</span>&gt;</span></span><br><span class="line">        and views &gt; #&#123;views&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListBlogs</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BlogMapper</span> <span class="variable">blogMapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;learning&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> List&lt;Blog&gt; blogs = blogMapper.listBlogs(params);</span><br><span class="line">        blogs.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a><code>where</code></h3><p>前面的例子中为了避免拼接出如下错误sql，手动加了条件<code>1 = 1</code>，这样虽然能解决问题，但显得不够优雅，为此MyBatis提供了<code>&lt;where&gt;</code>标签，可以更好地解决这个问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Blog</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Blog</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"><span class="keyword">and</span> title <span class="keyword">like</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listBlogs&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author like concat(&#x27;%&#x27;, #&#123;author&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            and title like concat(&#x27;%&#x27;, #&#123;title&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span></span><br><span class="line">            and create_time &gt; #&#123;createTime&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views != null&quot;</span>&gt;</span></span><br><span class="line">            and views &gt; #&#123;views&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><p>与<code>where</code>标签类似，<code>set</code>标签可以去除可能多余的字符，保证sql拼接正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBlog</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span>&gt;</span></span><br><span class="line">    update Blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span></span><br><span class="line">            create_time = #&#123;createTime&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views != null&quot;</span>&gt;</span></span><br><span class="line">            views = #&#123;views&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>choose-when-otherwise</code></p><p>有点类似<code>switch</code>语句，传入哪个条件就用哪个条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">    List&lt;Blog&gt; <span class="title function_">listBlogsByChoose</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listBlogsByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                and title like concat(&#x27;%&#x27;, #&#123;title&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author like concat(&#x27;%&#x27;, #&#123;author&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and 1 = 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a><code>foreach</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">List&lt;Blog&gt; <span class="title function_">listBlogsByForEach</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;String&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listBlogsByForEach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.mybatis.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized底层原理</title>
      <link href="/post/c55fd50b.html"/>
      <url>/post/c55fd50b.html</url>
      
        <content type="html"><![CDATA[<h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><ul><li>普通对象</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">---------------------------------------------------</span>|</span><br><span class="line">|<span class="params">            Object Header (64 bits)                </span>|</span><br><span class="line">|<span class="params">-----------------------</span>|---------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|  <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits)  |<span class="params">  Klass pointer (32 bits)  </span>|</span><br><span class="line">|<span class="params">-----------------------</span>|---------------------------|<span class="params"></span></span><br></pre></td></tr></table></figure><ul><li>数组对象</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">---------------------------------------------------</span>|--------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|                <span class="title class_">Object</span> <span class="title class_">Header</span> (<span class="number">96</span> bits)                            |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-----------------------|<span class="params">---------------------------</span>|--------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|  <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits)  |<span class="params">  Klass pointer (32 bits)  </span>|  array length (<span class="number">32</span> bits)  |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-----------------------|<span class="params">---------------------------</span>|--------------------------|<span class="params"></span></span><br></pre></td></tr></table></figure><ul><li>Mark Word</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|<span class="params">----------------------------------------------------</span>|-------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|             <span class="title class_">Mark</span> <span class="title class_">Word</span> (<span class="number">32</span> bits)      |<span class="params">    State          </span>|</span><br><span class="line">|<span class="params">-----------------------</span>|----------------------------|<span class="params">-------------------------</span>|</span><br><span class="line">|<span class="params">       hashcode:25 </span>| <span class="symbol">age:</span><span class="number">4</span> |<span class="params"> biased_lock:0 </span>| <span class="number">01</span> |<span class="params">  Normal     </span>|</span><br><span class="line">|<span class="params">-----------------------</span>|----------------------------|<span class="params">-------------------------</span>|</span><br><span class="line">|<span class="params">  thread:23 </span>| <span class="symbol">epoch:</span><span class="number">2</span>  |<span class="params"> age:4 </span>| <span class="symbol">biased_lock:</span><span class="number">1</span> |<span class="params"> 01 </span>|          <span class="title class_">Biased</span>         |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-----------------------|<span class="params">----------------------------</span>|-------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|   <span class="symbol">ptr_to_lock_record:</span><span class="number">30</span>    |<span class="params"> 00 </span>|    <span class="title class_">Lightweight</span> <span class="title class_">Locked</span>   |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-----------------------|<span class="params">----------------------------</span>|-------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|           <span class="symbol">ptr_to_heavyweight_monitor:</span><span class="number">30</span>     |<span class="params"> 10 </span>|    <span class="title class_">Heavyweight</span> <span class="title class_">Locked</span>   |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-----------------------|<span class="params">----------------------------</span>|-------------------------|<span class="params"></span></span><br><span class="line"><span class="params"></span>|     |<span class="params"> 11 </span>|       <span class="title class_">Marked</span> <span class="keyword">for</span> <span class="variable constant_">GC</span>     |<span class="params"></span></span><br><span class="line"><span class="params"></span>|-----------------------|<span class="params">----------------------------</span>|-------------------------|<span class="params"></span></span><br></pre></td></tr></table></figure><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a><code>Monitor</code></h2><p><code>Monitor</code> 主要包括三大部分：<code>Owner</code>、<code>EntryList</code>、<code>WaitList</code>。</p><ul><li><p>每个 Java 对象关联一个 <code>Monitor</code> 对象，如果一个线程使用 <code>synchronized</code> 对 Java 对象加锁，<strong>对象的对象头中的 <code>Mark Word</code> 会保存指向 <code>Monitor</code> 对象的指针，并将 <code>Monitor</code> 对象的 <code>Owner</code> 指向该线程。</strong></p></li><li><p>其他线程再对同一对象加锁，会被阻塞，被加入到 <code>Monitor</code> 对象的 <code>EntryList</code> 队列。</p></li><li><p>持有锁的线程在条件不满足时，可以释放锁，线程进入 <code>Monitor</code> 对象的 <code>WaitList</code> 队列，并唤醒 <code>EntryList</code> 的阻塞线程。</p></li></ul><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a><code>synchronized</code></h2><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>如果有多个线程要对同一对象加锁访问，但是这些线程的加锁时间是错开的，也就是说没有锁竞争，那么可以只对对象加轻量级锁。</p><ul><li>线程在对对象加锁时，会在线程的栈帧中创建一个锁记录（Lock Record）。</li><li>然后在 <code>Object Reference</code> 中存储对象的地址，并用 CAS 交换 <code>ptr_to_lock_word 00</code> 与对象的 Mark Word</li><li>CAS 成功，该线程现在持有对象锁。</li><li>CAS 失败<ul><li>锁重入，新整一个锁记录，作为重入的计数</li><li>其他线程持有对象锁，有竞争，锁膨胀</li></ul></li><li>解锁：有锁重入，销毁重入的锁记录；否则用 CAS 交换 Mark Word 与 <code>ptr_to_lock_word 00</code> </li><li>CAS 成功，线程释放对象锁</li><li>CAS 失败，说明轻量级锁已经膨胀为重量级锁，此时要走重量级锁解锁流程</li></ul><h3 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h3><p>如果在尝试加轻量级锁的过程中，CAS 操作失败，说明已经有其他线程加了轻量级锁。出现了竞争，需要将轻量级锁膨胀为重量级锁。</p><p>假设线程 T1 已经对 Object 加了轻量级锁，线程 T2 再想对 Object 加轻量级锁就会失败。此时 JVM 会为 Object 关联一个 Monitor 对象，在 Object 的 Mark Word 中存放 Monitor 对象的地址，并让 Monitor 对象的 Owner 指向 T1，同时将 T2 放入 Monitor 对象的 EntryList 阻塞队列。</p><p>当 T1 释放对象锁时，使用 CAS 交换 Mark Work 和  <code>ptr_to_lock_word 00</code> 会失败，此时进入重量级锁解锁流程。即通过对象 Mark Word 中存储的 Monitor 对象地址找到 Monitor 对象，将 Owner 置为 null，并唤醒 EntryList 中的阻塞线程。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>轻量级锁加锁过程中，同一线程每次重入，仍然要创建锁记录，并通过 CAS 交换  <code>ptr_to_lock_word 00</code> 和对象的 Mark Word，对于性能仍有一定的损耗。</p><p>JDK 6 引入了偏向锁来进一步优化：线程在第一次加锁时，通过 CAS 将线程 ID 设置到对象的 Mark Word 中，之后再重入时，检查 Mark Word 中的线程 ID 是否是自己就行了，省去了多余的 CAS 操作。</p><ul><li>对象创建时，如果开启了偏向锁，对象的 Mark Word 最后三位是 101</li><li>偏向锁有延迟性，一般会在程序启动后 4s 左右生效，可以用 -XX:BiasedLockingStartupDelay&#x3D;0 来禁用延迟</li><li>如果调用了对象 hashCode 方法，会撤销对象的偏向性：在 32 位系统中，hashCode 要占 25 位，有偏向性的对象不能存放 25 位的 hashCode。</li><li>处于偏向状态的对象解锁后，Mark Word 中依然存放着线程 ID</li></ul><p>撤销对象的偏向状态：</p><ul><li>调用 hashCode</li><li>其他线程使用对象</li></ul><p>线程 T1 对 Object 加了偏向锁，执行完之后，线程 T2 对 Object 加锁加的是轻量级锁；</p><p>线程 T1 对 Object 加了偏向锁，执行过程中，调用了 wait 等方法释放锁，线程 T2 对 Object 加锁加的是重量级锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchReBiased</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t1, t2, t3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        List&lt;Dog&gt; list = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">39</span>; i++) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">                list.add(d);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.unpark(t2);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">39</span>; i++) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.unpark(t3);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">39</span>; i++) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">                    System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(ClassLayout.parseInstance(d).toPrintable());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t3.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(ClassLayout.parseInstance(<span class="keyword">new</span> <span class="title class_">Dog</span>()).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程 t1 执行，给 39 个 Dog 对象加了偏向锁（即对象中的 Mark Word 保存了线程 t1 的线程ID）</li><li>线程 t2 执行，为前面 19 个 Dog 对象加轻量级锁，并撤销这 19 个对象的偏向性，并将后 20 个对象批量重偏向到 t2 （即后 20 个对象中的 Mark Word 现在保存了线程 t2 的线程ID）</li><li>线程 t3 执行，前 19 个对象为不可偏向的普通对象，加轻量级锁。第 20 个开始的对象偏向 t2，t3 为这些对象加轻量级锁，并撤销这些对象的偏向性。</li><li>最后主线程中创建的新的 Dog 对象，为普通的不可偏向对象。</li></ul><p><strong>批量重偏向：线程在撤销一个类的对象的偏向性达到 19 次之后，会批量的将该类的其他对象偏向到这个线程</strong></p><p><strong>撤销类的偏向性：当一个类的对象的偏向性被撤销达到 39 次之后，jvm 会撤销整个类的偏向性，即该类新创建的对象是普通的不可偏向对象。</strong></p><h3 id="synchronized-vs-ReentrantLock"><a href="#synchronized-vs-ReentrantLock" class="headerlink" title="synchronized vs ReentrantLock"></a><code>synchronized</code> vs <code>ReentrantLock</code></h3><ul><li><p>synchronized 是 JVM 实现的，ReentrantLock 是 JDK 实现的</p></li><li><p>synchronized 不可中断，ReentrantLock 可中断</p></li><li><p>synchronized 非公平，ReentrantLock 默认也是非公平，可设置为公平</p></li><li><p>synchronized 只能锁定一个对象，ReentrantLock 可以锁定多个对象</p></li></ul><p>使用选择：</p><p>除非要使用 ReentrantLock 的高级功能，否则建议优先使用 synchronized。</p><p>JVM 会确保 synchronized 锁的释放，不用担心没有释放而导致死锁问题。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM基础</title>
      <link href="/post/8a392f6c.html"/>
      <url>/post/8a392f6c.html</url>
      
        <content type="html"><![CDATA[<h2 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h2><p>线程私有：程序计数器、虚拟机栈、本地方法栈</p><p>线程共享：堆、方法区</p><p>直接内存：申请与释放本质上是调用Unsafe的allocateMemory和freeMemory</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>当前线程执行的字节码的行号指示器。</p><p>特点：</p><ul><li>线程私有</li><li>唯一不会出现内存溢出的区域</li></ul><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>线程的工作内存，每调用一个方法，就会产生一个栈帧，方法的调用与返回，对应着栈帧在虚拟机栈的入栈与出栈。</p><p>栈帧：存储局部变量表、操作数栈、动态链接、方法出口等信息</p><p>线程请求的栈深度超过了虚拟机允许的大小，抛出 StackOverflowError；创建线程时，没有足够的内存分配给线程作为虚拟机栈，抛出 OutOfMemoryError。</p><p>特点：</p><ul><li>线程私有</li><li>可能会出现 StackOverflowError</li></ul><p>栈内存溢出示例：</p><p>Case1：递归调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackOverflowDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Case2：循环解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonTransfer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">        dept.setName(<span class="string">&quot;Market&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setName(<span class="string">&quot;zhang3&quot;</span>);</span><br><span class="line">      emp.setDept(dept);</span><br><span class="line"></span><br><span class="line">        dept.setEmpList(Lists.newArrayList(emp));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>.writeValueAsString(dept));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; empList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@JsonIgnore</span> <span class="comment">// 不加这个注解就出出现循环解析，导致栈溢出错误</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程运行诊断案例：</p><p>1、CPU 占用率过高</p><p>排查步骤：</p><ul><li>top：找出 CPU 占用率过高的进程id</li><li>ps ｜ grep 进程 id：找出 CPU 占用率过高的线程id</li><li>jstack 进程id 命令定位到有问题的线程</li></ul><p>2、线程死锁</p><p>排查步骤：</p><ul><li>jstack 进程id</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>作用类似于虚拟机栈，调用本地方法时使用。</p><p>特点：</p><ul><li>线程私有</li><li>可能会出现内存溢出</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>绝大多数对象都在堆内存上分配。</p><p>特点：</p><ul><li>线程共享</li><li>可能会出现 OutOfMemoryError</li></ul><p>堆内存诊断工具：</p><ul><li>jps：查看当前系统有哪些 java 进程</li><li>jmap：查看某一时刻堆内存快照</li><li>jconsole：</li></ul><p>堆内存转储方式：</p><ul><li>jmap -dump:[live],format&#x3D;b,file&#x3D;<file-path> <pid></li><li>jcmd <pid> GC.heap_dump <file-path></li><li>jvisualvm</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors,</p><p>including the special methods used in class and interface initialization and in instance initialization.</p><p>jdk1.8 使用元空间来实现方法区，把 StringTable、静态变量移到了堆中，而元空间主要用来存储类型信息。</p><p>特点：</p><ul><li>线程共享</li><li>可能会出现内存溢出</li></ul><p>元空间内存溢出示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MetaspaceOOM</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MetaspaceOOM</span> <span class="variable">metaspaceOOM</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MetaspaceOOM</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++, j++) &#123;</span><br><span class="line">                <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// jdk版本、访问修饰符、类名、包名、父类、接口</span></span><br><span class="line">                classWriter.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, <span class="string">&quot;Class&quot;</span> + i, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="type">byte</span>[] code = classWriter.toByteArray();</span><br><span class="line">                metaspaceOOM.defineClass(<span class="string">&quot;Class&quot;</span> + i, code, <span class="number">0</span>, code.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时常量池</p><p><strong>A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file.</strong></p><p>StringTable 在 jdk1.6 之前，是方法区中运行时常量池的一部分， jdk1.7 之后移到了堆中。</p><p>在 jdk1.6 之前，full GC 才会触发永久代的垃圾回收，回收效率很低，如果有大量字符串放入 StringTable，容易导致永久代内存溢出。</p><p>StringTable 放入堆中之后，只要有 minor GC，就会触发 StringTable 的垃圾回收，减少了无用字符串常量对内存的占用。</p><p>Case：</p><ul><li>jdk1.8</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// s1 指向堆中的 &quot;ab&quot;</span></span><br><span class="line">        s1.intern(); <span class="comment">// 在 StringTable 中放入堆中 &quot;ab&quot; 的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// s2 存的地址就是 StringTable 中指向堆中 &quot;ab&quot; 的地址，即 s2 也指向堆中的 &quot;ab&quot;</span></span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jdk1.6</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// s1 指向堆中的 &quot;ab&quot;</span></span><br><span class="line">        s1.intern(); <span class="comment">// 在 StringTable 创建 &quot;ab&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// s2 指向 StringTable 中的 &quot;ab&quot;</span></span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存如何管理</p><p>直接内存的分配与回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectBufferGC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">_1GB</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(_1GB);</span><br><span class="line">        System.out.println(<span class="string">&quot;分配完毕...&quot;</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始释放...&quot;</span>);</span><br><span class="line">        byteBuffer = <span class="literal">null</span>;</span><br><span class="line">        System.gc();<span class="comment">// 会引发 full GC，比较影响性能，可以设置 -XX:+DisableExplicitGC 禁用显示垃圾回收</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_Unsafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">_1GB</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> getUnsafe();</span><br><span class="line">        <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> unsafe.allocateMemory(<span class="number">0</span>);</span><br><span class="line">        unsafe.setMemory(base, _1GB, (<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">        unsafe.freeMemory(base);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Unsafe.class.getField(<span class="string">&quot;theUnsafe&quot;</span>); <span class="comment">// java.lang.NoSuchFieldException: theUnsafe</span></span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) f.get(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> unsafe;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocateDirect</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectByteBuffer</span>(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="type">int</span> cap) &#123;                </span><br><span class="line"></span><br><span class="line">    <span class="built_in">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">pa</span> <span class="operator">=</span> VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ps</span> <span class="operator">=</span> Bits.pageSize();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> Math.max(<span class="number">1L</span>, (<span class="type">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        base = unsafe.allocateMemory(size); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.setMemory(base, size, (<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    cleaner = Cleaner.create(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">Deallocator</span>(base, size, cap)); <span class="comment">// Cleaner 是一个虚引用类型，当它关联的 this 对象被回收了，就会触发 Deallocator 任务的执行。Deallocator 中的 run 方法调用 Unsafe.freeMemory 释放直接内存。</span></span><br><span class="line">    att = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Deallocator</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> address;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Deallocator</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> size, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unsafe.freeMemory(address);</span><br><span class="line">        address = <span class="number">0</span>;</span><br><span class="line">        Bits.unreserveMemory(size, capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cleaner</span> <span class="keyword">extends</span> <span class="title class_">PhantomReference</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><h3 id="判断对象是否可回收"><a href="#判断对象是否可回收" class="headerlink" title="判断对象是否可回收"></a>判断对象是否可回收</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>为每个对象添加一个引用计数器，引用计数为零的对象就是可回收对象。</p><p>有循环引用导致对象无法回收的问题，主流的 jvm 都没有使用引用计数算法来管理内存。</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>从 GC roots 开始搜索，所有从 GC roots 不可达的对象都是可回收对象。</p><p>GC roots：</p><ul><li>虚拟机栈中引用的对象</li><li>本地方法栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>基本数据类型对应的 Class 对象、一些常驻的异常对象、系统类加载器等</li><li>加有同步锁的对象</li><li>回收新生代时，部分老年代对象</li></ul><p>需要注意的是，要宣告一个对象的真正死亡，需要经过两次标记。</p><ol><li><p>从 GC roots 出发，标记不可达的对象</p></li><li><p>对 F-Queue 对列中的对象进行二次标记</p><p>不可达对象如果重写且还未执行 finalize 方法，会被加入到一个名为 F-Queue 的队列中。在 F-Queue 队列中的对象可以重新被赋值给某个引用，这样二次标记时，这些对象将被移出 F-Queue 队列，从而实现自救。</p></li></ol><h3 id="4-种引用"><a href="#4-种引用" class="headerlink" title="4 种引用"></a>4 种引用</h3><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>最常见的引用类型，也是默认的引用类型。如果一个对象存在强引用，那么垃圾回收器不会回收这个对象，即使系统内存不足时也不会回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// 强引用</span></span><br></pre></td></tr></table></figure><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>用<code>SoftReference</code>类来表示，当一个对象只被软引用引用时，在系统内存不足时，垃圾回收器可能会回收该对象。软引用主要用于对内存敏感的缓存场景，例如缓存大量图片或数据，当系统内存不足时，可以回收这些缓存以避免内存溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个对象并将其放入软引用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        SoftReference&lt;Object&gt; softRef = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空强引用，使得对象只有软引用引用</span></span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟系统内存不足时进行垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在内存充足的情况下，软引用不会被回收，可以正常访问对象</span></span><br><span class="line">        <span class="keyword">if</span> (softRef.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Soft Reference is still available.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Soft Reference is cleared.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>用<code>WeakReference</code>类来表示，弱引用比软引用的生命周期更短，只要垃圾回收器执行垃圾回收操作时，无论系统内存是否足够，都会回收被弱引用引用的对象。弱引用主要用于需要临时持有对象的场景，例如ThreadLocal中的线程私有变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeakReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个对象并将其放入弱引用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        WeakReference&lt;Object&gt; weakRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空强引用，使得对象只有弱引用引用</span></span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 弱引用被回收后，无法再访问对象</span></span><br><span class="line">        <span class="keyword">if</span> (weakRef.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Weak Reference is still available.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Weak Reference is cleared.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>用<code>PhantomReference</code>类来表示，虚引用是最弱的一种引用，它不会对对象的生命周期产生任何影响，也无法通过虚引用获取到对象。主要用于在对象被垃圾回收时，提供一种通知机制，允许在对象被回收时执行一些特定的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PhantomReference&lt;Object&gt; phantomRef = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Object</span>(), referenceQueue); <span class="comment">// 虚引用</span></span><br></pre></td></tr></table></figure><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h4><ul><li>绝大多数对象都是朝生夕死的</li><li>熬过越多次垃圾收集的对象越难以消亡</li><li>跨代引用相对于同代引用来说仅占极少数：Remembered Set</li></ul><p>Minor GC &#x2F; Young GC：新生代的垃圾收集</p><p>Major GC &#x2F; Old GC：老年代的垃圾收集。目前只有 CMS 收集器会有单独收集老年代的行为</p><p>Mixed GC：新生代及部分老年代的垃圾收集。目前只有 G1 会有这种行为</p><p>Full GC：整个堆和方法区的垃圾收集</p><p><strong>Eden 和 Survivor</strong></p><p>新生代基于复制算法进行垃圾收集。新生代的对象绝大部分都是朝生夕死的，为了避免每次垃圾收集都将存活的对象晋升到老年代，就需要在新生代划分出一块保留区域，用于存储新生代垃圾收集后存活下来的对象。</p><p>两个 Survivor 是为了避免出现内存碎片。</p><p>新生代使用复制算法存在的缺陷，每次只能使用 1&#x2F;2 的空间。</p><p>由于存在这样的缺陷，要想办法优化，让可使用内存空间 &gt; 1&#x2F;2。办法是从 eden 区 : survivor 区 &#x3D; 1 : 1，变为 eden 区 : survivor 区 &#x3D; 8 : 2，这样可使用内存空间就变成了 8&#x2F;10。但是这样在下一次 Young GC 后，存活对象移动到 survivor 区，我们的可使用区域只有 2&#x2F;10，太小了。</p><p>继续优化，把新生代分为 eden : survivor0(from) : survivor1(to) &#x3D; 8 : 1 : 1，每次新生代对象在 eden 区创建，上一次 GC 存活的对象在 from 区，下次 GC 时将 eden 区和 from 区中存活的对象，移动至 to 区，然后 from 和 to 身份交换。这样新生代可使用的内存空间就一直是 9&#x2F;10 了。</p><h4 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h4><p>缺点：</p><ul><li>执行效率不稳定，标记和清除两个过程的执行效率都随对象数量增长而降低</li><li>内存碎片</li></ul><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><h4 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h4><p>缺点：</p><ul><li>存活对象多时，移动操作耗时</li></ul><p>PS：标记-清除是一种非移动式收集算法，收集时停顿时间更短，但可能导致内存碎片，分配时会更复杂；标记-整理是移动式收集算法，收集时停顿时间更长，但分配时更简单。因为内存分配相对于垃圾收集来说是更频繁的行为，所以整体而言，标记-整理算法能获得更高的吞吐量。</p><p>PS2：CMS收集器采用的标记-清除算法，但在内存空间碎片化影响到对象分配时，会采用标记-整理算法收集一次，以获得规整的内存空间。</p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ol><li>加载（Loading）：将类的字节码从磁盘或其他地方读取到内存，并创建一个对应的Class对象。</li><li>验证（Verification）：对类的字节码进行验证，以确保字节码的结构和内容是合法且安全的，防止恶意代码和安全漏洞的出现。</li><li>准备（Preparation）：为类的静态变量分配内存空间，并设置默认的初始值。</li><li>解析（Resolution）：将类、方法、字段等符号引用解析为实际的内存地址，从而使得类能够被正确地访问和调用。</li><li>初始化（Initialization）：执行类的初始化代码，包括静态代码块和静态变量的赋值操作，从而完成类的初始化工作。</li></ol><p>需要注意的是，Java的类是延迟加载的，即在运行时根据需要加载类，而不是一次性加载所有的类。同时，Java的类加载采用了双亲委派模型，这种模型有助于保护Java的核心类库不被恶意代码污染，并且能够实现类的共享和复用。</p><h3 id="触发类的加载的场景"><a href="#触发类的加载的场景" class="headerlink" title="触发类的加载的场景"></a>触发类的加载的场景</h3><ul><li><p>类的实例化</p></li><li><p>访问类的静态成员</p></li><li><p>调用类的静态方法</p></li><li><p>Class.forName()、ClassLoader.loadClass()等反射方法</p></li><li><p>加载子类时会加载父类</p></li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul><li><p>启动类加载器（Bootstrap Class Loader）：负责加载Java的核心类库，如java.lang包中的类。它是由JVM内部提供的，通常用C++实现，是Java类加载器的最顶层，无法在Java代码中直接引用。</p></li><li><p>扩展类加载器（Extension Class Loader）：负责加载Java的扩展类库，如java.util包中的类。它是由sun.misc.Launcher$ExtClassLoader类实现的，它的父类加载器是启动类加载器。</p></li><li><p>应用程序类加载器（Application Class Loader）：也称为系统类加载器，负责加载应用程序类路径（Classpath）下的类。它是由sun.misc.Launcher$AppClassLoader类实现的，它的父类加载器是扩展类加载器。</p></li><li><p>自定义类加载器：除了以上三种内置的类加载器外，Java还允许用户通过继承ClassLoader类自定义自己的类加载器，以实现特定的类加载需求，如热部署、插件化等。</p></li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>双亲委派模型（Parent Delegation Model）是Java类加载机制中的一种设计模式，用于控制类的加载顺序和避免类的重复加载。在双亲委派模型中，类加载器会按照一定的顺序进行类的加载，并将加载请求委派给父类加载器，只有在父类加载器找不到类的情况下，才会由子类加载器进行加载。</p><p>具体而言，当一个类加载器需要加载一个类时，它首先会检查是否已经被其父类加载器加载过，如果是，则直接返回已加载的类；如果不是，则将加载请求传递给父类加载器进行加载。如果父类加载器还是找不到该类，则再由当前类加载器自己进行加载，并将加载后的类放入自己的类缓存中，以便后续的加载请求能够直接使用。</p><p>双亲委派模型的优点：</p><ol><li>避免类的重复加载：由于类加载器会先委派给父类加载器进行加载，所以可以避免同一个类被多个类加载器重复加载，从而节省内存和提高性能。</li><li>安全性：核心类库通常由启动类加载器加载，而自定义类通常由应用程序类加载器加载，这样可以保证核心类库的安全性，防止被恶意代码替代。</li><li>模块化：通过使用不同的类加载器，可以实现类的模块化和隔离，从而在复杂的应用程序中实现类的共享和复用。</li></ol><p>双亲委派模型的缺点：</p><ol><li>灵活性受限：双亲委派模型限制了类加载器的灵活性，可能导致在某些特定的场景中无法实现自定义的类加载行为。例如，在某些需要在运行时动态生成类或加载非标准格式的类文件的场景中，双亲委派模型可能会受限。</li><li>不适合某些类加载场景：在某些场景中，双亲委派模型可能并不适合，例如在OSGi（Open Service Gateway Initiative）等动态模块化系统中，需要实现更为复杂的类加载策略，而双亲委派模型可能不足以满足需求。</li><li>类冲突：在某些情况下，由于双亲委派模型的存在，可能会导致类的冲突问题。例如，如果应用程序中存在多个版本的同一个类，并且使用了不同的类加载器加载，可能会导致类加载冲突，从而导致程序出现错误或异常。</li><li>性能开销：由于每次类加载都会委派给父类加载器，这可能导致多层级的类加载链，从而增加了类加载的时间和性能开销。特别是在某些大型复杂的应用程序中，可能会出现类加载性能瓶颈。</li></ol><p>如何打破双亲委派模型</p><p>在Java中，可以通过以下几种方式来打破双亲委派模型，实现自定义的类加载行为：</p><ol><li>自定义类加载器：可以继承java.lang.ClassLoader类，并实现自定义的类加载逻辑，从而绕过双亲委派模型。<strong>通过重写ClassLoader的loadClass()方法，可以在类加载过程中自定义加载规则</strong>，例如先尝试自定义加载，如果失败再委派给父类加载器。</li><li>使用Java的扩展类加载器：<strong>Java的扩展类加载器（Extension ClassLoader）并不遵循双亲委派模型，它在加载Java扩展库时不会委派给父类加载器</strong>。因此，可以将自定义的类放置在Java扩展库中，并使用扩展类加载器加载这些类，从而实现对双亲委派模型的绕过。</li><li>使用线程上下文类加载器：Java中的线程上下文类加载器（Thread Context ClassLoader）是一种特殊的类加载器，可以在程序运行时动态设置，从而在某个特定线程中绕过双亲委派模型。通过设置线程上下文类加载器，可以使特定线程加载指定的类，而不受双亲委派模型的限制。</li></ol><p>需要注意的是，打破双亲委派模型可能会导致类加载冲突和安全风险，并且不推荐在普通的Java应用程序中轻易使用这种方式。只有在特定的需求和场景下，合理使用自定义类加载器和线程上下文类加载器，才能确保应用程序的稳定性和安全性。</p><p>Tomcat 是如何打破双亲委派模型的</p><p>Tomcat是一个Web服务器和Servlet容器，它在Java应用程序中使用了自定义的类加载器机制，以实现对双亲委派模型的打破。Tomcat的类加载机制允许Web应用程序在加载类时绕过双亲委派模型，从而实现对自定义类的加载和管理。</p><p>Tomcat的类加载机制主要包括以下几个方面：</p><ol><li>共享类加载器：Tomcat使用了一个称为”Catalina”的共享类加载器，它是Tomcat的顶层类加载器，负责加载Tomcat自身的类和共享的库。这个类加载器在Tomcat的启动过程中被创建，并且它的父类加载器是Java的Bootstrap类加载器，从而绕过了双亲委派模型。</li><li>Web应用程序类加载器：每个部署在Tomcat上的Web应用程序都有一个独立的类加载器，负责加载该Web应用程序的类。这个类加载器的父类加载器是Catalina类加载器，从而实现了Web应用程序在加载类时绕过了双亲委派模型。</li><li>允许自定义类加载器：Tomcat还允许Web应用程序自定义类加载器，从而可以在Web应用程序内部实现自定义的类加载逻辑，包括绕过双亲委派模型。通过设置Web应用程序的Context参数，可以指定自定义的类加载器。</li></ol><p>findClass 和 loadClass 的区别</p><p>在 Java 中，<code>findClass</code> 和 <code>loadClass</code> 是两个用于加载类的方法，它们有以下区别：</p><ol><li><code>findClass</code> 是 <code>ClassLoader</code> 类的保护方法，它用于在自定义的类加载器中查找并加载类。如果在当前类加载器中无法找到指定类，则会调用父类加载器的 <code>findClass</code> 方法进行递归查找，直到找到类或者所有父类加载器都无法找到类。<code>findClass</code> 方法通常由自定义的类加载器用于加载非系统类，例如用户自定义的类、插件类等。</li><li><code>loadClass</code> 是 <code>ClassLoader</code> 类的公有方法，它用于加载类。<code>loadClass</code> 方法首先会尝试从当前类加载器的缓存中查找类，如果找到了就直接返回，否则会调用父类加载器的 <code>loadClass</code> 方法进行递归加载。与 <code>findClass</code> 不同的是，<code>loadClass</code> 方法还会尝试委派给父类加载器加载类，只有在所有父类加载器都无法加载类时，才会调用当前类加载器的 <code>findClass</code> 方法进行类的查找和加载。<code>loadClass</code> 方法通常由系统类加载器用于加载系统类和应用程序类。</li></ol><p>综上所述，<code>findClass</code> 方法主要用于自定义类加载器加载非系统类，而 <code>loadClass</code> 方法主要用于系统类加载器加载系统类和应用程序类，并且 <code>loadClass</code> 方法会尝试委派给父类加载器，而 <code>findClass</code> 方法不会。在自定义类加载器中，如果需要加载非系统类，通常需要覆写 <code>findClass</code> 方法，而不是 <code>loadClass</code> 方法。</p><h2 id="调优工具"><a href="#调优工具" class="headerlink" title="调优工具"></a>调优工具</h2><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><p>虚拟机进程状况工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 输出虚拟机启动时的 jvm 参数</span><br><span class="line">jps -v</span><br></pre></td></tr></table></figure><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>用于监视虚拟机运行时状态信息：类加载、内存、垃圾收集、即时编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jstat [ option vmid [intervals[s|ms] [count]] ]</span><br><span class="line"></span><br><span class="line">-- 每 250 ms 查询一次进程 2764 的垃圾收集情况，查询 20 次</span><br><span class="line">jstat -gc 2764 250 20</span><br></pre></td></tr></table></figure><h4 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h4><p>实时查看和调整虚拟机参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] pid</span><br><span class="line"></span><br><span class="line">jinfo -flag CMSInitiatingOccupancyFraction 1444</span><br></pre></td></tr></table></figure><h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h4><p>用于生成堆转储快照。</p><p>其他获取堆转储快照的方式：</p><ul><li>-XX:+HeapDumpOnOutOfMemoryError</li><li>-XX:+HeapDumpOnCtrlBreak</li><li>kill -3</li><li>jcmd <pid> GC.heap_dump</li></ul><p>除了获取堆转储快照，jmap 还可以查询 finalize 执行队列、java 堆和方法区的详细信息（如空间使用率、使用哪种垃圾收集器等）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmap [option] vmid</span><br><span class="line"></span><br><span class="line">jmap -dump:live,format=b,file=heapdump.hprof 3500</span><br></pre></td></tr></table></figure><h4 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h4><p>堆转储快照分析工具，可与 jmap 配合使用。不过一般较少使用。</p><h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h4><p>用于生成虚拟机当前时刻的线程快照。</p><p>用于定位线程出现长时间停顿的原因，如线程死锁、死循环、请求外部资源导致的长时间挂起等。</p><p>java.lang.Thread 类有一个 getAllStackTraces() 方法，可获取虚拟机中所有线程的 StackTraceElement 对象。</p><h3 id="图形界面工具"><a href="#图形界面工具" class="headerlink" title="图形界面工具"></a>图形界面工具</h3><h4 id="jhsdb"><a href="#jhsdb" class="headerlink" title="jhsdb"></a>jhsdb</h4><h4 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h4><h4 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h4><h4 id="java-mission-control"><a href="#java-mission-control" class="headerlink" title="java mission control"></a>java mission control</h4><h2 id="调优参数"><a href="#调优参数" class="headerlink" title="调优参数"></a>调优参数</h2><ol><li>-Xmx: 设置Java堆的最大内存大小。</li><li>-Xms: 设置Java堆的初始内存大小。</li><li>-Xmn: 设置新生代的大小。</li><li>-XX:NewRatio: 设置新生代和老年代的比例。</li><li>-XX:SurvivorRatio: 设置Eden区和Survivor区的比例。</li><li>-XX:MaxPermSize (Java 8之前) &#x2F; -XX:MaxMetaspaceSize (Java 8及之后): 设置永久代（Java 8之前）或元空间（Java 8及之后）的最大内存大小。</li><li>-XX:ParallelGCThreads: 设置并行垃圾回收的线程数。</li><li>-XX:+UseConcMarkSweepGC: 启用CMS垃圾回收器。</li><li>-XX:+UseG1GC: 启用G1（Garbage-First）垃圾回收器。</li><li>-XX:G1HeapRegionSize：设置 Region 的大小。</li><li>-XX:+HeapDumpOnOutOfMemoryError: 当发生OutOfMemoryError错误时，自动生成堆内存转储文件。</li><li>-XX:HeapDumpPath&#x3D;&lt;路径&gt;: 设置堆内存转储文件的保存路径。</li><li>-XX:+DisableExplicitGC: 禁用显式的垃圾回收操作。</li><li>-XX:CMSInitiatingOccupancyFraction：设置老年代的使用比例。</li><li>-XX:PretenureSizeThreshold：设置大对象阈值，超过这个大小直接在老年代分配。</li><li>-XX:MaxTenuringThreshold：设置晋升到老年代的年龄</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者的几种实现方式</title>
      <link href="/post/45099118.html"/>
      <url>/post/45099118.html</url>
      
        <content type="html"><![CDATA[<h2 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait/notify"></a><code>wait/notify</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> empty;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Buffer</span><span class="params">()</span> &#123;</span><br><span class="line">      empty = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产数据</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">(<span class="type">int</span> newData)</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (!empty) &#123; <span class="comment">// 如果缓冲区不为空，则等待</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              wait();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      data = newData; <span class="comment">// 放入数据</span></span><br><span class="line">      empty = <span class="literal">false</span>; <span class="comment">// 标记缓冲区不为空</span></span><br><span class="line">      notify(); <span class="comment">// 通知消费者可以消费数据</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 消费数据</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">consume</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (empty) &#123; <span class="comment">// 如果缓冲区为空，则等待</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              wait();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> <span class="variable">consumedData</span> <span class="operator">=</span> data; <span class="comment">// 取出数据</span></span><br><span class="line">      empty = <span class="literal">true</span>; <span class="comment">// 标记缓冲区为空</span></span><br><span class="line">      notify(); <span class="comment">// 通知生产者可以生产数据</span></span><br><span class="line">      <span class="keyword">return</span> consumedData;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Buffer buffer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Buffer buffer)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.buffer = buffer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">          buffer.produce(i);</span><br><span class="line">          System.out.println(<span class="string">&quot;生产者生产了数据: &quot;</span> + i);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟生产者生产数据的耗时操作</span></span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Buffer buffer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Buffer buffer)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.buffer = buffer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">consumedData</span> <span class="operator">=</span> buffer.consume();</span><br><span class="line">          System.out.println(<span class="string">&quot;消费者消费了数据: &quot;</span> + consumedData);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              Thread.sleep(<span class="number">1500</span>); <span class="comment">// 模拟消费者消费数据的耗时操作</span></span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Buffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Buffer</span>();</span><br><span class="line">      <span class="type">Producer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(buffer);</span><br><span class="line">      <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(buffer);</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(producer);</span><br><span class="line">      <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer);</span><br><span class="line"></span><br><span class="line">      producerThread.start();</span><br><span class="line">      consumerThread.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="await-signal"><a href="#await-signal" class="headerlink" title="await/signal"></a><code>await/signal</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (queue.size() == maxSize) &#123;</span><br><span class="line">              <span class="comment">// 缓冲区已满，生产者等待</span></span><br><span class="line">              notFull.await();</span><br><span class="line">          &#125;</span><br><span class="line">          queue.add(num);</span><br><span class="line">          System.out.println(<span class="string">&quot;Produced: &quot;</span> + num);</span><br><span class="line">          notEmpty.signal(); <span class="comment">// 通知消费者缓冲区不为空</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">consume</span><span class="params">()</span> &#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">              <span class="comment">// 缓冲区为空，消费者等待</span></span><br><span class="line">              notEmpty.await();</span><br><span class="line">          &#125;</span><br><span class="line">          num = queue.poll();</span><br><span class="line">          System.out.println(<span class="string">&quot;Consumed: &quot;</span> + num);</span><br><span class="line">          notFull.signal(); <span class="comment">// 通知生产者缓冲区不满</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PipedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PipedOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">PipedInputStream</span> <span class="variable">pipedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedInputStream</span>();</span><br><span class="line">      <span class="type">PipedOutputStream</span> <span class="variable">pipedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedOutputStream</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将管道输入流和管道输出流关联起来</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          pipedInputStream.connect(pipedOutputStream);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建生产者线程和消费者线程</span></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(pipedOutputStream));</span><br><span class="line">      <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(pipedInputStream));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 启动生产者线程和消费者线程</span></span><br><span class="line">      producerThread.start();</span><br><span class="line">      consumerThread.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> PipedOutputStream pipedOutputStream;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(PipedOutputStream pipedOutputStream)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.pipedOutputStream = pipedOutputStream;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 生产者向管道写入数据</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Data &quot;</span> + i;</span><br><span class="line">                  pipedOutputStream.write(data.getBytes());</span><br><span class="line">                  System.out.println(<span class="string">&quot;Produced: &quot;</span> + data);</span><br><span class="line">              &#125;</span><br><span class="line">              pipedOutputStream.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> PipedInputStream pipedInputStream;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(PipedInputStream pipedInputStream)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.pipedInputStream = pipedInputStream;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 消费者从管道读取数据</span></span><br><span class="line">              <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">              <span class="type">int</span> bytesRead;</span><br><span class="line">              <span class="keyword">while</span> ((bytesRead = pipedInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                  System.out.println(<span class="string">&quot;Consumed: &quot;</span> + data);</span><br><span class="line">              &#125;</span><br><span class="line">              pipedInputStream.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建一个容量为10的阻塞队列</span></span><br><span class="line">      BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建生产者线程和消费者线程</span></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(blockingQueue));</span><br><span class="line">      <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(blockingQueue));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 启动生产者线程和消费者线程</span></span><br><span class="line">      producerThread.start();</span><br><span class="line">      consumerThread.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 生产者向阻塞队列添加数据</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Data &quot;</span> + i;</span><br><span class="line">                  blockingQueue.put(data);</span><br><span class="line">                  System.out.println(<span class="string">&quot;Produced: &quot;</span> + data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 消费者从阻塞队列取出数据</span></span><br><span class="line">              <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                  <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> blockingQueue.take();</span><br><span class="line">                  System.out.println(<span class="string">&quot;Consumed: &quot;</span> + data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a><code>semaphore</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建一个初始计数为0的 Semaphore，用于控制生产者线程的访问</span></span><br><span class="line">      <span class="type">Semaphore</span> <span class="variable">producerSemaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="comment">// 创建一个初始计数为1的 Semaphore，用于控制消费者线程的访问</span></span><br><span class="line">      <span class="type">Semaphore</span> <span class="variable">consumerSemaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建生产者线程和消费者线程</span></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(producerSemaphore, consumerSemaphore));</span><br><span class="line">      <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(producerSemaphore, consumerSemaphore));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 启动生产者线程和消费者线程</span></span><br><span class="line">      producerThread.start();</span><br><span class="line">      consumerThread.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> Semaphore producerSemaphore;</span><br><span class="line">      <span class="keyword">private</span> Semaphore consumerSemaphore;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Semaphore producerSemaphore, Semaphore consumerSemaphore)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.producerSemaphore = producerSemaphore;</span><br><span class="line">          <span class="built_in">this</span>.consumerSemaphore = consumerSemaphore;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 生产者线程生产数据</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟生产耗时</span></span><br><span class="line">                  System.out.println(<span class="string">&quot;Produced: Data &quot;</span> + i);</span><br><span class="line">                  producerSemaphore.release(); <span class="comment">// 增加 producerSemaphore 的计数</span></span><br><span class="line">                  consumerSemaphore.acquire(); <span class="comment">// 获取 consumerSemaphore 的许可</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> Semaphore producerSemaphore;</span><br><span class="line">      <span class="keyword">private</span> Semaphore consumerSemaphore;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Semaphore producerSemaphore, Semaphore consumerSemaphore)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.producerSemaphore = producerSemaphore;</span><br><span class="line">          <span class="built_in">this</span>.consumerSemaphore = consumerSemaphore;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 消费者线程消费数据</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                  consumerSemaphore.acquire(); <span class="comment">// 获取 consumerSemaphore 的许可</span></span><br><span class="line">                  Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟消费耗时</span></span><br><span class="line">                  System.out.println(<span class="string">&quot;Consumed: Data &quot;</span> + i);</span><br><span class="line">                  producerSemaphore.release(); <span class="comment">// 增加 producerSemaphore 的计数</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal的原理与应用</title>
      <link href="/post/bcb5f6d4.html"/>
      <url>/post/bcb5f6d4.html</url>
      
        <content type="html"><![CDATA[<p><code>ThreadLocal</code> 的底层原理主要依赖于线程的 <code>ThreadLocalMap</code>。</p><p>在 Java 中，每个线程都有自己的 <code>ThreadLocalMap</code> 实例，<code>ThreadLocalMap</code> 是一个特殊的哈希表，用于存储线程的局部变量副本。<code>ThreadLocalMap</code> 的 <code>key</code> 是 <code>ThreadLocal</code> 实例本身，<code>value</code> 是对应线程的局部变量副本。</p><p>当通过 <code>ThreadLocal</code> 的 <code>set()</code> 方法设置变量值时，会将当前线程作为 <code>key</code>，变量值作为 <code>value</code> 存储在 <code>ThreadLocalMap</code> 中。而当通过 <code>ThreadLocal</code> 的 <code>get()</code> 方法获取变量值时，会根据当前线程作为 <code>key</code> 在 <code>ThreadLocalMap</code> 中查找对应的 <code>value</code>。</p><p>由于每个线程都有自己独立的 <code>ThreadLocalMap</code> 实例，不会受到其他线程的干扰，从而实现了线程间的隔离。这样，每个线程都可以独立地设置和获取自己的局部变量副本，不会影响其他线程的变量值。</p><p>需要注意的是，<code>ThreadLocalMap</code> 使用了一种类似于开放地址法的方式来处理哈希冲突，并且不会进行扩容操作，因此在使用大量 ThreadLocal 实例时，可能会导致 <code>ThreadLocalMap</code> 的性能下降或者内存占用较高。因此，在使用 <code>ThreadLocal</code> 时应该避免创建过多的 ThreadLocal 实例，以免影响系统性能和内存消耗。</p><p><code>ThreadLocal</code> 是 Java 中的一个线程级别的变量容器，用于在多线程环境下，为每个线程维护一个独立的变量副本。每个线程可以通过 <code>ThreadLocal</code> 对象来访问自己线程内部的变量，而不会影响其他线程的访问。</p><p><code>ThreadLocal</code> 的常见用途之一就是实现线程封闭（Thread Confinement），即将一些对象或变量限制在单个线程内部，避免多线程并发访问时出现竞态条件（Race Condition）等并发问题。</p><p>下面以 <code>ThreadLocal</code> 实现生产者&#x2F;消费者模式为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_CAPACITY</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 最大缓冲区容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>); <span class="comment">// 生产的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; buffer = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;() &#123; <span class="comment">// 线程本地变量，用于存储每个线程的缓冲区数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Integer initial`value`() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 初始值为0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建生产者线程和消费者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动生产者线程和消费者线程</span></span><br><span class="line">        producerThread.start();</span><br><span class="line">        consumerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> `value` = data.getAndIncrement(); <span class="comment">// 生产数据</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> buffer.get(); <span class="comment">// 获取线程本地缓冲区数据</span></span><br><span class="line">                    <span class="keyword">if</span> (bufferSize &lt; MAX_CAPACITY) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Produced: Data &quot;</span> + `value`);</span><br><span class="line">                        buffer.set(bufferSize + <span class="number">1</span>); <span class="comment">// 更新线程本地缓冲区数据</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟生产耗时</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> buffer.get(); <span class="comment">// 获取线程本地缓冲区数据</span></span><br><span class="line">                    <span class="keyword">if</span> (bufferSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> `value` = buffer.getAndSet(bufferSize - <span class="number">1</span>); <span class="comment">// 获取并更新线程本地缓冲区数据</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;Consumed: Data &quot;</span> + `value`);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟消费耗时</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，通过 <code>ThreadLocal</code> 实现了每个线程内部独立的缓冲区数据。生产者线程通过 <code>buffer.get()</code> 获取线程本地缓冲区数据，并进行生产操作，更新缓冲区数据。消费者线程也通过 <code>buffer.get()</code> 获取线程本地缓冲区数据，并进行消费操作，更新缓冲区数据。由于每个线程都有自己独立的 <code>buffer</code> 变量副本，不会受到其他线程的干扰，从而实现了线程间的隔离。</p><p>需要注意的是，<code>ThreadLocal</code> 只能在同一个线程内部使用，不能在多线程之间共享数据。每个线程对 <code>ThreadLocal</code> 的操作只会对当前线程内部的变量副本生效，不会影响其他线程。这正是 <code>ThreadLocal</code> 的设计初衷，用于实现线程封闭，将变量限制在单个线程内部，从而避免了多线程并发访问时可能出现的竞态条件等并发问题。</p><p>需要注意的是，在使用 <code>ThreadLocal</code> 时需要谨慎处理内存泄漏问题。由于 <code>ThreadLocal</code> 中的变量副本是与线程绑定的，如果线程不正常终止或者长时间存活，那么 <code>ThreadLocal</code> 中的变量副本可能会一直存在，导致内存泄漏。因此，在使用 <code>ThreadLocal</code> 时应该及时清理，可以通过调用 <code>ThreadLocal.remove()</code> 方法来清理当前线程的变量副本，或者在使用完毕后将 <code>ThreadLocal</code> 对象置为 <code>null</code>，以便让垃圾回收器回收相关的资源。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题</title>
      <link href="/post/a7ef9c4d.html"/>
      <url>/post/a7ef9c4d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The identifier of the encoding used to encode the bytes in &#123;<span class="doctag">@code</span> value&#125;. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span> coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>value</code> 数组被声明为 <code>final</code>，这意味着 <code>value</code> 数组初始化之后就不能再引用其它数组。而 <code>String</code> 内部没有改变 <code>value</code> 数组内容的方法，这就保证了 <code>String</code> 不可变性。</p><p>字符串常量池是一个大小固定的 <code>HashTable</code>，默认大小是 1009， 保存着编译期就能确定的所有字符串字面量，运行时还可以通过 <code>intern()</code> 将字符串加入常量池。如果常量池的字符串非常多，就会产生哈希冲突，从而导致链表变长，影响 <code>intern()</code> 方法的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s)); <span class="comment">// 1846274136</span></span><br><span class="line">    System.out.println(System.identityHashCode(s.intern())); <span class="comment">// 1639705018</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s2)); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(s == s2); <span class="comment">// jdk6: false  jdk7: false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s3)); <span class="comment">// 1627674070</span></span><br><span class="line">    System.out.println(System.identityHashCode(s3.intern())); <span class="comment">// 1627674070</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s4)); <span class="comment">// 1627674070</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// jdk6: false jdk7: true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);</code> 最终会产生两个对象：<code>s3</code> 指向的堆中的 <code>&quot;11&quot;</code>和常量池中 <code>&#39;1&#39;</code>。</p><p>在 <code>jdk 7</code> 中，<code>HotSpot</code> 取消了永久代，常量池是堆的一部分。所以 <code>s3.intern()</code> 不会再在常量池创建一个对象，而是直接返回堆中的 <code>&quot;11&quot;</code> 的引用。</p><p>在执行 <code>String s4 = &quot;11&quot;;</code> 时，会发现常量池中已经有一个引用指向堆中的 <code>&quot;11&quot;</code>，直接返回，因此 <code>s3 == s4</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s)); <span class="comment">// 1846274136</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s2)); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(System.identityHashCode(s.intern())); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(s == s2); <span class="comment">// jdk6: false  jdk7: false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s3)); <span class="comment">// 1627674070</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s4)); <span class="comment">// 1360875712</span></span><br><span class="line">    System.out.println(System.identityHashCode(s3.intern())); <span class="comment">// 1360875712</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// jdk6: false jdk7: false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上一段代码不同，在执行 <code>String s4 = &quot;11&quot;;</code> 时，常量池中不存在对象 <code>&quot;11&quot;</code>，也不存在指向对象 <code>&quot;11&quot;</code> 的引用，所以会在常量池中创建对象 <code>&quot;11&quot;</code> 并返回其引用。</p><p>之后再执行 <code>s3.intern()</code> 时，会返回常量池中对象 <code>&quot;11&quot;</code> 的引用，因此 <code>s3 != s4</code>。</p><h3 id="volatile-作用与原理"><a href="#volatile-作用与原理" class="headerlink" title="volatile 作用与原理"></a><code>volatile</code> 作用与原理</h3><p><code>volatile</code> 是 Java 中的关键字，用于修饰变量，用于保证变量的可见性、禁止指令重排序和禁止缓存优化，从而确保多线程环境下变量的正确访问。</p><p><code>volatile</code> 的主要作用包括：</p><ol><li>可见性（Visibility）：<code>volatile</code> 保证当一个线程修改了一个 <code>volatile</code> 变量的值时，其他线程能够立即看到最新的值。这避免了多个线程之间由于缓存导致的变量不一致的问题。</li><li>禁止指令重排序（Ordering）：<code>volatile</code> 保证指令不会被重排序，从而确保了程序执行顺序的一致性。</li></ol><p><code>volatile</code> 的底层实现原理是通过在编译器和CPU层面进行一系列的优化，包括插入内存屏障（Memory Barrier）指令来保证其作用。</p><p>在编译器层面，<code>volatile</code> 会生成对应的内存屏障指令，确保对 <code>volatile</code> 变量的读写操作不会被重排序。</p><p>在CPU层面，内存屏障指令会强制将 CPU 缓存中的数据刷回到主存，或者从主存中加载最新的数据到 CPU 缓存，从而保证了变量的可见性和禁止指令重排序。</p><p>需要注意的是，虽然 <code>volatile</code> 可以保证变量的可见性和禁止指令重排序，但它并不能保证原子性。如果需要在多线程环境中进行复合操作（如多次读取和写入操作）并且保持原子性，需要使用其他的同步机制，例如 <code>synchronized</code> 或者 <code>java.util.concurrent</code> 包中提供的线程安全类。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><code>HashMap</code></h3><ul><li>计算hash值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>); <span class="comment">// 减少碰撞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>索引位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure><ul><li><p><code>HashMap</code> 数组长度 n 为什么总是 2 的幂方</p><ol><li>提高计算索引效率。因为如果 n 是 2 的幂方，那么 <code>(n - 1) &amp; hash</code> &#x3D; <code>hash % n</code> ，但是 <code>&amp;</code> 运算效率比 <code>%</code> 运算更高。</li><li>扩容后，同一个桶中的数据要么留在原地，要么往后移 n 个位置，不同重新计算索引位置。</li></ol></li><li><p><code>fast-fail</code> 和 <code>ConcurrentModificationException</code></p></li><li><p><code>HashMap</code> 和 <code>HashTable</code> 的区别</p><table><thead><tr><th></th><th><code>HashMap</code></th><th><code>HashTable</code></th></tr></thead><tbody><tr><td>线程安全性</td><td>非线程安全</td><td>线程安全</td></tr><tr><td><code>null</code> 键值对的处理</td><td><code>HashMap</code> 允许使用 <code>null</code> 作为键和值</td><td><code>Hashtable</code> 不允许键或值为 <code>nul</code>l，这是因为 <code>Hashtable</code> 使用 <code>null</code> 作为结束标志</td></tr><tr><td>迭代顺序</td><td><code>HashMap</code> 的迭代顺序不确定</td><td><code>Hashtable</code> 的迭代顺序是按照插入顺序来的，<code>Hashtable</code> 使用了线性探测法</td></tr></tbody></table></li></ul><p>在 <code>Java 1.7</code>，<code>HashMap</code> 扩容后，同一条链表上的元素需要通过重新计算索引位置后，才能知道会被放在新数组的哪个位置。</p><p>而在 <code>Java 1.8</code> 中，不需要重新计算索引位置，只需判断之前计算得到的 <code>hashCode</code> 的下一位是 0 还是 1，即可知道在新数组中的位置。这里优化包括：</p><ul><li>省去重新计算索引位置的时间；</li><li>旧数组每个索引位置下的链表或红黑树中的节点会比较均匀地重新划分到新数组中。</li></ul><p>并且在 <code>Java 1.7</code> 中，<code>HashMap</code> 插入数据时是头插法，这样在 <code>rehash</code> 时，如果数据被分到同一个桶下，数据的相对位置会倒置（可能会导致死循环）；而 <code>Java 1.8</code> 采用的尾插法，<code>rehash</code> 不会导致倒置。</p><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a><code>ConcurrentHashMap</code></h3><ul><li><code>ConcurrentHashMap</code> 1.7 和 1.8 有什么区别<ul><li><p>数据结构：Java 1.7 中的 <code>ConcurrentHashMap</code> 使用了数组+链表的方式来存储键值对，而 Java 1.8 中的 <code>ConcurrentHashMap</code> 则引入了红黑树，用于优化链表过长的情况，提高查找、插入和删除操作的性能。</p></li><li><p>加锁方式：Java 1.7 中的 <code>ConcurrentHashMap</code> 使用了分段锁（Segment）的机制来实现线程安全性，每个分段都有自己的锁。而 Java 1.8 中的 <code>ConcurrentHashMap</code> 则使用了基于 CAS（Compare and Swap）的算法来实现线程安全性，取代了分段锁的实现。</p></li><li><p>并发度：Java 1.8 中的 <code>ConcurrentHashMap</code> 支持更高的并发度，因为它不再使用分段锁，而是使用 CAS 算法，从而减少了锁的粒度和竞争，提供了更好的并发性能</p></li><li><p>扩容：Java 1.7 中的 <code>ConcurrentHashMap</code> 在扩容时采用的是分段锁的方式，每次只扩容一个段，而 Java 1.8 中的 <code>ConcurrentHashMap</code> 则采用了全局锁的方式，可以同时进行多个段的扩容，从而更快地完成扩容操作。</p></li></ul></li></ul><h2 id="并发与多线程"><a href="#并发与多线程" class="headerlink" title="并发与多线程"></a>并发与多线程</h2><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>Java中的读写锁模式是一种用于多线程环境下的同步机制，它允许多个线程同时读取共享资源，但在写操作时只允许一个线程进行写操作，以保证对共享资源的读写操作的正确性和一致性。</p><p>读写锁模式分为读锁（Read Lock）和写锁（Write Lock）两种类型，读锁可以被多个线程同时获取，而写锁在某一时刻只能被一个线程获取。当一个线程持有写锁时，其他线程无法获取读锁或写锁，从而保证了对共享资源的互斥访问。</p><p>Java中的读写锁模式通常通过ReentrantReadWriteLock类来实现，它提供了读锁和写锁的功能，可以通过lock.readLock()方法获取读锁，通过lock.writeLock()方法获取写锁。在使用读写锁模式时，可以根据实际情况选择合适的锁来进行读操作和写操作，以充分利用多线程环境下的并发性能，并保证数据的一致性和正确性。读写锁模式在读多写少的场景下通常能够提供较好的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 共享资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>(); <span class="comment">// 读写锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写操作，使用写锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        lock.writeLock().lock(); <span class="comment">// 获取写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map.put(key, value); <span class="comment">// 写操作</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock(); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读操作，使用读锁</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        lock.readLock().lock(); <span class="comment">// 获取读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key); <span class="comment">// 读操作</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock(); <span class="comment">// 释放读锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁降级"><a href="#锁降级" class="headerlink" title="锁降级"></a>锁降级</h3><p>锁降级是指将一个线程持有的锁从高级别锁转换为低级别锁的过程，例如将写锁转换为读锁，从而允许其他线程并发地访问共享资源，从而提高并发性能。</p><p>在Java中，锁降级通常使用以下步骤来实现：</p><ol><li>获取高级别锁，例如写锁，以保护共享资源的互斥访问。</li><li>执行对共享资源的修改或其他需要互斥访问的操作。</li><li>将高级别锁降级为低级别锁，例如将写锁降级为读锁，以允许其他线程并发地访问共享资源。</li><li>继续执行其他不需要互斥访问的操作，这些操作可以并发执行，从而提高并发性能。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDowngradeExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 共享资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>(); <span class="comment">// 读写锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁降级示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performLockDowngrade</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        lock.writeLock().lock(); <span class="comment">// 获取写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map.put(key, value); <span class="comment">// 写操作</span></span><br><span class="line"></span><br><span class="line">            lock.readLock().lock(); <span class="comment">// 将写锁降级为读锁</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock(); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行其他不需要互斥访问的操作，例如读操作</span></span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock(); <span class="comment">// 释放读锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两阶段终止"><a href="#两阶段终止" class="headerlink" title="两阶段终止"></a>两阶段终止</h3><p>两阶段终止模式（Two-Phase Termination Pattern）是一种用于在多线程环境下安全终止线程的设计模式。该模式包含了两个阶段，第一阶段用于通知线程需要终止，并设置终止标志；第二阶段用于实际执行线程的终止操作。这种模式可以确保线程在终止时能够正确地完成当前正在执行的工作，而不会造成资源泄漏、数据不一致等问题。</p><p>两阶段终止模式的主要思想是通过设置一个终止标志（termination flag）来通知线程需要终止，线程在每次循环或者执行任务时都会检查这个终止标志，一旦发现终止标志被设置，线程会立即停止执行当前任务，并进行清理操作，从而安全地终止线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoPhaseTerminationExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">shutdownRequested</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 用于标记是否请求终止线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread workerThread; <span class="comment">// 工作线程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动工作线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        workerThread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (!shutdownRequested) &#123;</span><br><span class="line">                <span class="comment">// 执行工作任务，例如处理队列中的任务</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟工作任务</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 捕获中断异常</span></span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在&quot;真正停止&quot;阶段，执行清理操作，例如关闭资源等</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Worker thread is stopping...&quot;</span>);</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        workerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求终止线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        shutdownRequested = <span class="literal">true</span>; <span class="comment">// 设置标志位</span></span><br><span class="line">        workerThread.interrupt(); <span class="comment">// 中断工作线程以退出可能的阻塞状态</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待工作线程终止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        workerThread.join(); <span class="comment">// 等待工作线程终止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a><code>CAS</code></h3><p><code>CAS</code>（<code>Compare and Swap</code>）是一种并发编程中的一种乐观锁机制，用于解决多线程环境下的并发访问问题。<code>CAS</code> 操作包含了三个参数：内存地址（或变量），期望值和更新值。<code>CAS</code> 操作会比较内存地址上的值与期望值，如果相等，则将内存地址上的值更新为新的值，否则不做任何操作。</p><p>在多线程环境下，多个线程可以同时执行 <code>CAS</code> 操作，但只有一个线程会成功执行更新操作，其他线程的 <code>CAS</code> 操作会失败。这是因为 <code>CAS</code> 是基于硬件级别的原子性操作，保证了多线程下对共享数据的原子性操作，避免了传统的锁机制带来的性能开销和可能的死锁、竞争等问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>, <span class="string">&quot;z3&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取域的偏移地址</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">idOffset</span> <span class="operator">=</span> unsafe.objectFieldOffset(Student.class.getDeclaredField(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">nameOffset</span> <span class="operator">=</span> unsafe.objectFieldOffset(Student.class.getDeclaredField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行 cas 操作</span></span><br><span class="line">        unsafe.compareAndSwapInt(student, idOffset, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        unsafe.compareAndSwapObject(student, nameOffset, <span class="string">&quot;z3&quot;</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">volatile</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CAS</code> 的局限和可能导致的问题：</p><ul><li><p>限制：<code>CAS</code> 操作只能对一个共享变量进行操作，不能实现对多个变量的复合操作。同时，<code>CAS</code> 只能对基本类型和对象的引用类型进行操作。</p></li><li><p><code>ABA</code> 问题：在多线程环境中，如果一个线程在执行 <code>CAS</code> 操作时，目标值从 <code>A</code> 变为 <code>B</code> ，再变回 <code>A</code> ，那么 <code>CAS</code> 操作可能会成功，但实际上值的变化过程可能被其他线程忽略，从而导致数据不一致。</p></li><li><p>自旋和性能消耗：<code>CAS</code> 操作是一种自旋锁，即当 <code>CAS</code> 操作失败时，会一直自旋等待成功，直到成功为止。这可能导致CPU资源被消耗，从而影响系统性能。</p></li><li><p>活锁：如果在自旋过程中一直无法成功，可能会导致活锁，从而影响系统的正常运行。</p></li></ul><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><ol><li>新建（New）：线程对象已经创建，但尚未启动执行。</li><li>可运行（Runnable）：线程正在 Java 虚拟机中执行，但可能正在等待操作系统的资源（例如处理器资源）。</li><li>阻塞（Blocked）：线程被阻塞并等待某个事件的发生（例如等待锁的释放或者 I&#x2F;O 操作完成）。</li><li>等待（Waiting）：线程在等待某个特定条件的发生，需要其他线程的通知才能够继续执行。</li><li>计时等待（Timed Waiting）：线程在等待某个特定条件的发生，但是等待有一个预定的时间限制，超过时间限制后会自动唤醒。</li><li>终止（Terminated）：线程已经执行完毕或者因为异常或其他原因被提前终止。</li></ol><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li><p>提交任务</p><ul><li><p>使用 <code>Executor</code> 接口的 <code>execute(Runnable task)</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>); <span class="comment">// 创建一个固定大小的线程池</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>(); <span class="comment">// 自定义的实现了 Runnable 接口的任务</span></span><br><span class="line">executor.execute(task); <span class="comment">// 提交任务给线程池执行</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>ExecutorService</code> 接口的 <code>submit(Callable&lt;T&gt; task)</code> 方法</p><p><code>Callable</code> 任务可以抛出异常，并且异常会被封装在 <code>Future</code> 对象中，可以通过 <code>get()</code> 方法获取异常信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>); <span class="comment">// 创建一个固定大小的线程池</span></span><br><span class="line">Callable&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">MyCallable</span>(); <span class="comment">// 自定义的实现了 Callable 接口的任务</span></span><br><span class="line">Future&lt;Integer&gt; future = executor.submit(task); <span class="comment">// 提交任务给线程池执行，并返回 Future 对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> future.get(); <span class="comment">// 获取任务的执行结果</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>ExecutorService</code> 接口的 <code>submit(Runnable task)</code> 方法</p><p>与 <code>execute(Runnable task)</code> 方法相比，这种方式提供了更多的灵活性，因为可以通过 <code>Future</code> 对象进行任务状态的管理，例如取消任务、等待任务完成等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>); <span class="comment">// 创建一个固定大小的线程池</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>(); <span class="comment">// 自定义的实现了 Runnable 接口的任务</span></span><br><span class="line">Future&lt;?&gt; future = executor.submit(task); <span class="comment">// 提交任务给线程池执行，并返回 Future 对象</span></span><br><span class="line"><span class="comment">// 由于 Runnable 任务无返回值，future.get() 将返回 null</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>关闭线程池</p><ul><li><p><code>shutdown()</code> ：调用该方法后，线程池将不再接受新的任务提交，但会继续执行已经提交的任务直到全部完成。</p></li><li><p><code>shutdownNow()</code> ：调用该方法后，线程池会立即停止接受新的任务提交，并尝试中断当前正在执行的任务，然后返回等待执行的任务列表。这意味着可能有部分任务没有执行完毕就被中断，可能导致任务执行不完整或结果不准确。</p></li></ul></li><li><p>创建线程池的核心参数</p><ul><li><p>核心线程数（corePoolSize）：线程池中一直存活的线程数量。当线程池中的线程数量小于核心线程数时，会创建新的线程来执行任务，直到达到核心线程数。</p></li><li><p>最大线程数（maximumPoolSize）：线程池中允许的最大线程数量。当线程池中的线程数量达到最大线程数时，新的任务会根据拒绝策略进行处理。</p></li><li><p>空闲线程存活时间（keepAliveTime）：线程池中的空闲线程存活时间。可以通过设置这个参数来控制线程池的动态伸缩能力。</p></li><li><p>任务队列（workQueue）：用于存放提交的任务的队列。</p></li><li><p>线程工厂（threadFactory）：用于创建线程的工厂，可以自定义线程的创建方式，如线程的命名、优先级等。</p></li><li><p>拒绝策略（handler）：当线程池和队列都满了时，新提交的任务会根据拒绝策略进行处理。</p></li></ul></li><li><p>常用队列</p><ul><li><p>ArrayBlockingQueue：基于数组的有界阻塞队列，按照 FIFO（先进先出）的原则对元素进行排序。</p></li><li><p>LinkedBlockingQueue：基于链表的可选有界&#x2F;无界阻塞队列，按照 FIFO 的原则对元素进行排序。</p></li><li><p>SynchronousQueue：一个没有容量的阻塞队列，每个插入操作必须等待一个相应的删除操作，反之亦然。适用于传递单个元素的场景，常用于实现线程间的交换数据。</p></li><li><p>PriorityBlockingQueue：基于优先级的无界阻塞队列，可以自定义元素的优先级顺序。</p></li></ul></li><li><p>拒绝策略</p><ul><li><p>AbortPolicy（默认）：直接抛出 RejectedExecutionException 异常，表示拒绝执行新的任务。</p></li><li><p>CallerRunsPolicy：由提交任务的线程自己执行该任务。这意味着任务提交线程会被阻塞，直到线程池中有可用的线程来执行任务。</p></li><li><p>DiscardPolicy：直接丢弃被拒绝的任务，不抛出异常，也不执行任务。</p></li><li><p>DiscardOldestPolicy：丢弃队列中最早（即最先提交的）的任务，然后尝试再次提交被拒绝的任务。</p></li></ul></li><li><p>常用线程池</p><ul><li><p>FixedThreadPool：线程数量固定的线程池，当一个任务提交到线程池时，如果没有空闲的线程，任务将会被放入等待队列中，直到有空闲的线程。</p><p>创建方式：<code>ExecutorService executor = Executors.newFixedThreadPool(int nThreads);</code></p><p>核心参数</p><ul><li>corePoolSize：<code>nThreads</code> </li><li>maximumPoolSize：<code>nThreads</code> </li><li>keepAliveTime：0</li><li>workQueue：无界的 LinkedBlockingQueue</li><li>threadFactory：默认的线程工厂 Executors.defaultThreadFactory()</li><li>handler：AbortPolicy</li></ul></li><li><p>CachedThreadPool：线程数量不固定的线程池，当有任务提交到线程池时，如果有空闲的线程，任务会被分配给其中一个线程执行，如果没有空闲的线程，线程池会创建一个新的线程来执行任务。适合处理任务量较大但任务执行时间较短的场景。如果任务执行时间较长或者任务量过大，可能会导致线程池创建大量线程，从而带来性能和资源消耗的问题。</p><p>创建方式：<code>ExecutorService executorService = Executors.newCachedThreadPool();</code></p><p>核心参数：</p><ul><li>corePoolSize：0</li><li>maximumPoolSize：Integer.MAX_VALUE</li><li>keepAliveTime：60秒</li><li>workQueue：SynchronousQueue</li><li>threadFactory：默认的线程工厂 Executors.defaultThreadFactory()</li><li>handler：AbortPolicy</li></ul></li><li><p>ScheduledThreadPool：</p><p>创建方式：<code>ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1); </code></p><p>核心参数：</p><ul><li>corePoolSize：1</li><li>maximumPoolSize：Integer.MAX_VALUE</li><li>keepAliveTime：0</li><li>workQueue：DelayedWorkQueue</li><li>threadFactory：默认的线程工厂 Executors.defaultThreadFactory()</li><li>handler：AbortPolicy</li></ul></li><li><p>SingleThreadExecutor</p><p>创建方式：</p><p>核心参数：</p><ul><li>corePoolSize：1</li><li>maximumPoolSize：1</li><li>keepAliveTime：0</li><li>workQueue：无界的 LinkedBlockingQueue</li><li>threadFactory：默认的线程工厂 Executors.defaultThreadFactory()</li><li>handler：AbortPolicy</li></ul></li><li><p>ForkJoinPool：</p><p>创建方式：</p><p>核心参数：</p><ul><li>corePoolSize：<code>Runtime.getRuntime().availableProcessors()</code>，默认为当前系统的处理器核心数</li><li>maximumPoolSize：<code>Math.max(1, 核心线程数 - 1)</code>，最大线程数为核心线程数减 1，确保至少有一个线程用于执行窃取操作</li><li>keepAliveTime：60秒</li><li>workQueue：ForkJoinPool.ForkJoinWorkerThreadQueue</li><li>threadFactory：ForkJoinPool.ForkJoinWorkerThreadFactory</li><li>handler：AbortPolicy</li></ul></li></ul></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑思维题</title>
      <link href="/post/ad24756a.html"/>
      <url>/post/ad24756a.html</url>
      
        <content type="html"><![CDATA[<h2 id="小白鼠试毒药"><a href="#小白鼠试毒药" class="headerlink" title="小白鼠试毒药"></a>小白鼠试毒药</h2><ol><li>把瓶子用二进制进行编号，30只老鼠五位二进制就够了</li><li>让第 i 只小白鼠喝掉编号从右起第 i 位为 1 的水，每只老鼠的死活都可以确定出二进制数中的一位</li></ol><h2 id="100个人按灯"><a href="#100个人按灯" class="headerlink" title="100个人按灯"></a>100个人按灯</h2><p>问题描述：有100盏灯,编号依次为1,2,3.100,电灯全部关着。现在来了100个人,第一个人把所有的灯开关按下；第二个人隔一个灯按下（2,4,6…）；第三个人每隔两个灯按下（3,6,9…）.第100个人隔99个灯按下（100）,最后还有几盏灯，那几盏灯亮着？</p><p>最后亮着的灯的编号会是完全平方数，因为只有完全平方数的因数是奇数个，会被操作奇数次，从而保持亮着的状态。</p><p>在1到100之间，完全平方数有10个，分别是1、4、9、16、25、36、49、64、81、100。</p><p>所以，最后亮着的灯的编号分别是1、4、9、16、25、36、49、64、81、100。共有10盏灯亮着。</p><h2 id="100的阶乘有几个0"><a href="#100的阶乘有几个0" class="headerlink" title="100的阶乘有几个0"></a>100的阶乘有几个0</h2><p>100的阶乘（100!）有多少个末尾的零，可以通过计算其因式分解中10的因子个数来确定，因为末尾的零是由2和5相乘得到的。</p><p>首先，我们将100!进行因式分解。100!表示从1乘到100的连续整数的乘积，可以写成：</p><p>100! &#x3D; 1 × 2 × 3 × 4 × … × 99 × 100</p><p>接下来，我们观察乘法中每一项的因子中2和5的个数。</p><p>在100!中，偶数的因子2的个数明显比5多，因为每隔一个数就会有一个偶数出现，而偶数都包含因子2。所以，我们只需要关注100!中5的因子个数。</p><p>在100!中，5、10、15、20、…、95、100这些数都包含因子5，共有20个数。而25、50、75、100这些数包含两个因子5，所以需要将其计算在内。</p><p>因此，100!中总共有20 + 4 &#x3D; 24个因子5。</p><p>综上所述，100!末尾共有24个零。</p><h2 id="用天平找最轻-重的球"><a href="#用天平找最轻-重的球" class="headerlink" title="用天平找最轻&#x2F;重的球"></a>用天平找最轻&#x2F;重的球</h2><p>问题描述：8个球，一个轻，天平2次找出来</p><p>第一次称重：将任意三个球放在天平的一边，再将另外三个球放在另一边，剩下的两个球不放在天平上。如果天平平衡，则轻的球在剩下的两个球中，可以直接通过目测或者手感来找出轻的球。如果天平不平衡，那么轻的球一定在轻的那一边。</p><p>第二次称重：将轻的那一边的三个球中的两个球放在天平的一边，将剩下的一个球放在另一边。如果天平平衡，则剩下的那个球就是轻的球；如果天平不平衡，那么轻的球就是轻的那一边的球。</p><h2 id="2017的2017-次方的最后一位数"><a href="#2017的2017-次方的最后一位数" class="headerlink" title="2017的2017 次方的最后一位数"></a>2017的2017 次方的最后一位数</h2><p>计算2017的2017次方的最后一位数，可以使用数论中的数学性质来简化计算。根据数学性质，一个整数的末位数只和该整数的个位数有关，而与其他位数无关。</p><p>首先，我们观察2017的个位数是什么。2017除以10的余数是7，因此2017的个位数是7。</p><p>接下来，我们观察7的幂的个位数的规律。我们可以列举一些7的幂，看看个位数的变化：</p><p>7^1 &#x3D; 7 7^2 &#x3D; 49 7^3 &#x3D; 343 7^4 &#x3D; 2401 7^5 &#x3D; 16807 …</p><p>可以观察到，7的幂的个位数会在7、9、3、1这四个数字之间循环。具体地，7^1的个位数是7，7^2的个位数是9，7^3的个位数是3，7^4的个位数是1，7^5的个位数又是7，以此类推。</p><p>因此，我们可以利用这个规律来简化计算2017的2017次方的个位数。2017除以4的余数是1，所以2017的2017次方的个位数也是1。</p><p>综上所述，2017的2017次方的最后一位数是1。</p><h2 id="有25匹马，五个赛道，用最少比赛次数将25匹马排序"><a href="#有25匹马，五个赛道，用最少比赛次数将25匹马排序" class="headerlink" title="有25匹马，五个赛道，用最少比赛次数将25匹马排序"></a>有25匹马，五个赛道，用最少比赛次数将25匹马排序</h2><p>可以通过以下步骤将25匹马在5个赛道上进行比赛，用最少的次数将其排序：</p><ol><li>将25匹马分为5组，每组5匹马。这可以通过随机分组或者按照某种规则进行分组，例如将25匹马按照体重、年龄等特征进行分组，使得每组中的马尽量均匀。</li><li>在第一个赛道上比赛这5组马，记录每组马的名次（即第1到第5名）。</li><li>在第二个赛道上，取每组的第1名进行比赛，记录这5匹马的名次。</li><li>在第三个赛道上，取第一步中未参加第二轮比赛的马（即每组的第2到第5名）和第二步中的第1名共15匹马进行比赛，记录这15匹马的名次。</li><li>在第四个赛道上，取第二步中的第2名和第三步中的前两名共4匹马，再加上第一步中未参加前三轮比赛的马（即每组的第4和第5名），共7匹马进行比赛，记录这7匹马的名次。</li><li>在第五个赛道上，取第三步中的第3名和第四步中的前三名共4匹马，再加上第二步中未参加前四轮比赛的马（即每组的第5名），共5匹马进行比赛，记录这5匹马的名次。</li><li>根据每匹马在所有比赛中的名次，可以确定它们的排序。</li></ol><p>通过这种方法，最多需要进行5轮比赛，就可以将25匹马排序，并且在每轮比赛中都充分利用了赛道上的比较次数，从而达到了最少比赛次数的目的。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络面试题</title>
      <link href="/post/8badff60.html"/>
      <url>/post/8badff60.html</url>
      
        <content type="html"><![CDATA[<h2 id="cookie、session、token"><a href="#cookie、session、token" class="headerlink" title="cookie、session、token"></a>cookie、session、token</h2><p>Cookie、Session、Token 是三种常用于身份认证和状态管理的 Web 开发中的概念，它们之间有以下区别：</p><ol><li>Cookie（Cookie）：是服务器发送并保存到客户端的一小段文本信息，通常用于存储用户的身份认证信息、用户偏好设置等。Cookie 通常由服务器生成并通过 HTTP 头部发送给客户端，客户端的浏览器会将 Cookie 存储在客户端，并在每次请求同一域名下的网页时将 Cookie 自动附加到请求头中发送给服务器。</li><li>Session（会话）：是服务器端用于跟踪用户状态的一种机制。在服务器端创建一个 Session 对象，为每个用户分配一个唯一的 Session ID，将这个 Session ID 通过 Cookie 或者 URL 参数发送给客户端。客户端在后续的请求中会将这个 Session ID 附加到请求头或者 URL 中，服务器通过这个 Session ID 来识别不同的用户，并从 Session 对象中获取相应的状态信息。与 Cookie 不同，Session 数据存储在服务器端，客户端只保存 Session ID，具有一定的安全性。</li><li>Token（令牌）：是一种在身份认证中使用的授权凭证，通常是一个字符串。服务器在用户身份认证成功后，生成一个 Token，并将其发送给客户端。客户端在后续的请求中将 Token 附加到请求头或者其他方式发送给服务器，服务器通过验证 Token 的有效性来进行身份认证。Token 可以包含用户信息、权限信息等，并且通常使用加密算法进行签名，具有较高的安全性和灵活性。相比于 Cookie 和 Session，Token 更加适合用于跨域认证和无状态服务。</li></ol><p>总结：Cookie 是存储在客户端的文本信息，Session 是服务器端用于跟踪用户状态的机制，Token 是一种授权凭证。Cookie 存储在客户端，Session 存储在服务器端，Token 通常在客户端和服务器端之间传递。Token 具有较高的安全性和灵活性，适合用于跨域认证和无状态服务。</p><h2 id="HTTP-1-0、1-1、2-0-的区别"><a href="#HTTP-1-0、1-1、2-0-的区别" class="headerlink" title="HTTP 1.0、1.1、2.0 的区别"></a>HTTP 1.0、1.1、2.0 的区别</h2><p>HTTP（Hypertext Transfer Protocol）是一种用于在Web中传输数据的协议，常见的版本包括HTTP 1.0、HTTP 1.1和HTTP 2.0。它们之间有以下区别：</p><ol><li>性能：HTTP 2.0相较于HTTP 1.0和HTTP 1.1有更好的性能。HTTP 1.0和HTTP 1.1使用串行方式传输数据，即每个请求和响应都必须按照顺序进行处理，而HTTP 2.0使用二进制帧（binary frames）和多路复用（multiplexing）技术，可以同时发送多个请求和响应，从而提高了并发性能和响应速度。</li><li>头部压缩：HTTP 2.0支持头部压缩，可以减少传输的头部数据量，从而降低了网络传输的开销。而HTTP 1.0和HTTP 1.1每次请求和响应都需要传输完整的头部信息，增加了网络传输的负担。</li><li>服务器推送：HTTP 2.0支持服务器推送（server push）功能，服务器可以在客户端请求之前主动将一些资源推送给客户端，从而减少客户端的请求次数和等待时间，提高了页面加载速度。而HTTP 1.0和HTTP 1.1需要客户端发送请求才能获取资源。</li><li>安全性：HTTP 2.0默认使用TLS（Transport Layer Security）加密通信，从而提供了更好的安全性，可以防止数据被窃取和篡改。而HTTP 1.0和HTTP 1.1的通信默认是明文的，需要额外的安全措施，例如HTTPS协议来保护通信安全。</li><li>兼容性：HTTP 2.0对之前的HTTP版本进行了优化，可以兼容HTTP 1.1，即使在不支持HTTP 2.0的环境下，仍然可以使用HTTP 1.1进行通信。而HTTP 1.0和HTTP 1.1之间的兼容性较低，一些HTTP 1.1的特性在HTTP 1.0中不支持。</li></ol><h2 id="TCP三次握手-四次挥手"><a href="#TCP三次握手-四次挥手" class="headerlink" title="TCP三次握手&amp;四次挥手"></a>TCP三次握手&amp;四次挥手</h2><p>TCP三次握手（Three-Way Handshake）是建立TCP连接时使用的一种通信过程，用于确保客户端和服务器之间建立可靠的连接。</p><p>TCP三次握手的步骤如下：</p><ol><li>第一步（客户端发送 SYN）：客户端发送一个带有SYN（同步序列号）标志的TCP包，表示客户端请求建立连接。此时客户端进入SYN_SENT状态。</li><li>第二步（服务器发送 SYN+ACK）：服务器收到客户端的SYN包后，如果同意建立连接，会发送一个带有SYN和ACK（确认序列号）标志的TCP包作为应答。此时服务器进入SYN_RCVD状态。</li><li>第三步（客户端发送 ACK）：客户端收到服务器的SYN+ACK包后，会发送一个带有ACK标志的TCP包，确认对服务器的连接请求。此时客户端和服务器都进入已建立连接（ESTABLISHED）状态，可以开始进行数据传输。</li></ol><p>TCP三次握手的主要目的包括：</p><ol><li>确保双方的通信能力：通过三次握手，客户端和服务器可以互相确认对方的通信能力，并确保双方都能够正常发送和接收TCP包。</li><li>防止过期的连接请求：TCP协议中可能存在因网络延迟或其他原因导致连接请求过期的情况。通过三次握手，可以避免过期的连接请求对后续连接的干扰。</li></ol><p>TCP四次挥手（Four-Way Handshake）是用于关闭TCP连接时的一种通信过程，用于在客户端和服务器之间正常终止连接。</p><p>TCP四次挥手的步骤如下：</p><ol><li>第一步（客户端发送 FIN）：客户端发送一个带有FIN（结束标志）标志的TCP包，表示客户端不再发送数据，并请求关闭连接。此时客户端进入FIN_WAIT_1状态。</li><li>第二步（服务器发送 ACK）：服务器收到客户端的FIN包后，会发送一个带有ACK（确认标志）标志的TCP包作为应答，确认对客户端的连接关闭请求。此时服务器进入CLOSE_WAIT状态，而客户端进入FIN_WAIT_2状态。</li><li>第三步（服务器发送 FIN）：服务器发送一个带有FIN标志的TCP包，表示服务器也希望关闭连接。此时服务器进入LAST_ACK状态。</li><li>第四步（客户端发送 ACK）：客户端收到服务器的FIN包后，会发送一个带有ACK标志的TCP包作为应答，确认对服务器的连接关闭请求。此时客户端进入TIME_WAIT状态。</li></ol><p>在客户端发送最后一个ACK包后，经过一个固定的时间（通常为两倍的最大段生存时间，即2MSL，MSL为Maximum Segment Lifetime，表示一个TCP段在网络中的最长生存时间），客户端和服务器的连接会被正式关闭，并进入CLOSED状态。</p><p>TCP四次挥手的主要目的包括：</p><ol><li>双方确认连接关闭：通过四次挥手，客户端和服务器可以互相确认对方的连接关闭请求，并确保连接在双方都已经结束后才会断开。</li><li>完整传输未确认的数据：在进行连接关闭时，可能还存在未确认的数据包在传输中。通过四次挥手，可以确保在关闭连接前，已经传输的未确认数据可以被完整地接收和处理。</li></ol><p>需要注意的是，TCP四次挥手中的TIME_WAIT状态是为了防止“网络中的孤儿连接”（Orphaned Connection）问题，即在连接关闭后，可能仍然存在网络中延迟到达的TCP包，导致连接被错误地重新建立。TIME_WAIT状态的持续时间通常较短，可以根据具体的实现和网络环境进行配置。</p><h2 id="time-wait是客户端状态还是服务器状态，为什么要等待2MSL"><a href="#time-wait是客户端状态还是服务器状态，为什么要等待2MSL" class="headerlink" title="time_wait是客户端状态还是服务器状态，为什么要等待2MSL"></a>time_wait是客户端状态还是服务器状态，为什么要等待2MSL</h2><p>TIME_WAIT是指TCP连接关闭后，主动关闭连接的一方（通常是客户端）进入的一种状态，而不是服务器状态。</p><p>TCP连接关闭后，主动关闭连接的一方（发送了最后的ACK包）会进入TIME_WAIT状态，并在这个状态下等待一段时间，通常是两倍的最大段生存时间（Maximum Segment Lifetime, MSL）。MSL是指一个TCP段在网络中的最长生存时间，通常为30秒到2分钟不等，具体取决于系统和网络配置。</p><p>等待2MSL的目的是为了确保在网络中所有可能存在的延迟、丢包、重传等情况下，原先连接的所有TCP包都能够被完全清除，以避免出现“网络中的孤儿连接”（Orphaned Connection）问题。如果在TIME_WAIT状态结束后，再次遇到相同的IP地址和端口号的连接请求，那么该连接请求可以被安全地确认为是一个新的连接，而不是与之前的连接混淆。</p><p>需要注意的是，TIME_WAIT状态对于服务器而言是一种资源消耗，因为服务器需要为每个处于TIME_WAIT状态的连接保留一定的资源，例如内存和端口号等。因此，在某些高负载的服务器环境中，可以通过调整系统的TCP参数来缩短TIME_WAIT状态的持续时间，以减少资源消耗。但需要小心的是，过短的TIME_WAIT时间可能会导致出现连接复用问题，因此需要根据实际情况进行配置。</p><h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）是两种常用的传输层协议，用于在计算机网络中进行数据传输。它们有以下几点主要的区别：</p><ol><li>连接导向 vs 无连接：TCP是一种面向连接的协议，它在通信双方建立连接后，通过可靠的数据传输和确认机制来保证数据的可靠性和完整性。而UDP是一种无连接的协议，通信双方之间没有建立连接的过程，每次发送数据都是独立的，不保证数据的可靠性和完整性。</li><li>可靠性 vs 高效性：TCP提供可靠的数据传输，保证数据的顺序、完整性和可靠性，确保数据在传输过程中不会丢失或损坏。而UDP不保证数据的可靠性，因此传输速度较快，适用于对实时性要求较高但对可靠性要求不高的应用，如音频、视频等。</li><li>流式传输 vs 报文传输：TCP提供面向流的传输方式，数据在发送端和接收端之间被视为连续的字节流，没有固定的消息边界。而UDP提供面向报文的传输方式，每个UDP包都是独立的，具有固定的消息边界，接收端可以直接读取到完整的消息。</li><li>拥塞控制 vs 无拥塞控制：TCP具有拥塞控制机制，可以在网络拥塞时自动调整传输速率，避免网络拥塞导致的丢包和数据传输延迟。而UDP没有拥塞控制机制，发送速率不受限制，容易导致网络拥塞和数据丢失。</li><li>连接状态管理：TCP维护连接的状态信息，包括连接的建立、维护和关闭，需要较多的资源和处理开销。而UDP没有连接状态的管理，通信双方之间没有复杂的握手和状态维护过程，资源开销较小。</li><li>应用场景：TCP适用于对数据可靠性要求较高的应用，例如文件传输、网页浏览、电子邮件等。UDP适用于对数据实时性要求较高的应用，例如实时语音、实时视频、在线游戏等。</li></ol><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>HTTP（Hypertext Transfer Protocol）状态码是在客户端向服务器发起请求后，服务器返回的一个3位数字的状态码，用于表示服务器对请求的处理结果的标识。HTTP状态码用于描述客户端与服务器之间的通信状态，帮助客户端了解服务器处理请求时的情况。以下是一些常见的HTTP状态码及其含义：</p><p>1xx（信息性状态码）：表示服务器已接收到请求，但需要进一步处理。</p><ul><li>100 Continue：服务器已接收到请求的一部分，并且要求客户端继续发送剩余部分。</li></ul><p>2xx（成功状态码）：表示服务器已成功接收、理解并处理请求。</p><ul><li>200 OK：请求成功，服务器返回请求的数据。</li><li>201 Created：请求成功，服务器创建了新资源并返回资源的URI。</li><li>204 No Content：请求成功，但服务器没有返回任何数据。</li></ul><p>3xx（重定向状态码）：表示需要进一步操作以完成请求。</p><ul><li>301 Moved Permanently：请求的资源已永久移动到新位置，客户端应该更新链接。</li><li>302 Found &#x2F; 307 Temporary Redirect：请求的资源暂时移动到新位置，客户端应该继续使用原始链接。</li></ul><p>4xx（客户端错误状态码）：表示客户端发送的请求有错误。</p><ul><li>400 Bad Request：请求错误，服务器无法理解请求。</li><li>401 Unauthorized：未授权，需要提供有效的身份验证信息。</li><li>403 Forbidden：禁止访问，客户端没有权限访问请求的资源。</li><li>404 Not Found：请求的资源不存在。</li></ul><p>5xx（服务器错误状态码）：表示服务器在处理请求时出现错误。</p><ul><li>500 Internal Server Error：服务器内部错误，无法完成请求。</li><li>502 Bad Gateway：网关错误，表示服务器作为代理或网关从上游服务器接收到无效的响应。</li><li>503 Service Unavailable：服务不可用，服务器暂时无法处理请求。</li></ul><h2 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h2><p>HTTP缓存是一种在客户端（如浏览器）和服务器之间进行数据传输时，通过保存已获取的资源的副本来提高性能和减少带宽消耗的技术。</p><p>HTTP缓存可以在客户端缓存和服务器端缓存两个层面上进行，分别称为客户端缓存和代理服务器缓存。下面是一些常见的HTTP缓存相关的概念和技术：</p><ol><li>缓存控制：HTTP协议通过使用一些缓存控制头字段来控制缓存行为，例如<code>Cache-Control</code>、<code>Expires</code>、<code>ETag</code>、<code>Last-Modified</code>等。这些头字段可以告诉客户端或代理服务器是否应该缓存资源，以及缓存资源的有效期、验证方式等。</li><li>强缓存：通过设置<code>Cache-Control</code>或<code>Expires</code>头字段，服务器可以指示客户端在一定时间内直接使用缓存的资源，而无需请求服务器验证资源的有效性。这可以有效减少对服务器的请求，提高性能。</li><li>协商缓存：通过设置<code>ETag</code>和<code>Last-Modified</code>头字段，服务器可以在客户端请求时判断资源是否发生了变化，从而避免返回重复的资源。客户端可以通过发送<code>If-None-Match</code>和<code>If-Modified-Since</code>头字段来验证资源的有效性，并在资源未发生变化时使用缓存。</li><li>缓存策略：缓存策略是一种定义如何使用缓存的规则或策略，例如最大缓存时间、缓存的资源类型、缓存的范围等。不同的应用场景和资源类型可能需要不同的缓存策略来达到最佳性能。</li><li>缓存的优势：HTTP缓存可以显著提高Web应用的性能，减少网络带宽的消耗，降低服务器的负载，提升用户体验。良好的缓存策略可以减少重复请求，缩短响应时间，降低服务器端的资源消耗，从而提高系统的可伸缩性和性能。</li></ol><p>需要注意的是，不当的缓存策略可能导致资源过期或资源不一致的问题，因此在使用HTTP缓存时应该根据具体的应用场景和需求进行合理的配置和管理。</p><h2 id="Cookie保存时间"><a href="#Cookie保存时间" class="headerlink" title="Cookie保存时间"></a>Cookie保存时间</h2><p>Cookie（HTTP Cookie）是一种在客户端（例如浏览器）和服务器之间传递的小型文本文件，用于在Web应用中存储和传递有关用户会话和状态的信息。Cookie通常具有一定的保存时间，可以通过设置过期时间来控制其有效期。</p><p>在HTTP协议中，Cookie可以通过设置Expires（过期时间）或Max-Age（最大生存时间）属性来指定其有效期。这两个属性的单位都是秒，用于表示Cookie的保存时间。</p><ol><li>Expires属性：通过设置Expires属性，服务器可以指定Cookie的过期时间，即Cookie在客户端的保存时间。一旦超过过期时间，客户端会自动删除该Cookie。Expires属性的值是一个GMT格式的日期字符串，例如：”Thu, 01 Jan 1970 00:00:00 GMT”。</li><li>Max-Age属性：通过设置Max-Age属性，服务器可以指定Cookie的最大生存时间，即Cookie在客户端的保存时间。Max-Age属性的值是一个整数，表示从当前时间开始，Cookie的有效期持续的秒数。例如，设置Max-Age为3600表示Cookie的有效期为1小时。</li></ol><p>需要注意的是，不同浏览器对Cookie的最长保存时间有一定的限制，一般情况下不会超过20年。同时，如果未设置过期时间或最大生存时间，或者设置为0，那么Cookie将成为会话Cookie，只在当前会话期间有效，即关闭浏览器后会自动删除。</p><p>在使用Cookie时，应当合理设置其过期时间或最大生存时间，以保护用户隐私和确保系统的安全性。特别是在存储敏感信息如用户认证信息时，应采取额外的安全措施，例如加密存储或使用安全的Cookie属性，如Secure属性和HttpOnly属性，以提高Cookie的安全性。</p><h2 id="TCP粘包和拆包"><a href="#TCP粘包和拆包" class="headerlink" title="TCP粘包和拆包"></a>TCP粘包和拆包</h2><ul><li>粘包和拆包是TCP传输过程中可能出现的问题。</li><li>粘包是指发送端在发送多个数据包时，由于网络传输的不确定性，这些数据包可能会被合并成一个大的数据包到达接收端，导致接收端难以正确解析。</li><li>拆包是指发送端在发送一个数据包时，由于网络传输的不确定性，这个数据包可能会被拆分成多个小的数据包到达接收端，导致接收端难以完整地接收数据。</li><li>解决粘包和拆包问题的方法包括定长消息、消息边界标识和消息长度标识等。</li></ul><h2 id="sessionID除了放在Cookie中还可以放在哪"><a href="#sessionID除了放在Cookie中还可以放在哪" class="headerlink" title="sessionID除了放在Cookie中还可以放在哪"></a>sessionID除了放在Cookie中还可以放在哪</h2><p>除了将SessionID放在Cookie中，还可以将SessionID放在其他地方，例如：</p><ol><li>URL参数：可以将SessionID作为URL的参数，附加在URL的末尾或者通过查询字符串的方式传递给服务器。例如：<a href="http://example.com/page?sessionID=1234567890%E3%80%82">http://example.com/page?sessionID=1234567890。</a></li><li>请求头：可以将SessionID放在HTTP请求的头部，例如自定义的HTTP头部字段中，用于传递SessionID给服务器。例如：在请求头中添加 “X-SessionID: 1234567890” 字段。</li><li>请求体：可以将SessionID放在请求体中的某个字段中，通过POST请求或其他类似的方式传递给服务器。</li><li>服务器端存储：在服务器端，可以将SessionID存储在服务器的内存、文件系统、数据库或其他形式的持久化存储中，而不将SessionID传递给客户端。客户端请求时，服务器通过其他方式识别用户的会话状态，无需将SessionID传递给客户端。</li></ol><h2 id="一个页面的加载过程"><a href="#一个页面的加载过程" class="headerlink" title="一个页面的加载过程"></a>一个页面的加载过程</h2><ol><li>DNS解析：用户在浏览器地址栏中输入网址后，浏览器会首先进行DNS解析，将域名解析成对应的IP地址，用于后续的网络连接。</li><li>建立TCP连接：浏览器通过HTTP或HTTPS协议与服务器建立TCP连接，包括三次握手过程。</li><li>发起HTTP请求：建立TCP连接后，浏览器向服务器发送HTTP请求，请求网页的资源，如HTML、CSS、JavaScript、图片等。</li><li>服务器处理请求：服务器接收到浏览器的请求后，进行相应的处理，如生成动态网页、从数据库获取数据等。</li><li>服务器响应：服务器将生成的网页资源打包成HTTP响应，包含响应头和响应体，发送给浏览器。</li><li>接收响应：浏览器接收到服务器的HTTP响应后，开始解析响应头和响应体。</li><li>渲染页面：浏览器解析HTML、CSS等资源，构建DOM树、CSSOM树和渲染树，然后进行页面布局和渲染，将网页内容显示在用户的屏幕上。</li><li>下载其他资源：页面渲染过程中，浏览器可能会继续下载其他资源，如图片、JavaScript、字体等。</li><li>执行JavaScript：如果网页中包含JavaScript代码，浏览器会执行JavaScript代码，实现网页的交互和动态效果。</li><li>页面加载完成：当所有的网页资源都加载完毕，并且JavaScript代码执行完毕时，页面加载完成，用户可以与页面进行交互。</li></ol><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><p>TCP拥塞控制是一种网络拥塞管理机制，用于防止网络中的拥塞现象，确保网络的稳定性和可靠性。TCP拥塞控制主要通过以下几种算法来实现：</p><ol><li>慢启动：TCP连接刚建立时，发送方会以较小的发送窗口开始发送数据，然后随着时间的推移逐渐增加发送窗口的大小，从而实现发送速率的慢启动，以避免一开始就发送过多的数据导致网络拥塞。</li><li>拥塞避免：一旦发送方通过慢启动阶段，发送窗口达到一定大小后，就会进入拥塞避免阶段，此时发送方会根据网络的拥塞情况，逐渐增加发送窗口的大小，但增速较慢，以避免过快地发送数据导致网络拥塞。</li><li>快速重传：如果发送方收到了3个重复的确认（即接收方对同一数据包进行3次确认），说明有数据包丢失，此时发送方会立即重传丢失的数据包，而不等待超时重传的时间。</li><li>快速恢复：当发送方进行快速重传时，会将拥塞窗口减半，并进入快速恢复阶段，在快速恢复阶段，发送方会继续以较慢的速率逐渐增加发送窗口的大小，以逐步恢复正常的发送速率。</li><li>超时重传：如果发送方在规定的超时时间内没有收到确认信息，就认为数据包丢失，会立即重传丢失的数据包。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/post/9a0369ec.html"/>
      <url>/post/9a0369ec.html</url>
      
        <content type="html"><![CDATA[<p>布隆过滤器（Bloom Filter）是一种空间高效、快速判断某个元素是否存在于集合中的数据结构。它由布隆于1970年提出，主要用于大规模数据集合的快速查找和去重。</p><span id="more"></span><p>布隆过滤器的基本思想是使用多个独立的哈希函数将元素映射到一个位数组（或称为布隆过滤器的位向量）中，并将这些位数组初始化为0。当要插入一个元素时，通过这些哈希函数计算得到的多个哈希值对应的位都被设置为1。当要查询一个元素是否存在时，同样通过这些哈希函数计算得到的多个哈希值对应的位都被检查，如果其中有任意一个位为0，则表示元素一定不存在；如果所有位都为1，则表示元素可能存在，但并不一定存在，可能会存在一定的误判率。</p><p>布隆过滤器的优点是占用空间小，插入和查询操作的时间复杂度都是O(k)，其中k是哈希函数的数量。此外，布隆过滤器可以处理非常大的数据集合，而且对于插入和查询操作的响应速度非常快。然而，布隆过滤器的缺点是存在一定的误判率，即在查询时可能会出现”误判为存在”的情况，因此在使用时需要注意选择合适的哈希函数数量和位数组大小，以及合理设置误判率的阈值。</p><p>布隆过滤器在实际应用中有很多用途，例如在数据库、缓存、网络路由器、爬虫等领域中都有广泛的应用，特别是在处理大规模数据集合时，可以显著减少存储和查询的开销。但需要注意的是，布隆过滤器并不适用于所有情况，因为它存在一定的误判率，并且无法删除已插入的元素，因此在选择使用时需要根据具体应用场景进行评估。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BitSet bitArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> m; <span class="comment">// 位数组的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> k; <span class="comment">// 哈希函数的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="built_in">this</span>.bitArray = <span class="keyword">new</span> <span class="title class_">BitSet</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] hash(String data) &#123;</span><br><span class="line">        <span class="type">int</span>[] hashValues = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] hashBytes = md.digest(data.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">                hashValues[i] = Math.abs((<span class="type">int</span>) (hashBytes[(i * <span class="number">4</span>) % hashBytes.length]) % m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hashValues = hash(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hashValue : hashValues) &#123;</span><br><span class="line">            bitArray.set(hashValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">query</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hashValues = hash(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hashValue : hashValues) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!bitArray.get(hashValue)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建布隆过滤器，位数组大小为100，哈希函数数量为3</span></span><br><span class="line">        <span class="type">BloomFilter</span> <span class="variable">bloomFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BloomFilter</span>(<span class="number">100</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入元素</span></span><br><span class="line">        bloomFilter.insert(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        bloomFilter.insert(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        bloomFilter.insert(<span class="string">&quot;cherry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询元素是否存在</span></span><br><span class="line">        System.out.println(bloomFilter.query(<span class="string">&quot;apple&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(bloomFilter.query(<span class="string">&quot;grape&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式基本理论</title>
      <link href="/post/779e2fcd.html"/>
      <url>/post/779e2fcd.html</url>
      
        <content type="html"><![CDATA[<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>CAP理论由计算机科学家Eric Brewer于2000年提出，它强调了在分布式系统中，这三个概念之间的相互制约关系。</p><ol><li>一致性（Consistency）：在分布式系统中，当有多个副本（节点）时，保证所有的副本在同一时刻具有相同的数据值。即在进行数据更新操作后，所有副本的数据应该保持一致。</li><li>可用性（Availability）：在分布式系统中，系统在任何时候都应该对客户端请求进行响应，即系统具有良好的可用性，不会因为某些节点的故障而导致整个系统不可用。</li><li>分区容错性（Partition Tolerance）：在分布式系统中，即使系统中存在节点之间的网络分区（通信故障），系统仍然应该继续正常运行，保证数据的一致性和可用性。</li></ol><p>CAP理论指出，一个分布式系统最多只能同时满足其中的两个特性，无法同时满足三个特性。这是由于在分布式系统中，网络通信的不确定性和节点故障的存在可能导致一致性、可用性和分区容错性之间的冲突。因此，在设计和选择分布式系统时，需要根据具体的业务需求和系统要求进行权衡和选择，根据实际情况在一致性、可用性和分区容错性之间做出合适的权衡。</p><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><p>BASE是分布式计算领域中一种对CAP理论的一种放松，它强调在分布式系统中，一致性（Consistency）可以相对放松，以提高系统的可用性（Availability）和容错性（Partition Tolerance）。</p><p>BASE是以下三个概念的缩写：</p><ol><li>基本可用性（Basically Available）：系统在面临故障、分区或者其他异常情况时，可以保证继续提供基本的服务，即系统应该始终保持可用状态，响应客户端请求。</li><li>软状态（Soft state）：系统中的状态信息不需要强一致性，即系统中的状态可以在不同的时间和节点之间存在不一致的情况，允许存在一段时间的中间状态。</li><li>最终一致性（Eventual consistency）：系统保证最终达到一致性，但在更新操作之后，系统中的数据可能会存在一段时间的不一致，直到最终达到一致状态。</li></ol><h2 id="集群下的session管理"><a href="#集群下的session管理" class="headerlink" title="集群下的session管理"></a>集群下的session管理</h2><p>在集群（Cluster）下的 Session 管理是指在分布式系统中，对用户会话（Session）进行管理的方式。在分布式系统中，用户的请求可能会被多个服务器处理，因此需要一种方式来保证用户的 Session 数据在不同的服务器之间共享和同步，以确保用户的 Session 数据的一致性和可用性。</p><p>以下是几种常见的集群下的 Session 管理方式：</p><ol><li>共享存储：可以使用共享存储技术（如共享数据库、共享文件系统等）来存储 Session 数据，各个服务器都可以访问共享存储中的 Session 数据，从而实现 Session 的共享和同步。这种方式可以保证 Session 数据的一致性，但可能会存在性能瓶颈和单点故障的风险。</li><li>Session 复制：可以将 Session 数据复制到集群中的每个服务器上，当用户的请求被某个服务器处理时，该服务器可以直接访问本地的 Session 数据，无需访问共享存储，从而避免了性能瓶颈和单点故障的问题。但是，这种方式需要对 Session 数据进行复制和同步，可能会导致网络传输和存储开销较大。</li><li>Sticky Session：也称为粘性 Session，即在用户的请求中包含 Session 标识（如 Session ID），服务器根据该标识将用户的请求路由到之前处理过该 Session 的服务器上。这样可以确保用户的请求在整个会话期间都被路由到同一个服务器上，从而保证 Session 数据的一致性。但是，这种方式可能会导致服务器负载不均衡，某些服务器的负载较重，而其他服务器负载较轻。</li><li>分布式缓存：可以使用分布式缓存技术（如 Redis、Memcached 等）来存储 Session 数据，各个服务器可以通过缓存访问 Session 数据。这种方式可以提供较好的性能和扩展性，但需要考虑缓存数据的一致性和过期管理等问题。</li></ol><h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><p>一致性哈希（Consistent Hashing）是一种在分布式计算中用于处理节点动态变化的哈希算法。它主要用于在分布式系统中对数据进行分片（sharding）和负载均衡（load balancing）。</p><p>传统的哈希算法在添加或删除节点时，可能会导致大量的数据迁移，从而影响系统的性能和可用性。一致性哈希算法通过引入虚拟节点（或称为虚拟副本）的概念，可以在节点动态变化时，减少数据迁移的成本，从而提高了系统的可扩展性和容错性。</p><p>一致性哈希算法的基本原理如下：</p><ol><li>将哈希空间（通常是一个固定的哈希环）映射到节点空间（例如服务器节点）。</li><li>将数据的哈希值映射到哈希空间中的一个位置。</li><li>当需要存储或查找数据时，先计算数据的哈希值，然后根据哈希值在哈希空间中找到对应的位置。</li><li>数据被存储在离其哈希位置最近的节点上，或者由最近的节点负责处理。</li></ol><p>由于节点空间通常较小，节点的加入或删除只会影响到哈希空间中的一小部分位置，从而只需要对受影响的数据进行迁移，而不需要对整个数据集进行迁移，从而减少了数据迁移的成本。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAP </tag>
            
            <tag> BASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领域驱动设计基本概念</title>
      <link href="/post/48fa22ae.html"/>
      <url>/post/48fa22ae.html</url>
      
        <content type="html"><![CDATA[<p>领域驱动设计（DDD）是一种软件设计方法，通过将软件系统的设计与实际业务领域进行紧密关联，从而使软件系统更好地满足业务需求。其核心概念包括：</p><ul><li>领域模型（Domain Model）：对业务领域中的实体、值对象、聚合等概念的抽象和建模，用于表示业务领域的核心概念和规则。</li><li>聚合（Aggregate）：一组相关的领域对象的集合，作为一个整体进行管理和操作，保持一致性和完整性。</li><li>领域事件（Domain Event）：表示领域中发生的重要事件，可以被其他部分监听和处理，用于解耦和处理业务逻辑。</li><li>领域服务（Domain Service）：处理业务逻辑，但不拥有状态的服务，通常用于完成复杂的业务操作。</li><li>限界上下文（Bounded Context）：表示一个边界内的业务领域，用于划分复杂系统的不同部分，避免混淆和耦合。</li></ul><span id="more"></span><h2 id="什么是聚合"><a href="#什么是聚合" class="headerlink" title="什么是聚合"></a>什么是聚合</h2><p>聚合是领域驱动设计中的一个重要概念，用于管理和操作一组相关的领域对象，保持一致性和完整性。聚合有以下几个作用和设计原则：</p><ul><li>事务边界：聚合是一个事务边界，表示一组对象在业务操作中应该保持一致性。所有的变更操作都应该在同一个事务中进行，要么全部成功，要么全部失败，从而保持聚合内的数据一致性。</li><li>封装性：聚合应该对外部隐藏其内部的状态和实现细节，只暴露必要的接口和方法，限制外部直接访问内部状态，从而保护聚合的完整性和一致性。</li><li>边界清晰：聚合应该在业务上有明确定义的边界，用于划分复杂系统的不同部分，避免混淆和耦合。</li><li>单一责任：聚合应该只负责一个明确的业务功能，不应该包含多个不相关的业务逻辑，从而保持聚合的简单性和高内聚性。</li></ul><h2 id="什么是聚合根"><a href="#什么是聚合根" class="headerlink" title="什么是聚合根"></a>什么是聚合根</h2><p>聚合根（Aggregate Root）是领域驱动设计（DDD）中的一个重要概念，用于表示在领域模型中的聚合（Aggregate）的根实体。聚合是一组相关联的实体和值对象的集合，它们共同形成了一个有意义的整体，聚合根是这个聚合中的一个特定实体，负责维护整个聚合的一致性和完整性。</p><p>聚合根在领域驱动设计中有以下几个特点：</p><ol><li>聚合根是聚合的入口点：聚合根是聚合的公共访问点，它是外部世界与聚合内部的交互入口，所有对聚合内部实体和值对象的操作都应该通过聚合根进行。</li><li>聚合根负责维护聚合的一致性和完整性：聚合根负责协调聚合内部实体和值对象之间的关系，以保持聚合的一致性和完整性。聚合根负责在聚合内部进行操作，确保聚合内的实体和值对象之间的状态保持一致。</li><li>聚合根定义聚合的边界：聚合根定义了聚合的边界，它决定了哪些实体和值对象属于聚合的一部分，哪些不属于。聚合根应该包含足够的信息，使得聚合能够自我完整地处理业务逻辑，并保持内部实体和值对象的一致性。</li><li>聚合根是唯一标识聚合的元素：聚合根通常具有唯一标识，用于在系统中标识和定位聚合。聚合根的唯一标识可以作为聚合的外部引用，用于在系统中识别和操作聚合。</li></ol><p>需要注意的是，聚合根并不一定是领域模型中的根实体，它可以是任何在聚合中具有特殊角色的实体。在设计聚合时，需要仔细考虑聚合根的选择，并确保聚合根能够有效地维护聚合的一致性和完整性。聚合根的设计应该遵循领域驱动设计的原则，包括封装、聚合边界、限界上下文等。</p><h2 id="什么是领域事件"><a href="#什么是领域事件" class="headerlink" title="什么是领域事件"></a>什么是领域事件</h2><p>领域事件（Domain Event）是领域驱动设计中的一个概念，用于表示领域中发生的重要事件。它是对业务领域中发生的事实或状态变化的一种抽象，可以被其他部分监听和处理。</p><p>领域事件具有以下几个特点：</p><ul><li>事件驱动：领域事件是基于事件驱动的设计模式，通过发布&#x2F;订阅（Publish&#x2F;Subscribe）机制，将事件发送给对该事件感兴趣的订阅者，从而实现解耦和松散耦合的目的。</li><li>异步处理：领域事件通常是异步处理的，即事件的发生和处理是在不同的时间和处理单元中进行的，从而提高系统的性能和响应性。</li><li>可溯源性：领域事件记录了领域中发生的事实，可以作为系统的审计日志，帮助进行系统的溯源和故障诊断。</li><li>高内聚性：领域事件通常与领域模型紧密相关，用于表示业务领域中的业务逻辑和状态变化，从而保持系统的高内聚性。</li></ul><p>在领域驱动设计中，领域事件可以作为一种有效的方式来处理业务逻辑的复杂性和变化，实现业务流程的灵活性和可扩展性。</p><p>此外，领域事件还可以用于实现业务之间的解耦和协同，促进团队间的合作和自治。通过引入领域事件，可以将业务中的重要状态变化和事实进行抽象和建模，从而可以在系统中进行事件的发布、订阅和处理，使不同的业务模块能够通过事件进行解耦，实现独立演进和灵活组合。</p><p>领域事件的设计和使用需要谨慎，需要考虑事件的粒度、命名、内容和生命周期管理等因素。合理地使用领域事件可以提高系统的可维护性、可扩展性和可测试性，从而更好地支持复杂业务需求和系统的演进。</p><h2 id="什么是领域服务"><a href="#什么是领域服务" class="headerlink" title="什么是领域服务"></a>什么是领域服务</h2><p>领域服务（Domain Services）是领域驱动设计（DDD）中的一个概念，它用于处理领域模型中的业务逻辑和操作，但不属于特定的实体或值对象。领域服务通常用于处理涉及多个实体或值对象的业务逻辑，或者处理领域模型中的跨聚合根的操作。</p><p>领域服务通常具有以下特点：</p><ol><li>封装业务逻辑：领域服务封装了领域模型中的业务逻辑和操作，可以包含一系列的方法或操作，用于实现特定的业务需求。</li><li>无状态性：领域服务通常是无状态的，不保存任何状态信息，每次调用时都需要传入所需的参数。这有助于避免状态的混淆和复杂性，并且使领域服务更加灵活和可测试。</li><li>跨聚合根操作：领域服务可以处理涉及多个聚合根（Aggregate Root）的业务逻辑，协调聚合根之间的交互和操作。这有助于避免在聚合根之间引入过多的耦合和复杂性。</li><li>业务关注点：领域服务通常关注于解决业务问题，而不是技术实现。它们应该与具体的技术实现解耦，从而可以更好地应对业务需求的变化。</li></ol><p>领域服务在DDD中被用于处理复杂的业务逻辑、协调不同聚合根之间的操作，以及处理一些无法归属于特定实体或值对象的业务需求。合理使用领域服务可以帮助实现领域模型的高内聚、低耦合，并提高代码的可维护性和可测试性。</p><h2 id="值对象和实体有什么区别"><a href="#值对象和实体有什么区别" class="headerlink" title="值对象和实体有什么区别"></a>值对象和实体有什么区别</h2><p>在领域驱动设计（DDD）中，值对象（Value Object）和实体（Entity）是两种不同的领域模型对象，它们有以下区别：</p><ol><li>不可变性（Immutability）：值对象是不可变的，一旦创建就不能修改其状态。而实体是可变的，可以在其生命周期内改变其状态。</li><li>等同性比较（Equality Comparison）：值对象的相等性是基于其属性值的比较，即如果两个值对象的属性值相等，则它们被视为相等。而实体的相等性一般是基于其唯一标识（例如数据库中的主键）的比较，即使两个实体的属性值相等，但如果它们的唯一标识不同，则被视为不相等。</li><li>身份与生命周期（Identity and Lifecycle）：值对象没有明确的身份（Identity），它们的主要作用是描述一组属性值，通常用于表示不可变的属性或属性组合。而实体有明确的身份，通常通过唯一标识来区分不同的实体，并且实体具有生命周期，可以在系统中创建、更新和删除。</li><li>持久化（Persistence）：值对象通常不会单独进行持久化，它们通常作为实体的属性而存在，当实体被持久化时，值对象也会一同被持久化。而实体通常需要被持久化到数据库或其他数据存储中，以便能够在系统重启或持久化状态时重新加载。</li><li>业务规则（Business Rules）：值对象通常包含与业务相关的属性和行为，但它们不会包含复杂的业务规则，因为值对象的主要目的是描述属性值。而实体通常包含复杂的业务规则和行为，因为实体具有更丰富的状态和行为。</li></ol><p>总的来说，值对象主要用于描述不可变的属性或属性组合，通常没有明确的身份和生命周期，并且不会单独进行持久化。而实体则具有明确的身份和生命周期，通常需要进行持久化，并且可能包含复杂的业务规则和行为。在DDD中，合理使用值对象和实体可以帮助进行更好的领域建模和设计，从而更好地满足业务需求。</p><h2 id="DDD中的六边形架构"><a href="#DDD中的六边形架构" class="headerlink" title="DDD中的六边形架构"></a>DDD中的六边形架构</h2><p>六边形架构（Hexagonal Architecture），又称为端口和适配器架构（Ports and Adapters Architecture），是领域驱动设计（Domain-Driven Design，DDD）中一种常用的架构模式。它是一种将业务逻辑从外部依赖解耦的架构模式，强调业务逻辑应该独立于外部技术和框架，以便更好地管理复杂的业务规则和逻辑。</p><p>六边形架构的主要特点是通过定义端口（Ports）和适配器（Adapters）的方式，将应用程序划分为不同的层，包括内部核心层、外部依赖层和应用程序接口层。其中：</p><ul><li>内部核心层：包含了业务领域的核心逻辑，也是应用程序的核心。它包括领域模型、领域服务等，负责处理业务逻辑和业务规则。</li><li>外部依赖层：包含了与外部系统的交互，如数据库、消息队列、外部服务等。它负责处理与外部系统的通信和数据存储。</li><li>应用程序接口层：包含了应用程序的接口，可以是用户界面、API接口等。它负责处理用户输入、输出和应用程序的交互。</li></ul><p>六边形架构通过定义清晰的接口和适配器来实现内外部之间的解耦，从而使得业务逻辑能够独立于外部技术和框架进行演进和变化。这种架构模式能够提高应用程序的可测试性、可扩展性和可维护性，同时也能够更好地支持领域驱动设计的实践，使业务规则和领域模型更加清晰和可管理。</p><h2 id="DDD的CQRS模式"><a href="#DDD的CQRS模式" class="headerlink" title="DDD的CQRS模式"></a>DDD的CQRS模式</h2><p>CQRS（Command Query Responsibility Segregation）是领域驱动设计（DDD）中的一种架构模式，用于将应用程序的读操作和写操作分离。</p><p>在传统的应用程序中，读操作和写操作通常是通过相同的模型和数据访问层进行处理的。而在CQRS模式中，读操作和写操作被明确地分离为两个不同的部分，分别使用不同的模型和数据访问层来处理。</p><p>具体而言，CQRS模式包含以下几个核心概念：</p><ul><li>命令（Command）：表示对系统的写操作，例如创建、更新或删除数据。命令负责修改系统的状态。</li><li>查询（Query）：表示对系统的读操作，例如获取数据或查询数据。查询负责从系统中读取数据，但不修改系统的状态。</li><li>模型分离：CQRS模式通过明确地分离写操作和读操作的模型，使其可以独立演进和优化。通常，写操作会使用一个更加面向行为的领域模型，而读操作则使用一个更加面向查询的模型，例如数据传输对象（DTO）。</li><li>数据访问层分离：CQRS模式还将写操作和读操作的数据访问层进行分离。通常，写操作会使用一个更加高效的、面向事务的数据访问层，而读操作则使用一个更加高性能的、面向查询的数据访问层。</li></ul><p>CQRS模式的优势包括：</p><ul><li>灵活性：通过明确地分离读写操作，CQRS模式允许应用程序能够灵活地针对不同的读写操作选择合适的优化策略，从而提高性能和可伸缩性。</li><li>可测试性：CQRS模式将读写操作分离，使得可以对读写操作分别进行单元测试和集成测试，从而提高测试的粒度和效果。</li><li>显式性：CQRS模式通过明确地定义命令和查询的方式，使得应用程序的行为和数据访问更加明确和可理解。</li><li>解耦性：CQRS模式通过明确地分离读写操作的模型和数据访问层，降低了不同操作之间的耦合，从而使得应用程序更加灵活和可维护。</li></ul><p>需要注意的是，CQRS模式并不是适用于所有应用程序的通用解决方案，而是根据应用程序的特点和需求选择合适的架构模式。在应用CQRS模式时，需要仔细考虑应用程序的复杂性、性能需求、团队的技术能力等因素，并进行适当的设计和实施。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> DDD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基础</title>
      <link href="/post/33a007fa.html"/>
      <url>/post/33a007fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><ul><li>检查是否装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line"><span class="comment"># nginx version: nginx/1.21.2</span></span><br></pre></td></tr></table></figure><ul><li>安装成功后的相关目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装文件目录</span><br><span class="line">/usr/local/Cellar/nginx/1.21.2</span><br><span class="line"># 配置文件目录</span><br><span class="line">/usr/local/etc/nginx</span><br><span class="line"># html目录</span><br><span class="line">/usr/local/var/www</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Nginx基本命令"><a href="#Nginx基本命令" class="headerlink" title="Nginx基本命令"></a>Nginx基本命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>brew list nginx</code></td><td>查看nginx的安装信息</td></tr><tr><td><code>nginx</code></td><td>启动</td></tr><tr><td><code>nginx -s stop</code></td><td>停止</td></tr><tr><td><code>nginx -s reload</code></td><td>重启</td></tr><tr><td><code>nginx -t</code></td><td>查看配置文件位置</td></tr></tbody></table><h2 id="反向代理与负载均衡"><a href="#反向代理与负载均衡" class="headerlink" title="反向代理与负载均衡"></a>反向代理与负载均衡</h2><p>创建一个demo项目，并打包，通过<code>java -jar</code>方式启动两个实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo-0.0.1-SNAPSHOT.jar --server.port=8080</span><br><span class="line"></span><br><span class="line">java -jar demo-0.0.1-SNAPSHOT.jar --server.port=8081</span><br></pre></td></tr></table></figure><p>修改nginx.conf，配置反向代理与负载均衡</p><img src="/post/33a007fa/image-20240916203606556.png" class="" title="image-20240916203606556"><p>访问测试：<a href="http://localhost/hello%EF%BC%8C%E5%A4%9A%E6%AC%A1%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E8%BF%9E%E6%8E%A5%EF%BC%8C%E8%AF%B7%E6%B1%82%E9%9A%8F%E6%9C%BA%E6%89%93%E5%88%B0%E4%B8%8D%E5%90%8C%E5%AE%9E%E4%BE%8B">http://localhost/hello，多次访问这个连接，请求随机打到不同实例</a></p><img src="/post/33a007fa/image-20240916203807897.png" class="" title="image-20240916203807897"><img src="/post/33a007fa/image-20240916203832170.png" class="" title="image-20240916203832170"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis思维导图</title>
      <link href="/post/eed9fc2a.html"/>
      <url>/post/eed9fc2a.html</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>Redis<ul><li>单线程模型<ul><li>纯内存访问</li><li>epoll I&#x2F;O多路复用</li><li>避免了线程切换和竞态产生的消耗</li></ul></li><li>数据类型<ul><li>string<ul><li>底层数据结构<ul><li>int</li><li>embstr</li><li>raw</li></ul></li><li>应用场景</li></ul></li><li>hash<ul><li>底层数据结构<ul><li>ziplist</li><li>hashtable</li></ul></li><li>应用场景</li></ul></li><li>list<ul><li>底层数据结构<ul><li>ziplist</li><li>linkedlist</li></ul></li><li>应用场景<ul><li>点赞列表</li></ul></li></ul></li><li>set<ul><li>底层数据结构<ul><li>intset</li><li>hashtable</li></ul></li><li>应用场景<ul><li>关注、取消关注、共同关注</li></ul></li></ul></li><li>zset<ul><li>底层数据结构<ul><li>ziplist</li><li>skiplist</li></ul></li><li>应用场景<ul><li>点赞排行榜</li></ul></li></ul></li></ul></li><li>键过期机制</li><li>持久化<ul><li>RDB</li><li>AOF</li></ul></li><li>集群</li><li>经典问题<ul><li>阻塞</li><li>抖动</li><li>big key</li><li>热点 key</li><li>内存占用飙升</li><li>缓存穿透</li><li>缓存雪崩</li><li>缓存击穿</li></ul></li></ul></li></ul></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试题</title>
      <link href="/post/adbd2430.html"/>
      <url>/post/adbd2430.html</url>
      
        <content type="html"><![CDATA[<h3 id="如何设置键值对的过期时间"><a href="#如何设置键值对的过期时间" class="headerlink" title="如何设置键值对的过期时间"></a>如何设置键值对的过期时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：通过 EXPIRE、PEXPIRE 命令设置键的生存时间</span></span><br><span class="line">SET key value</span><br><span class="line">EXPIRE key 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：通过 EXPIREAT、PEXPIREAT 命令设置键的过期时间</span></span><br><span class="line">SET key value</span><br><span class="line">EXPIREAT key 137725730</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三：只能用于字符串键</span></span><br><span class="line">SETEX key seconds value</span><br></pre></td></tr></table></figure><p>PS：<code>EXPIRE</code>、<code>PEXPIRE</code>、<code>EXPIREAT</code>、底层都是调用<code>PEXPIREAT</code>。</p><span id="more"></span><h3 id="用Redis实现分布式锁"><a href="#用Redis实现分布式锁" class="headerlink" title="用Redis实现分布式锁"></a>用Redis实现分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDistributedLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;myLock&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOCK_EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">5000</span>; <span class="comment">// 锁过期时间，单位毫秒</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">acquireLock</span><span class="params">()</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">        <span class="comment">// 尝试获取分布式锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> valueOperations.setIfAbsent(LOCK_KEY, <span class="string">&quot;locked&quot;</span>); <span class="comment">// RedisTemplate 的 setIfAbsent 方法，如果键不存在则设置键值对并返回 true，否则返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result) &#123;</span><br><span class="line">            <span class="comment">// 成功获取到锁，设置锁的过期时间</span></span><br><span class="line">            redisTemplate.expire(LOCK_KEY, LOCK_EXPIRE_TIME, TimeUnit.MILLISECONDS); <span class="comment">// 设置键的过期时间，单位毫秒</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTemplate.delete(LOCK_KEY); <span class="comment">// 删除键</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用分布式锁的业务逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBusinessWithLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acquireLock()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获得分布式锁后执行业务逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Acquired lock, do business logic...&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">// 模拟业务处理时间</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                releaseLock(); <span class="comment">// 业务处理完成后释放锁</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Released lock.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未获得分布式锁，执行其他逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to acquire lock, do other logic...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 RedisTemplate 实例并设置连接信息</span></span><br><span class="line">        RedisTemplate&lt;String, String&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置 Redis 连接工厂、序列化方式等</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="type">RedisDistributedLock</span> <span class="variable">distributedLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisDistributedLock</span>(redisTemplate);</span><br><span class="line">        distributedLock.doBusinessWithLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 Redis 实现分布式锁时，需要注意以下几点：</p><ol><li>锁的键名和值应该具有足够的唯一性，避免与其他锁冲突。</li><li>在获取锁时，要注意处理竞争条件（例如使用 SETNX 指令）以确保只有一个客户端能够成功获取锁。</li><li>在释放锁时，要检查当前锁的值是否与期望值匹配，以确保只有持有锁的客户端能够成功释放锁。</li><li>要设置适当的锁过期时间，避免锁被永久持有，防止死锁。</li><li>在使用分布式锁时，要考虑 Redis 的高可用性和容错性，例如使用 Redis 集群或者哨兵模式来保障锁的可靠性。</li></ol><h3 id="Redis分布式锁可能存在的问题"><a href="#Redis分布式锁可能存在的问题" class="headerlink" title="Redis分布式锁可能存在的问题"></a>Redis分布式锁可能存在的问题</h3><ol><li>竞争条件（Race Condition）：在多个客户端同时尝试获取锁时，可能会出现竞争条件，导致多个客户端都成功获得锁，从而引发并发访问资源的问题。</li><li>死锁（Deadlock）：如果某个持有锁的客户端在业务处理期间发生异常或崩溃，导致没有释放锁的操作，可能会出现死锁的情况，导致其他客户端无法获得锁。</li><li>锁过期（Lock Expiration）：为了避免死锁，通常会给锁设置过期时间，但如果业务处理时间较长，超过了锁的过期时间，可能会导致其他客户端误认为锁已经释放，从而引发并发访问资源的问题。</li><li>锁的重入性（Lock Reentrancy）：在某些场景下，同一个客户端可能需要多次获取同一个锁，例如嵌套的业务处理逻辑。如果分布式锁没有支持锁的重入性，可能会导致同一个客户端无法在业务处理期间重新获取锁，从而引发死锁或并发访问资源的问题。</li><li>性能开销（Performance Overhead）：使用分布式锁可能会增加系统的性能开销，例如频繁的锁获取和锁释放操作，以及锁的管理和维护。如果锁的使用不当，可能会影响系统的性能和响应时间。</li></ol><h3 id="缓存击穿、缓存穿透、缓存雪崩"><a href="#缓存击穿、缓存穿透、缓存雪崩" class="headerlink" title="缓存击穿、缓存穿透、缓存雪崩"></a>缓存击穿、缓存穿透、缓存雪崩</h3><ul><li><p>缓存击穿：指的是在使用缓存时，一个或多个缓存键过期或者不存在，导致大量请求直接绕过缓存，直接请求数据库或其他后端服务，从而对后端系统造成了较大的压力。这通常发生在高并发的情况下，导致数据库或其他后端服务出现性能瓶颈。</p><p>解决方案：可以通过设置热点数据的缓存过期时间较长，或者使用互斥锁等机制，在缓存失效时只有一个线程去加载数据，并在加载完数据后更新缓存。</p></li><li><p>缓存穿透：指的是在查询数据时，请求的数据在缓存中不存在，但是也不在后端系统中，导致大量的请求直接请求后端系统，从而对后端系统造成了较大的压力。这通常发生在恶意请求或者查询不存在的数据的情况下。</p><p>解决方案：可以在查询前通过布隆过滤器等机制进行缓存层的数据校验，从而过滤掉不存在的数据，避免对后端系统的无效请求。</p></li><li><p>缓存雪崩：指的是在缓存中大量的缓存键在同一时刻过期或者失效，导致大量请求直接请求后端系统，从而对后端系统造成了较大的压力。这通常发生在缓存键的过期时间设置不合理或者缓存服务器出现故障时。</p><p>解决方案：可以通过设置缓存键的过期时间随机化，避免同时大量缓存键过期；使用多级缓存策略，如热缓存、冷缓存、持久化缓存等，以保证缓存的高可用性；使用缓存自动补偿策略，如使用异步更新缓存，从而在缓存失效时自动重新加载数据，避免请求直接访问后端系统。</p></li></ul><h3 id="Redis持久化：RDB和AOF"><a href="#Redis持久化：RDB和AOF" class="headerlink" title="Redis持久化：RDB和AOF"></a>Redis持久化：RDB和AOF</h3><p>Redis支持多种方式的持久化，包括RDB（Redis Database）持久化和AOF（Append-Only File）持久化。</p><ul><li><p>RDB：RDB持久化是将Redis的数据以二进制格式保存到硬盘上的一种方式。当设定的条件满足时，Redis会将当前内存中的数据生成一个快照（Snapshot），并保存到硬盘上的一个RDB文件中。</p><p>RDB文件可以用于数据的备份、恢复以及迁移。</p><p>RDB的优点是生成的文件较小，对性能影响较小；缺点是可能会因为定期生成快照导致数据丢失。</p></li><li><p>AOF：AOF持久化是将Redis的写操作以追加的方式保存到硬盘上的一种方式。每当Redis执行一条写命令时，相应的写操作会被追加到AOF文件的末尾，而不是直接写入到内存中。</p><p>AOF文件记录了所有的写操作，可以用于数据的恢复。</p><p>AOF的优点是可以提供更高的数据安全性，因为每一条写命令都会被记录下来；缺点是生成的文件相对较大，对性能影响较大。</p></li></ul><h3 id="Redis和Memcached-的比较"><a href="#Redis和Memcached-的比较" class="headerlink" title="Redis和Memcached 的比较"></a>Redis和Memcached 的比较</h3><ol><li>数据类型支持：Redis支持丰富的数据类型，包括字符串（string）、哈希（hash）、列表（list）、集合（set）、有序集合（sorted set）等，而Memcached仅支持简单的键值对数据模型。</li><li>持久化支持：Redis支持持久化机制，可以将数据存储到磁盘上，以便在重启或宕机时能够保留数据，而Memcached不支持数据持久化。</li><li>复杂计算和数据处理：Redis支持复杂的计算和数据处理功能，如分布式锁、发布&#x2F;订阅、事务等，而Memcached仅作为简单的键值对缓存，不支持复杂的数据处理操作。</li><li>分布式支持：Redis支持分布式架构，可以通过搭建Redis集群来实现高可用和高性能的缓存解决方案，而Memcached不支持分布式架构，通常需要借助其他工具来实现分布式缓存。</li><li>内存管理：Redis提供了丰富的内存管理功能，如内存淘汰策略、过期时间设置等，而Memcached较为简单，没有像Redis那样的内存管理功能。</li><li>多线程支持：Memcached采用多线程模型，能够充分利用多核处理器的优势，而Redis采用单线程模型，对于某些高并发场景可能需要额外的优化。</li><li>数据一致性：Memcached不保证数据的持久性和一致性，而Redis提供了持久化机制和复制机制，可以保证数据的持久性和一致性。</li></ol><h3 id="Redis事务机制"><a href="#Redis事务机制" class="headerlink" title="Redis事务机制"></a>Redis事务机制</h3><p>Redis 提供了类似于传统关系型数据库的事务概念，允许在一系列的 Redis 命令中进行原子性操作，保证多个命令的执行要么全部成功，要么全部失败，不存在部分成功或部分失败的情况。</p><p>Redis 的事务使用 MULTI、EXEC、WATCH 和 DISCARD 四个命令来实现。具体的步骤如下：</p><ol><li>使用 MULTI 命令开始一个事务。</li><li>在 MULTI 和 EXEC 之间，可以执行多个 Redis 命令，这些命令会被放入一个事务队列中，但不会立即被执行。</li><li>使用 EXEC 命令来执行事务中的所有命令，Redis 会按照事务队列中的顺序依次执行这些命令。</li><li>如果事务中的所有命令都执行成功，返回所有命令的执行结果；如果事务中的命令有一个失败，那么所有命令都不会被执行，返回错误。</li><li>使用 WATCH 命令可以监视一个或多个 Redis 键，如果在事务执行期间这些键被其他客户端修改，事务会被打断。</li><li>使用 DISCARD 命令可以取消当前事务，清空事务队列中的命令。</li></ol><p>需要注意的是，Redis 的事务并不是像关系型数据库那样支持回滚的，即使事务中的某个命令执行失败，其他命令也会继续执行。因此，在使用 Redis 事务时，需要谨慎处理错误情况，并在需要回滚的情况下，通过应用层的处理来实现。</p><h3 id="Redis-的数据过期策略"><a href="#Redis-的数据过期策略" class="headerlink" title="Redis 的数据过期策略"></a>Redis 的数据过期策略</h3><ol><li>主动过期策略：在写入数据时，可以为每个键值对设置一个过期时间（TTL，Time To Live），Redis会在键值对的过期时间到达后主动删除该键值对。这种策略是最常用的过期策略，可以有效地控制数据的生命周期。</li><li>惰性过期策略：在读取数据时，如果发现键值对已经过期，则会删除该键值对并返回空值。这种策略可以避免在写入数据时进行额外的时间和空间开销，但可能导致过期键值对在读取时仍然存在一段时间。</li><li>定期过期策略：Redis会每隔一段时间（默认是每秒钟）检查一部分过期键值对，并删除其中过期的键值对。这种策略可以在不占用太多CPU资源的情况下，定期地清理过期键值对，保持数据集的相对干净。</li></ol><h3 id="Redis-为什么这么快"><a href="#Redis-为什么这么快" class="headerlink" title="Redis 为什么这么快"></a>Redis 为什么这么快</h3><ol><li>内存存储：Redis将数据存储在内存中，而不是在磁盘上。由于内存的读写速度比磁盘快得多，这使得Redis能够实现非常快的读写操作。</li><li>简单的数据结构：Redis支持多种简单的数据结构，如字符串、哈希、列表、集合和有序集合等，这些数据结构都是基于内存的，并且在处理时非常高效。这种简单的数据结构使得Redis在处理数据时能够保持高效率。</li><li>单线程的优点：尽管Redis是单线程的，但它通过异步IO和事件驱动的方式来处理客户端请求，避免了多线程中的锁和竞争等开销，从而减少了系统的复杂性。此外，单线程也使得Redis的操作是原子的，不会出现多线程并发操作导致的数据不一致问题。</li><li>高效的网络通信：Redis使用了高效的网络通信协议，例如RESP（REdis Serialization Protocol），它是一种轻量级的二进制协议，能够快速地将数据传输到客户端。这有助于提高Redis的响应速度。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/post/89826705.html"/>
      <url>/post/89826705.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker架构图"><a href="#Docker架构图" class="headerlink" title="Docker架构图"></a>Docker架构图</h2><img src="/post/89826705/Docker%E6%9E%B6%E6%9E%84%E5%9B%BE.png" class=""><span id="more"></span><h2 id="Docker与虚拟机"><a href="#Docker与虚拟机" class="headerlink" title="Docker与虚拟机"></a>Docker与虚拟机</h2><img src="/post/89826705/Docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%BD%E8%B1%A1%E5%9B%BE.png" class=""><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><img src="/post/89826705/image-20241027223956215.png" class="" title="image-20241027223956215"><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker build</code></td><td>构建镜像</td></tr><tr><td><code>docker images</code></td><td>查看本地镜像</td></tr><tr><td><code>docker images -q</code></td><td>只显示镜像ID</td></tr><tr><td><code>docker search mysql</code></td><td>查找镜像</td></tr><tr><td><code>docker pull mysql</code></td><td>拉取最新版本镜像</td></tr><tr><td><code>docker pull mysql:5.7</code></td><td>拉取指定版本镜像</td></tr><tr><td><code>docker rmi 镜像名/镜像ID ...</code></td><td>删除镜像</td></tr><tr><td><code>docker rmi $(docker images -q)</code></td><td>批量删除镜像</td></tr></tbody></table><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker ps</code></td><td>查看容器</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器</td></tr><tr><td><code>docker ps -a -n=1</code></td><td>查看最新创建的容器</td></tr><tr><td><code>docker run -d --name nginx -p 80:80 nginx</code></td><td>运行容器</td></tr><tr><td><code>docker stop</code></td><td>停止容器</td></tr><tr><td><code>docker start</code></td><td>启动容器</td></tr><tr><td><code>docker restart</code></td><td>重启容器</td></tr><tr><td><code>docker rm -f 容器</code></td><td>删除容器</td></tr><tr><td><code>docker logs</code></td><td>查看容器运行日志</td></tr><tr><td><code>docker exec -it 容器 /bin/bash</code></td><td>进入容器</td></tr><tr><td><code>docker inspect 容器</code></td><td>查看容器详细信息</td></tr><tr><td><code>docker update --restart=always 容器</code></td><td>设置容器开机自启</td></tr><tr><td><code>docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</code></td><td>格式化输出</td></tr><tr><td><code>docker save</code></td><td>保存镜像</td></tr><tr><td><code>docker load</code></td><td>加载镜像</td></tr></tbody></table><p>ps：上面这些命令中的容器即可以诗容器名也可以是容器ID</p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker COMMAND --help</code></td><td>查看帮助文档</td></tr><tr><td><code>systemctl enable docker</code></td><td>设置docker开机自启动</td></tr></tbody></table><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>修改 <code>/root/.bashrc</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> psf=<span class="string">&#x27;ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行命令让别名生效：<code>source /root/.bashrc</code></p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷（Volume）是容器技术（如 Docker）中一种用于<strong>持久化数据</strong>和<strong>共享数据</strong>的机制。它允许容器之间、或者容器和宿主机之间共享数据，同时实现数据的持久存储，即使容器被删除，数据也不会丢失。</p><img src="/post/89826705/image-20241028233002568.png" class="" title="image-20241028233002568"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker volume create</code></td><td>创建数据卷</td></tr><tr><td><code>docker volume ls</code></td><td>查看数据卷</td></tr><tr><td><code>docker volume rm</code></td><td>删除数据卷</td></tr><tr><td><code>docker volume prune</code></td><td>清除数据卷</td></tr><tr><td><code>docker volume inspect</code></td><td>查看数据卷详情</td></tr></tbody></table><p>数据卷挂载：在创建容器时用 <code>-v 卷名:容器目录</code> 进行挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>查看是否挂载成功：</p><img src="/post/89826705/image-20241029000212988.png" class="" title="image-20241029000212988"><p>查看具体的挂载路径：</p><img src="/post/89826705/image-20241028234315885.png" class="" title="image-20241028234315885"><p>这样就完成了宿主机目录 <code>/var/lib/docker/volumes/html/_data</code> 和容器目录 <code>/usr/share/nginx/html</code> 的双向映射。</p><p>PS：如果创建容器时未通过 <code>-v html:/usr/share/nginx/html</code> 选项挂载，虚拟机会创建一个匿名卷，并将 <code>/usr/share/nginx/html</code> 挂载到这个匿名卷上，匿名卷的名称是一串随机字符串，具体的挂载路径就是 <code>/var/lib/docker/volumes/xxx/_data</code>。</p><p>通过数据卷进行挂载，宿主机中的挂载目录默认是：<code>/var/lib/docker/volumes/卷名/_data</code>，挂载路径有点太深，所以 docker 也支持直接指定宿主机目录进行挂载，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /root/mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><p>ps：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名。</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><p>联合文件系统</p><p>镜像分层</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><code>Dockerfile</code></h3><p><code>Dockerfile</code> 就是一个文本文件，包含一系列指令，用来说明如何构建镜像。常见指令如下：</p><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>FROM</code></td><td>指定基础镜像</td><td><code>FROM centos:7</code></td></tr><tr><td><code>ENV</code></td><td>配置环境变量，用于后续指令</td><td><code>ENV key=value</code></td></tr><tr><td><code>COPY</code></td><td>拷贝本地文件到镜像的指定目录</td><td><code>COPY ./jre11.tar.gz /tmp</code></td></tr><tr><td><code>RUN</code></td><td>执行Linux的shell命令</td><td><code>RUN tar -zxvf /tmp/jre11.tar.gz &amp;&amp; EXPORTS path=/tmp/jre11:$path</code></td></tr><tr><td><code>EXPOSE</code></td><td>指定容器运行时监听的端口</td><td><code>EXPOSE 8080</code></td></tr><tr><td><code>ENTRYPOINT</code></td><td>镜像中应用的启动命令，容器运行时调用</td><td><code>ENTRYPOINT java -jar xxx.jar</code></td></tr><tr><td><code>VOLUME</code></td><td>创建一个数据卷挂载点</td><td></td></tr><tr><td><code>WORKDIR</code></td><td>配置工作目录</td><td></td></tr></tbody></table><p><code>Dockerfile</code> 示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量：jdk安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> &amp;&amp; tar -xf ./jdk8.tar.gz &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./jdk8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/jdk8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>上面这个 <code>Dockerfile</code> 等同于：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像</p><p>有了 <code>Dockerfile</code> 之后，就可以通过如下命令构建镜像了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># . 表示Dockerfile所在目录</span></span><br><span class="line">docker build -t 镜像名称 .</span><br></pre></td></tr></table></figure><p>PS：如果构建镜像所用文件名称不是 <code>Dockerfile</code>，需通过 <code>-f dockerfileName</code> 选项指定构建镜像所用文件</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>在 Linux 系统中，网络配置文件目录是<code>/etc/sysconfig/network-scripts</code>。虚拟机和主机宿主机的网络连接方式主要分为如下三种：</p><ul><li>桥接模式 (Bridged)</li></ul><blockquote><p>桥接模式下，虚拟机与宿主机位于同一个物理网络中。虚拟机通过宿主机的物理网卡直接连接到网络，并获得与宿主机相同网段的IP地址。这使得虚拟机与其他网络设备可以直接进行通信，类似于它自己是一台物理机。</p><p>常用于需要虚拟机像物理机一样直接访问外部网络的情况，如文件服务器、Web服务器等。</p></blockquote><ul><li>网络地址转换 (NAT)</li></ul><blockquote><p>NAT模式下，虚拟机通过宿主机的网络连接访问外部网络。宿主机为虚拟机提供一个虚拟网卡，并将虚拟机的网络请求转换为宿主机的网络请求。这种方式类似于路由器工作原理，虚拟机自己不能被外部网络直接访问，但可以访问外部资源。</p><p>常用于需要虚拟机访问外部网络但无需被外部设备访问的场景，比如开发和测试环境。</p></blockquote><ul><li>仅主机模式 (Host-only)</li></ul><blockquote><p>仅主机模式下，虚拟机只能与宿主机进行网络通信，无法访问外部网络。这种模式创建了一个虚拟的网络环境，虚拟机只能和宿主机或其他配置为Host-only模式的虚拟机通信。</p><p>适用于需要完全封闭的网络环境，如局域网测试或调试等。</p></blockquote><p>默认情况下，所有容器都是以 <code>bridge</code> 方式连接到 Docker 的一个虚拟网桥上，如下图：</p><img src="/post/89826705/image-20241030004706881.png" class="" title="image-20241030004706881"><p>通过默认网桥连接的容器之间只能通过ip互相访问，但是如果容器重启，ip地址变了，相关的ip配置未同步修改，就会导致容器之间不通。解决办法是创建自定义网络，并将需要互相访问的容器加入该网络，这样容器之间就可以通过容器名互相访问，不会受ip地址变化的影响。</p><p>Docker常用网络命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker network ls</code></td><td>查看所有网络</td></tr><tr><td><code>docker network create</code></td><td>创建网络</td></tr><tr><td><code>docker network rm</code></td><td>删除指定网络</td></tr><tr><td><code>docker network prune</code></td><td>清除未使用网络</td></tr><tr><td><code>docker network connect</code></td><td>使指定容器加入网络</td></tr><tr><td><code>docker network disconnect</code></td><td>使指定容器离开网络</td></tr><tr><td><code>docker network inspect</code></td><td>查看网络详细信息</td></tr></tbody></table><p>PS：容器可以先启动再通过命令 <code>docker network connect</code> 加入指定网络，也可以在启动容器时通过选项 <code>--network 网络名</code> 直接加入指定网络。两者的区别在于：方式一会同时加入默认网络docker0和指定网络，方式二只会加入指定网络。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="制作Tomcat镜像"><a href="#制作Tomcat镜像" class="headerlink" title="制作Tomcat镜像"></a>制作<code>Tomcat</code>镜像</h3><ul><li>编写 <code>Dockerfile</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER timewait7&lt;1029776125@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ADD jdk-8u202-linux-x64.tar.gz /usr/local</span><br><span class="line">ADD apache-tomcat-9.0.94.tar.gz /usr/local</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_202</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt/jar $JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.94</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.94</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.94/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.94/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以Dockerfile作为文件名，构建时不需要通过 -f 参数指定文件</span></span><br><span class="line">docker build -t diytomcat .</span><br></pre></td></tr></table></figure><img src="/post/89826705/%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E8%BF%87%E7%A8%8B.png" class=""><ul><li>启动镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name diytomcat -v /home/mount/tomcat/test:/usr/local/apache-tomcat-9.0.94/webapps/test -v /home/mount/tomcat/logs:/usr/local/apache-tomcat-9.0.94/logs diytomcat</span><br></pre></td></tr></table></figure><ul><li>测试tomcat</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依次执行以下步骤</span></span><br><span class="line"><span class="built_in">cd</span> /home/mount/tomcat/test</span><br><span class="line"><span class="built_in">mkdir</span> WEB-INF</span><br><span class="line"><span class="built_in">cd</span> WEB-INF</span><br><span class="line">vi web.xml</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">vi index.jsp</span><br></pre></td></tr></table></figure><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.jsp</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Hello World JSP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello, World!&lt;/h1&gt;</span><br><span class="line">&lt;% System.out.println(<span class="string">&quot;----------logs----------&quot;</span>); %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/post/89826705/image-20240915230103023.png" class="" title="image-20240915230103023"><img src="/post/89826705/image-20240915230216263.png" class="" title="image-20240915230216263"><h3 id="部署前后端项目"><a href="#部署前后端项目" class="headerlink" title="部署前后端项目"></a>部署前后端项目</h3><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为test的网络</span></span><br><span class="line">docker network create <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="创建数据库容器"><a href="#创建数据库容器" class="headerlink" title="创建数据库容器"></a>创建数据库容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /root/mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">--network <span class="built_in">test</span> \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><h4 id="部署后端应用"><a href="#部署后端应用" class="headerlink" title="部署后端应用"></a>部署后端应用</h4><ol><li><p>准备 jar 包和 <code>Dockerfile</code> 文件，假设放在虚拟机的 &#x2F;root 目录下</p></li><li><p>构建镜像</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">docker built -t appname .</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器并运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行容器并连接网络test</span></span><br><span class="line">docker run -d --name imagename -p 8080:8080 --network <span class="built_in">test</span> appname</span><br></pre></td></tr></table></figure><h4 id="部署前端应用"><a href="#部署前端应用" class="headerlink" title="部署前端应用"></a>部署前端应用</h4><ol><li>将前端项目和 nginx 配置文件放在 &#x2F;root&#x2F;nginx 目录下</li><li>创建容器并运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name nginx \</span><br><span class="line">-p 18080:18080 \</span><br><span class="line">-p 18081:18081 \</span><br><span class="line">-v /root/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--network <span class="built_in">test</span> \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h3 id="部署Redis集群"><a href="#部署Redis集群" class="headerlink" title="部署Redis集群"></a>部署Redis集群</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ul><li>创建redis网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 172.38.0.0/16 --gateway 172.38.0.1 redis-net</span><br></pre></td></tr></table></figure><ul><li>集群配置文件脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>启动容器，创建集群节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node-01</span></span><br><span class="line">docker run -d -p 6371:6379 -p 16371:16379 --name redis-01 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">--net redis-net --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># node-02</span></span><br><span class="line">docker run -d -p 6372:6379 -p 16372:16379 --name redis-02 \</span><br><span class="line">-v /mydata/redis/node-2/data:/data \</span><br><span class="line">-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">--net redis-net --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他节点类推</span></span><br></pre></td></tr></table></figure><ul><li>创建集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br></pre></td></tr></table></figure><img src="/post/89826705/image-20240916133527083.png" class="" title="image-20240916133527083"><ul><li>以集群方式创建redis客户端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c</span><br></pre></td></tr></table></figure><ul><li>查看集群信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster info</span><br></pre></td></tr></table></figure><img src="/post/89826705/image-20240916133836873.png" class="" title="image-20240916133836873"><ul><li>查看集群节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><img src="/post/89826705/image-20240916133936635.png" class="" title="image-20240916133936635"><ul><li>测试集群高可用</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置一个键值对</span></span><br><span class="line"><span class="built_in">set</span> hello world</span><br></pre></td></tr></table></figure><img src="/post/89826705/image-20240916134512178.png" class="" title="image-20240916134512178"><p>停掉redis-01节点，redis-05自动升级为master</p><img src="/post/89826705/image-20240916134700142.png" class="" title="image-20240916134700142"><p>此时依然可以<code>get hello</code>依然可以成功返回值</p><img src="/post/89826705/image-20240916135154195.png" class="" title="image-20240916135154195"><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ul><li>编写<code>docker-compose.yaml</code>文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">r1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">r1</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;7001&quot;</span>]</span><br><span class="line">  <span class="attr">r2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">r2</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;7002&quot;</span>]</span><br><span class="line">  <span class="attr">r3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">r3</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;7003&quot;</span>]</span><br></pre></td></tr></table></figure><ul><li>启动容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up -d</span><br></pre></td></tr></table></figure><ul><li>配置主从关系</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it r2 redis-cli -p 7002</span><br><span class="line">$ slaveof 虚拟机ip 7001</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it r2 redis-cli -p 7003</span><br><span class="line">$ slaveof 虚拟机ip 7001</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it r1 redis-cli -p 7001</span><br><span class="line">$ info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.33.11,port=7002,state=online,offset=2165,lag=1</span><br><span class="line">slave1:ip=192.168.33.11,port=7003,state=online,offset=2165,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:f7b8c1f916ecc6e3ab6fcba7d73c1f115a880cb6</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2165</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:2165</span><br><span class="line">$ <span class="built_in">set</span> num 123</span><br><span class="line">$ get num</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it r2 redis-cli -p 7002</span><br><span class="line">$ info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.33.11</span><br><span class="line">master_port:7001</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:2249</span><br><span class="line">slave_repl_offset:2249</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:f7b8c1f916ecc6e3ab6fcba7d73c1f115a880cb6</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2249</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:2235</span><br><span class="line">$ <span class="built_in">set</span> num 456</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br><span class="line"><span class="string">$ get num</span></span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ docker exec -it r3 redis-cli -p 7003</span></span><br><span class="line"><span class="string"># Replication</span></span><br><span class="line"><span class="string">role:slave</span></span><br><span class="line"><span class="string">master_host:192.168.33.11</span></span><br><span class="line"><span class="string">master_port:7001</span></span><br><span class="line"><span class="string">master_link_status:up</span></span><br><span class="line"><span class="string">master_last_io_seconds_ago:1</span></span><br><span class="line"><span class="string">master_sync_in_progress:0</span></span><br><span class="line"><span class="string">slave_read_repl_offset:2417</span></span><br><span class="line"><span class="string">slave_repl_offset:2417</span></span><br><span class="line"><span class="string">slave_priority:100</span></span><br><span class="line"><span class="string">slave_read_only:1</span></span><br><span class="line"><span class="string">replica_announced:1</span></span><br><span class="line"><span class="string">connected_slaves:0</span></span><br><span class="line"><span class="string">master_failover_state:no-failover</span></span><br><span class="line"><span class="string">master_replid:f7b8c1f916ecc6e3ab6fcba7d73c1f115a880cb6</span></span><br><span class="line"><span class="string">master_replid2:0000000000000000000000000000000000000000</span></span><br><span class="line"><span class="string">master_repl_offset:2417</span></span><br><span class="line"><span class="string">second_repl_offset:-1</span></span><br><span class="line"><span class="string">repl_backlog_active:1</span></span><br><span class="line"><span class="string">repl_backlog_size:1048576</span></span><br><span class="line"><span class="string">repl_backlog_first_byte_offset:113</span></span><br><span class="line"><span class="string">repl_backlog_histlen:2305</span></span><br><span class="line"><span class="string">$ set num 789</span></span><br><span class="line"><span class="string">(error) READONLY You can&#x27;</span>t write against a <span class="built_in">read</span> only replica.</span><br><span class="line">$ get num</span><br><span class="line"><span class="string">&quot;123&quot;</span></span><br></pre></td></tr></table></figure><h2 id="镜像安装"><a href="#镜像安装" class="headerlink" title="镜像安装"></a>镜像安装</h2><h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉镜像</span></span><br><span class="line">docker pull nacos/nacos-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器，使用内嵌存储</span></span><br><span class="line">docker run -d --name nacos -e MODE=standalone -p 8848:8848 -p 9848:9848 -p 9849:9849 nacos/nacos-server:v2.4.3-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用外部存储</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name nacos \</span><br><span class="line">--env-file ./nacos/custom.env \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">-p 9848:9848 \</span><br><span class="line">-p 9849:9849 \</span><br><span class="line">nacos/nacos-server:v2.4.3-slim</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># custom.env</span></span><br><span class="line"><span class="attr">PREFER_HOST_MODE</span>=<span class="string">hostname</span></span><br><span class="line"><span class="attr">MODE</span>=<span class="string">standalone</span></span><br><span class="line"><span class="attr">SPRING_DATASOURCE_PLATFORM</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">MYSQL_SERVICE_HOST</span>=<span class="string">192.168.33.11</span></span><br><span class="line"><span class="attr">MYSQL_SERVICE_DB_NAME</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">MYSQL_SERVICE_PORT</span>=<span class="string">3306</span></span><br><span class="line"><span class="attr">MYSQL_SERVICE_USER</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">MYSQL_SERVICE_PASSWORD</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">MYSQL_SERVICE_DB_PARAM</span>=<span class="string">characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vagrant使用入门</title>
      <link href="/post/f8d4142b.html"/>
      <url>/post/f8d4142b.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><ul><li>安装Vagrant</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap hashicorp/tap</span><br><span class="line">brew install hashicorp/tap/hashicorp-vagrant</span><br></pre></td></tr></table></figure><ul><li>初始化虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅创建一个Vagrantfile</span></span><br><span class="line"><span class="built_in">mkdir</span> vm</span><br><span class="line"><span class="built_in">cd</span> vm</span><br><span class="line">vagrant init centos/7</span><br></pre></td></tr></table></figure><ul><li>启动虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一步才是拉取并启动镜像</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><ul><li>连接虚拟机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ul><li>卸载旧版docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><ul><li>安装yum-utils并设置docker仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li><p>安装docker</p><ul><li><p>安装最新版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li><li><p>安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line">docker-ce.x86_64    3:27.1.1-1.el9    docker-ce-stable</span><br><span class="line">docker-ce.x86_64    3:27.1.0-1.el9    docker-ce-stable</span><br><span class="line">&lt;...&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动docker</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机默认启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器自动启动</span></span><br><span class="line">docker run -d --restart=always --name 容器名称 镜像</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改容器自动启动</span></span><br><span class="line">docker update --restart=always 容器ID</span><br></pre></td></tr></table></figure><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>假设在虚拟机中启动了一个tomcat镜像，要想在宿主机中的访问该tomcat，需配置端口转发。打开Vagrantfile，按如下修改配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;forwarded_port&quot;, guest: 8080, host: 8080</span><br></pre></td></tr></table></figure><p>修改完Vagrantfile后，需重启虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure><h2 id="Tabby连接虚拟机"><a href="#Tabby连接虚拟机" class="headerlink" title="Tabby连接虚拟机"></a>Tabby连接虚拟机</h2><p>Tabby是一个类终端的ssh客户端，使用Tabby连接到虚拟机后，可以向虚拟机上传文件。操作步骤如下：</p><ol><li>获取虚拟机的SSH信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入Vagrantfile所在目录</span></span><br><span class="line">vagrant ssh-config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行上述命令，将得到连接虚拟机所需的ssh信息：</span></span><br><span class="line">Host default</span><br><span class="line">  HostName 127.0.0.1</span><br><span class="line">  User vagrant</span><br><span class="line">  Port 2222</span><br><span class="line">  IdentityFile /path/to/private_key</span><br></pre></td></tr></table></figure><ol start="2"><li>配置Tabby连接</li></ol><blockquote><p>在 Tabby 中，点击 <code>Profiles</code> -&gt; <code>New Profile</code>。</p><p>在 <code>Connection</code> 选项卡中设置以下信息：</p><ul><li><strong>Host:</strong> <code>127.0.0.1</code> （从 <code>vagrant ssh-config</code> 中获取的 <code>HostName</code>）</li><li><strong>Port:</strong> <code>2222</code> （从 <code>vagrant ssh-config</code> 中获取的 <code>Port</code>）</li><li><strong>User:</strong> <code>vagrant</code> （从 <code>vagrant ssh-config</code> 中获取的 <code>User</code>）</li><li><strong>Private Key</strong>: 选择 <code>IdentityFile</code> 的路径（从 <code>vagrant ssh-config</code> 中获取的 <code>/path/to/private_key</code>）。</li></ul></blockquote><img src="/post/f8d4142b/Tabby%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA.png" class=""><ol start="3"><li><p>上传文件</p><p>如果以下两种方式上传失败，请注意vagrant对虚拟机中的目的路径是否有写权限，如果没有，需要用chmod和chown命令修改文件的属性以获得写权限。</p><ul><li><p>图形界面化方式</p><img src="/post/f8d4142b/Tabby%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA.png" class=""></li><li><p>命令行方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /path/to/private_key 连接虚拟机的ssh信息中的IdentityFile</span></span><br><span class="line"><span class="comment"># /Users/yourname/Documents/example.txt 宿主机文件路径</span></span><br><span class="line">scp -i /path/to/private_key -P 2222 /Users/yourname/Documents/example.txt vagrant@127.0.0.1:/home/vagrant/</span><br></pre></td></tr></table></figure><p>PS：该命令在宿主机命令行终端中执行</p></li></ul></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><img src="/post/f8d4142b/image-20241027114900897.png" class="" title="image-20241027114900897"><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br></pre></td></tr></table></figure><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><img src="/post/f8d4142b/image-20241027115202371.png" class="" title="image-20241027115202371"><p>解决方法：使用阿里云镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><img src="/post/f8d4142b/image-20241027135816837.png" class="" title="image-20241027135816837"><p>解决方法：添加镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://dockerproxy.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.nju.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hammal.staronearth.win/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub.staronearth.win/&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vagrant </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot字段校验</title>
      <link href="/post/53c5a4e7.html"/>
      <url>/post/53c5a4e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JSR303 定义了 Bean 校验的标准 validation-api，hibernate validation 是对这个标准的实现，Spring Validation 则是对 hibernate validation 的二次封装。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于 web 服务来说，大部分情况下，请求参数分为如下两种形式：</p><ul><li>GET 请求，使用 <code>@RequestParam</code> 和 <code>@PathVariable</code> 传递参数</li><li>POST 和 PUT 请求，使用 <code>@RequestBody</code> 传递参数</li></ul><h3 id="GET-请求参数校验"><a href="#GET-请求参数校验" class="headerlink" title="GET 请求参数校验"></a>GET 请求参数校验</h3><p>GET 请求一般用 <code>@RequestParam</code> 或 <code>@PathVariable</code>  传参，需在 Controller 上加 <code>@Validated</code> 注解，并在接口参数加约束注解，自动参数校验才能生效。校验失败会抛出 <code>javax.validation.ConstraintViolationException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> UserDTO <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> <span class="meta">@NotBlank</span> String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST-PUT-请求参数校验"><a href="#POST-PUT-请求参数校验" class="headerlink" title="POST&#x2F;PUT 请求参数校验"></a>POST&#x2F;PUT 请求参数校验</h3><p>POST 或 PUT 请求一般用 <code>@RequestBody</code> 传参，后端使用 DTO 对象接收参数，只需要在 DTO 对象前加上 <code>@Valid</code> 或 <code>@Validated</code> 注解就可以实现自动参数校验，校验失败会抛出 <code>org.springframework.web.bind.MethodArgumentNotValidException</code> 异常。</p><p>比如有一个保存 <code>User</code> 的接口，要求 <code>username</code> 长度是 2-10 个字符，<code>password</code> 长度不小于 6 个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length(min = 2, max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserDTO <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> UserDTO userDTO)</span> &#123; <span class="comment">// 也可以使用 @Valid</span></span><br><span class="line">        <span class="keyword">return</span> userDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(&quot;com.tw.codesnippet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> ex.getBindingResult();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bindingResult.getFieldError().getField() + <span class="string">&quot;:&quot;</span> + bindingResult.getFieldError().getDefaultMessage();</span><br><span class="line">        <span class="keyword">return</span> Result.failed(ResultEnum.VALIDATE_FAILED.getCode(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleConstraintViolationException</span><span class="params">(ConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.failed(ResultEnum.VALIDATE_FAILED.getCode(), ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><p>在实际开发中，存在多个接口使用同一个DTO来接口参数的情况，而不同的接口需要校验的字段以及规则可能不一样，这时在DTO的字段上笼统地加上约束注解无法达到这个目的。为此，Spring Validation提供了分组校验功能。</p><p>还是上面这个例子，保存<code>User</code>时，<code>userId</code>可以为空，但是更新时，<code>userId</code>不允许为空。</p><ul><li>DTO字段上的约束注解指定分组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Save</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Update</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口参数的<code>@Validated</code>注解指定分组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserDTO <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(UserDTO.Save.class)</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserDTO <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(UserDTO.Update.class)</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：此时不能使用<code>@Valid</code>注解，因为<code>@Valid</code>不具有分组校验功能</p><h3 id="嵌套校验"><a href="#嵌套校验" class="headerlink" title="嵌套校验"></a>嵌套校验</h3><p>如果DTO的某个字段是一个对象，要自动校验这个对象的属性，就得用到嵌套校验。</p><ul><li>在DTO对象字段加上<code>@Valid</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 2, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, max = 10, groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotBlank(groups = &#123;Save.class, Update.class&#125;)</span></span><br><span class="line">        <span class="keyword">private</span> String street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Save</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Update</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h3><p>有时框架提供的校验无法满足业务复杂的校验需求，此时可以自定义校验注解。</p><ul><li>自定义注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = PhoneValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Phone &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;无效的手机号&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现自定义校验器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Phone, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PHONE_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^1[3-9]\\d&#123;9&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> PHONE_PATTERN.matcher(value).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> 字段校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一返回结构</title>
      <link href="/post/97d9585e.html"/>
      <url>/post/97d9585e.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IResult</span> &#123;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getMessage</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultEnum</span> <span class="keyword">implements</span> <span class="title class_">IResult</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">2001</span>, <span class="string">&quot;接口调用成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FAILED(<span class="number">2002</span>, <span class="string">&quot;接口调用失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VALIDATE_FAILED(<span class="number">2003</span>, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FORBIDDEN(<span class="number">2004</span>, <span class="string">&quot;禁止访问&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.SUCCESS.getCode(), ResultEnum.SUCCESS.getMessage(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.SUCCESS.getCode(), message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; failed() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.FAILED.getCode(), ResultEnum.FAILED.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; failed(String message) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.FAILED.getCode(), message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; failed(IResult result) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(result.getCode(), result.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;world&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">helloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;java&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">helloJava</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello, Java!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在所有接口的返回结构都统一了，但每个接口都要写上封装的逻辑也是一项很重复的工作，可以通过实现<code>ResponseBodyAdvice</code>对结果统一包装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.tw.codesnippet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Result) &#123;</span><br><span class="line">            <span class="keyword">return</span> body;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时Controller层的代码就可以简化如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;world&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;java&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloJava</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Python!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果调用上面的接口会抛出如下异常<code>Result cannot be cast to class java.lang.String</code>，debug可以发现，如果接口的返回值是String类型，<code>beforeBodyWrite</code>的<code>selectedConverterType</code>使用的是<code>StringHttpMessageConverter</code>，而接口是其他类型返回值时<code>selectedConverterType</code>使用的则是<code>MappingJackson2HttpMessageConverter</code>。</p><p>为了解决这个问题，网上的解决办法是添加一个<code>MappingJackson2HttpMessageConverter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.add(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际运行会发现，<code>selectedConverterType</code>的类型依然是<code>StringHttpMessageConverter</code>，具体原因是：当接口返回String时，Spring默认会优先使用<code>StringHttpMessageConverter</code>来处理，即使在<code>WebConfig</code>里添加了<code>MappingJackson2HttpMessageConverter</code>。</p><p>要让Spring使用<code>MappingJackson2HttpMessageConverter</code>来处理String返回值并生成JSON，可以通过以下几种方法：</p><ol><li>删除<code>StringHttpMessageConverter</code>，确保Spring使用<code>MappingJackson2HttpMessageConverter</code>作为转换器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        converters.removeIf(converter -&gt; converter <span class="keyword">instanceof</span> StringHttpMessageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>显示指定 <code>Content-Type</code> 和 <code>Accept</code> 头</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">&quot;Accept: application/json&quot;</span> http://localhost:8080/hello/world</span><br></pre></td></tr></table></figure><p>在客户端的请求中明确指定 <code>Accept: application/json</code>，这样 Spring 会根据 <code>Accept</code> 头使用 <code>MappingJackson2HttpMessageConverter</code> 来生成 JSON 响应。</p><ol start="3"><li>对于String类型，让接口返回<code>Result&lt;String&gt;</code></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码片段</title>
      <link href="/post/35215128.html"/>
      <url>/post/35215128.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="获取请求路径上的参数"><a href="#获取请求路径上的参数" class="headerlink" title="获取请求路径上的参数"></a>获取请求路径上的参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserContextInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String&gt; pathVariables = (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class="line">                HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);</span><br><span class="line">        <span class="type">var</span> <span class="variable">projectId</span> <span class="operator">=</span> pathVariables.get(<span class="string">&quot;project_id&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream操作"><a href="#stream操作" class="headerlink" title="stream操作"></a><code>stream</code>操作</h3><ul><li><code>List&lt;String&gt;</code>转<code>Map&lt;String, List&lt;String&gt;&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">list2Map</span><span class="params">(List&lt;String&gt; locations)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> locations.stream()</span><br><span class="line">        .map(s -&gt; s.split(<span class="string">&quot;:&quot;</span>))</span><br><span class="line">        .collect(Collectors.groupingBy(a -&gt; a[<span class="number">0</span>],</span><br><span class="line">            Collectors.mapping(a -&gt; a[<span class="number">1</span>], Collectors.toList())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h3><ul><li><code>Date</code>转<code>LocalDateTime</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LocalDateTime <span class="title function_">asLocalDateTime</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="卫语句"><a href="#卫语句" class="headerlink" title="卫语句"></a>卫语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卫语句用于检查某些前置条件，如果条件不满足，直接返回或抛出异常，避免继续执行后续的代码块。</span></span><br><span class="line"><span class="comment"> * 通过使用卫语句，可以减少代码的嵌套程度，提高代码的可读性和可维护性。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查订单是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 使用卫语句直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查订单状态</span></span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 使用卫语句直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行订单处理逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="批量更新时间"><a href="#批量更新时间" class="headerlink" title="批量更新时间"></a>批量更新时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user_operate_record</span><br><span class="line">SET create_time = DATE_ADD(&#x27;2023-04-01 00:00:00&#x27;, INTERVAL FLOOR(RAND() * 31536000) SECOND);</span><br></pre></td></tr></table></figure><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE IF EXISTS BatchInsert;</span><br><span class="line">delimiter $$</span><br><span class="line">CREATE PROCEDURE BatchInsert(IN loop_counts INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE Var LONG;</span><br><span class="line">SET Var = 0;</span><br><span class="line">SET autocommit = 0;</span><br><span class="line">WHILE Var &lt; loop_counts DO</span><br><span class="line">INSERT INTO `user_operate_record` (`iam_id`, `tenant_id`, `region`, `operate_type`, `operate_module`, `module_id`, `input_param`, `output_param`, `create_time`, `is_system`)</span><br><span class="line">VALUES (&#x27;4b98e1d72c214f72af1fa55cfcb5ecf8&#x27;, &#x27;afc4784e64d146549764787876c60856&#x27;, &#x27;cn-north-7&#x27;, &#x27;read&#x27;, &#x27;template&#x27;, &#x27;cb1069e0278144d8f49976285e1efe68&#x27;, null, null, &#x27;2023-05-30 00:00:00&#x27;, 1);</span><br><span class="line">SET Var = Var + 1;</span><br><span class="line">END WHILE;</span><br><span class="line">COMMIT;</span><br><span class="line">END$$;</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">CALL BatchInsert(200000);</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 代码片段 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用命令</title>
      <link href="/post/1069a098.html"/>
      <url>/post/1069a098.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>SHOW ENGINGES</code></td><td>查看支持哪些存储引擎</td></tr><tr><td><code>SHOW CREATE TABLE table_name;</code></td><td>查看建表语句</td></tr><tr><td><code>SHOW STATUS LIKE &#39;thread%&#39;;</code></td><td>查看状态变量</td></tr><tr><td><code>SHOW VARIABLES LIKE &#39;character_set_*&#39;;</code></td><td>查看字符集</td></tr><tr><td><code>SHOW VARIABLES LIKE &#39;collation_*&#39;;</code></td><td>查看比较规则</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>范式vs反范式</title>
      <link href="/post/1565c7e3.html"/>
      <url>/post/1565c7e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="候选码"><a href="#候选码" class="headerlink" title="候选码"></a>候选码</h2><p>关系模式中，能够唯一标识每一行数据的最小属性集。在多个候选码中，可以选择一个作为表的主键（Primary Key），一个关系只能有一个主键。</p><span id="more"></span><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><p>给定关系模式R，如果属性集X的值确定属性集Y的值，则成Y依赖于X，记作：X→Y。</p><p>对于X→Y，如果存在X的真子集使得X’→Y，那么X→Y就是部分函数依赖，否则就是完全函数依赖。</p><p>如果X→Y，Y→Z，那么X→Z就是传递函数依赖。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>假设有一个学生课程关系模式如下：</p><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th align="center">Sdept</th><th align="center">Mname</th><th align="center">Cname</th><th align="center">Grade</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">学生-1</td><td align="center">学院-1</td><td align="center">院长-1</td><td align="center">课程-1</td><td align="center">90</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-2</td><td align="center">80</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-1</td><td align="center">100</td></tr><tr><td align="center">3</td><td align="center">学生-3</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-2</td><td align="center">95</td></tr></tbody></table><p>可以看出这个关系模式的候选码是{Sno, Cname}，因为{Sno, Cname}是可以唯一标识每一行数据的最小数据集。</p><p>这是一个不符合范式的关系模式，存在如下异常：</p><ul><li>数据冗余：例如学生-2、课程-1、课程-2都出现了多次</li><li>插入异常：如果关系模式要求课程不能为空，那么在学生尚未选课的情况下就无法单独插入学生数据</li><li>修改异常：出现多次的数据只修改了其中一部分，导致数据不一致</li><li>删除异常：例如删除所有课程-1相关数据会导致学生-1信息丢失</li></ul><h2 id="范式vs反范式"><a href="#范式vs反范式" class="headerlink" title="范式vs反范式"></a>范式vs反范式</h2><p>为了解决上面提到的这些异常，关系模式的设计就需要规范化。</p><p><strong>第一范式（1NF）</strong>：属性不可分割，即每个属性都是不可分割的原子项。</p><p><strong>第二范式（2NF）</strong>：满足第一范式，且不存在部分函数依赖，即任意非主属性完全依赖于主键。</p><p><strong>第三范式（3NF）</strong>：满足第二范式，且不存在传递函数依赖，即任意非主属性直接依赖于主键。</p><p><strong>反范式</strong>：完全遵循范式的数据库设计可能性能较差，因为需要大量的连表查询。反范式是牺牲部分范式以提高性能的一种设计方式，具体有以下方式：</p><ul><li>增加冗余列：在多个表中具有相同的列，通常用来避免查询时的连表操作。</li><li>增加派生列：增加的列可以通过表中其他数据计算胜场，作用是减少查询时的计算量，从而加快查询速度。</li><li>重新组表：如果许多用户需要查看两个表连接出来的结果数据，则把这两个表重新组成一个表来减少连接从而提高性能。</li><li>分割表：垂直分割、水平分割</li></ul><p>很显然，牺牲范式以提高性能的反范式设计会带来一些问题，如：</p><ul><li>数据冗余，浪费存储空间</li><li>数据不一致</li><li>增、删、改效率降低</li><li>可能导致插入异常、删除异常、修改异常</li></ul><p>因此在实际的设计中，需要根据具体应用场景进行权衡。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 范式 </tag>
            
            <tag> 反范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发中遇到的一些问题</title>
      <link href="/post/e1b3780b.html"/>
      <url>/post/e1b3780b.html</url>
      
        <content type="html"><![CDATA[<h2 id="jpa"><a href="#jpa" class="headerlink" title="jpa"></a>jpa</h2><h3 id="jpa-数组越界异常"><a href="#jpa-数组越界异常" class="headerlink" title="jpa 数组越界异常"></a>jpa 数组越界异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Type</span> &#123;</span><br><span class="line">    A,</span><br><span class="line">    B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Enumerated</span></span><br><span class="line">    <span class="keyword">private</span> Type type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设表里存在一条数据，<code>type</code> 列的值为2，在使用JPA查询数据这条数据时会报数组越界异常，具体报错如：<code>nested exception is java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2</code></p><p>报错的原因是 <code>Type</code> 的 <code>ordinal</code> 范围是[0, 1]，2不在范围内。</p><h3 id="jpa-缓存问题"><a href="#jpa-缓存问题" class="headerlink" title="jpa 缓存问题"></a>jpa 缓存问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanvasInstanceDataObject</span> &#123;</span><br><span class="line">    <span class="comment">// 其他字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column(updatable = false)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> Date createdAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> Date updatedAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_canvas_instance` (</span><br><span class="line">  `created_at` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `updated_at` datetime(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>问题背景：某张表及其对应的实体类定义如上，代码中执行语句 <code>DataObject dataObject = canvasInstanceGateway.save(dataObject);</code> ，<code>dataObject</code> 的 <code>createdAt</code> 字段格式为 <code>2025-01-03 16:46:51.876</code>，而 <code>updatedAt</code> 为 <code>Mon Jan 06 19:55:43 CST 2025</code> 。</p><p>经过查询资料发现 JPA 在调用 <code>save</code> 方法保存对象时会将对象缓存在一级缓存中，如果保存之后立即查询该对象，会从缓存中获取数据，而不是从数据库中重新查询。而内存中的 <code>dataObject</code> 的 <code>updatedAt</code> 字段是 <code>Date</code> 类型，只有在真正保存到数据库中，才会序列化为时间戳类型。为了确保从数据库中重新查询数据，需使用 <code>EntityManager</code> 的 <code>clear</code> 方法来清空一级缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanvasInstanceService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CanvasInstanceRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> CanvasInstanceDataObject <span class="title function_">saveAndFindById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">CanvasInstanceDataObject</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CanvasInstanceDataObject</span>();</span><br><span class="line">        <span class="comment">// 设置 model 的属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存到数据库</span></span><br><span class="line">        <span class="type">CanvasInstanceDataObject</span> <span class="variable">savedModel</span> <span class="operator">=</span> repository.save(model);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空实体管理器的缓存</span></span><br><span class="line">        entityManager.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数据库中重新查询</span></span><br><span class="line">        <span class="type">CanvasInstanceDataObject</span> <span class="variable">foundModel</span> <span class="operator">=</span> repository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> foundModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h2><h3 id="jackson-序列化空指针异常"><a href="#jackson-序列化空指针异常" class="headerlink" title="jackson 序列化空指针异常"></a>jackson 序列化空指针异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Storage</span> &#123;</span><br><span class="line">    </span><br><span class="line">    String endpoint;</span><br><span class="line"></span><br><span class="line">    String storagePath;</span><br><span class="line"></span><br><span class="line">    String schema;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRegion</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] parts = endpoint.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>Jackson</code>序列化<code>Storage</code>对象时，如果<code>endpoint</code>为<code>null</code>，会报空指针异常。</p><p>解决方法：修改函数名，如将<code>getRegion</code>改为<code>resolveRegion</code>。</p><h3 id="配置反序列化构造函数"><a href="#配置反序列化构造函数" class="headerlink" title="配置反序列化构造函数"></a>配置反序列化构造函数</h3><p><code>Jackson</code>反序列化默认需要一个无参构造器来创建对象，之后再通过<code>setter</code>方法设置对象的属性值。如果类没有无参构造器，反序列化会失败，如果不想添加无参构造器，可以通过配置让<code>Jackson</code>用其他构造器来反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="meta">@JsonProperty(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                  <span class="meta">@JsonProperty(&quot;age&quot;)</span> Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>(redisTemplate))</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            .excludePathPatterns(</span><br><span class="line">                <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序会抛出如下异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named <span class="string">&#x27;redisTemplate&#x27;</span> is expected to be of <span class="built_in">type</span> <span class="string">&#x27;org.springframework.data.redis.core.StringRedisTemplate&#x27;</span> but was actually of <span class="built_in">type</span> <span class="string">&#x27;org.springframework.data.redis.core.RedisTemplate&#x27;</span></span><br></pre></td></tr></table></figure><p>原因是<code>@Resource</code>注解默认按名称注入依赖对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java-stream"><a href="#java-stream" class="headerlink" title="java stream"></a>java stream</h2><h3 id="Collectors-toMap"><a href="#Collectors-toMap" class="headerlink" title="Collectors.toMap()"></a><code>Collectors.toMap()</code></h3><p>JDK 8 引入了 <code>stream</code>，极大地简化了日常开发中的集合处理，但是如果使用不当，也会带来一些问题，其中 <code>Collectors.toMap()</code> 就需要谨慎使用。下面简单记录一下使用 <code>Collectors.toMap()</code> 过程中遇到的两个问题。</p><p>先准备一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题1：key重复"><a href="#问题1：key重复" class="headerlink" title="问题1：key重复"></a>问题1：<code>key</code>重复</h4><p>单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToMapWithDuplicateKey</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Tom&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Long, String&gt; map = users.stream().collect(Collectors.toMap(User::getId, User::getName));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法会看到如下报错：</p><img src="/post/e1b3780b/image-20241015001026308.png" class="" title="image-20241015001026308"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T, K, V&gt;</span><br><span class="line">BiConsumer&lt;Map&lt;K, V&gt;, T&gt; <span class="title function_">uniqKeysMapAccumulator</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends K&gt; keyMapper,</span></span><br><span class="line"><span class="params">                                                Function&lt;? <span class="built_in">super</span> T, ? extends V&gt; valueMapper)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (map, element) -&gt; &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> keyMapper.apply(element);</span><br><span class="line">        <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> Objects.requireNonNull(valueMapper.apply(element));</span><br><span class="line">        <span class="type">V</span> <span class="variable">u</span> <span class="operator">=</span> map.putIfAbsent(k, v);</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="literal">null</span>) <span class="keyword">throw</span> duplicateKeyException(k, u, v);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击进入报错的源码，可以看到如果 <code>key</code> 重复，jdk 默认的处理方式是抛出异常。为了解决这个问题，需要用户自定义处理 <code>key</code> 重复的策略，比如用新值覆盖旧值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToMapWithDuplicateKey</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Tom&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Long, String&gt; map = users.stream().collect(Collectors.toMap(User::getId, User::getName, (oldVal, newVal) -&gt; newVal));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题2：value为null"><a href="#问题2：value为null" class="headerlink" title="问题2：value为null"></a>问题2：<code>value</code>为<code>null</code></h4><p>单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToMapWithNullValue</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Tom&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2L</span>, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Long, String&gt; map = users.stream().collect(Collectors.toMap(User::getId, User::getName, (oldVal, newVal) -&gt; newVal));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法可以看到如下报错：</p><img src="/post/e1b3780b/image-20241015001918076.png" class="" title="image-20241015001918076"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">merge</span><span class="params">(K key, V value,</span></span><br><span class="line"><span class="params">               BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入源码，可以看到 jdk 在合并 <code>key</code> 相同的元素时，如果 <code>value</code> 为 <code>null</code>，会直接抛出异常。处理这个问题，可以先过滤掉 <code>value</code> 可能为 <code>null</code> 的数据，或返回默认值。</p><p>过滤掉 <code>name</code> 为 <code>null</code> 的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToMapWithNullValue</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Tom&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2L</span>, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Long, String&gt; map = users.stream()</span><br><span class="line">        .filter(user -&gt; user.getName() != <span class="literal">null</span>)</span><br><span class="line">        .collect(Collectors.toMap(User::getId, User::getName, (oldVal, newVal) -&gt; newVal));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>name</code> 为 <code>null</code>，默认返回空字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testToMapWithNullValue</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;Tom&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2L</span>, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Long, String&gt; map = users.stream()</span><br><span class="line">        .collect(Collectors.toMap(User::getId, it -&gt; Optional.ofNullable(it.getName()).orElse(<span class="string">&quot;&quot;</span>), (oldVal, newVal) -&gt; newVal));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h2><h3 id="rabbitmq-启动异常"><a href="#rabbitmq-启动异常" class="headerlink" title="rabbitmq 启动异常"></a>rabbitmq 启动异常</h3><p>错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOT FAILED</span><br><span class="line">2024-12-08 23:37:59.182161+08:00 [error] &lt;0.215.0&gt;</span><br><span class="line">2024-12-08 23:37:59.182161+08:00 [error] &lt;0.215.0&gt; BOOT FAILED</span><br><span class="line">2024-12-08 23:37:59.182161+08:00 [error] &lt;0.215.0&gt; ===========</span><br><span class="line">2024-12-08 23:37:59.182161+08:00 [error] &lt;0.215.0&gt; Error during startup: &#123;error,failed_to_initialize_feature_flags_registry&#125;</span><br><span class="line">2024-12-08 23:37:59.182161+08:00 [error] &lt;0.215.0&gt;</span><br><span class="line">===========</span><br><span class="line">Error during startup: &#123;error,failed_to_initialize_feature_flags_registry&#125;</span><br><span class="line"></span><br><span class="line">2024-12-08 23:38:00.183638+08:00 [notice] &lt;0.45.0&gt; Application rabbit exited with reason: &#123;failed_to_initialize_feature_flags_registry,&#123;rabbit,start,[normal,[]]&#125;&#125;</span><br><span class="line">&#123;<span class="built_in">exit</span>,terminating,[&#123;application_controller,call,2,[&#123;file,<span class="string">&quot;application_controller.erl&quot;</span>&#125;,&#123;line,511&#125;]&#125;,&#123;application,<span class="string">&#x27;-ensure_all_started/3-lc$^0/1-0-&#x27;</span>,1,[&#123;file,<span class="string">&quot;application.erl&quot;</span>&#125;,&#123;line,367&#125;]&#125;,&#123;application,ensure_all_started,3,[&#123;file,<span class="string">&quot;application.erl&quot;</span>&#125;,&#123;line,367&#125;]&#125;,&#123;rabbit,<span class="string">&#x27;-start_it/1-fun-0-&#x27;</span>,1,[&#123;file,<span class="string">&quot;rabbit.erl&quot;</span>&#125;,&#123;line,430&#125;]&#125;,&#123;timer,tc,2,[&#123;file,<span class="string">&quot;timer.erl&quot;</span>&#125;,&#123;line,590&#125;]&#125;,&#123;rabbit,start_it,1,[&#123;file,<span class="string">&quot;rabbit.erl&quot;</span>&#125;,&#123;line,426&#125;]&#125;,&#123;init,start_it,1,[]&#125;,&#123;init,start_em,1,[]&#125;]&#125;</span><br><span class="line">Runtime terminating during boot (terminating)</span><br></pre></td></tr></table></figure><p>错误原因：RabbitMQ 的数据目录可能已经损坏或者不一致</p><p>解决方式：删除 RabbitMQ 的数据目录并重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /usr/local/var/lib/rabbitmq/mnesia</span><br><span class="line">brew services start rabbitmq</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 问题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> Jackson </tag>
            
            <tag> 流 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
